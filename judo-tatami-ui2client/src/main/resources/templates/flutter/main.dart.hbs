{{log 'Main launcher generation for' (variable application.name) level='info'}}
//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}

import 'package:flutter/material.dart';
import 'package:openapi_dart_common/openapi.dart';
import '{{ path application.name }}/injector/injector.dart';
import '{{ path application.name }}/main.dart';
import '{{ path application.name }}/oauth.dart';
import '{{ path application.name }}/utilities/package.dart';

void main() async {
    configureDependencies();
    const bool kIsWeb = identical(0, 0.0);

    // Call the meta data with no token refresh interceptor
    ApiClient _apiClient = ApiClient(basePath: "http://localhost:8181/api/{{ baseUrl application.name }}", apiClientDelegate: DioClientDelegate());
    locator.registerSingleton<ApiClient>(_apiClient);
    try {
        await Oauth.loadClientMetaData();
        Info.serverDown = false;
    } on ApiException catch (error){
        if (error.code == 500 && error.message.contains('Connection')) {
            Info.serverDown = true;
        }
    }

    if (Oauth.isAuthenticationRequired()) {
        locator.unregister(instance: _apiClient);

        // Add the token refresh interceptor for the rest of the api calls
        _apiClient = ApiClient(basePath: "http://localhost:8181/api/{{ baseUrl application.name }}", apiClientDelegate: Oauth.getDioDelegate());
        locator.registerSingleton<ApiClient>(_apiClient);

        if (!isNavigateToSettingsPage) {
            Oauth.loginAuthorizeAndExchangeCode();
        }

        var token = await Oauth.processLogin();
        await Oauth.addTokenToApiClient(token);
    }
    runApp({{ fqClass application.name }}Application());
}
