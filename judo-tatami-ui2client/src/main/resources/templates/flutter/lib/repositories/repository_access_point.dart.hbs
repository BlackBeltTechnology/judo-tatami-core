//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}//
// {{# each ap.relations }}
//    Relation {{ ap.name }}.{{ variable name }} ({{ target.name }}) behaviours: {{# each behaviours }} {{{ . }}} {{/ each }}
//    TransferObject: {{ target.name }} behaviours: {{# each target.behaviours }} {{{ . }}} {{/ each }}
// {{/ each }}

part of {{ variable ap.name }}.repository;

@lazySingleton
class {{ repositoryClassName ap }}{{# if application.relationTypes }} with {{ else }}{{# if classes }} with {{/ if }}{{/ if }}
{{# each application.relationTypes as |relation| ~}}
    {{ repositoryRelationName relation }}{{# unless @last }},{{/ unless }} {{# if @last }}{{# if classes ~}}, {{/ if }} {{/ if }}
{{/ each }}
{{# each classes as |class| ~}}
    {{ repositoryClassName class }}{{# unless @last }},{{/ unless }}
{{/ each }} {

{{# if application.principal }}
  //////////////////////////////////////////////////////////////////////////////
  // GET Principal
  //////////////////////////////////////////////////////////////////////////////
  Future<{{ storeClassName application.principal }}> getPrincipal() async {
    {{ fqClass application.principal.transferObjectTypeName }} {{ variable application.principal.name }}Response = await DefaultApi(locator<ApiClient>()).{{ fqVariable application.actor.name }}Principal();
    return {{ repositoryStoreMapperClassName application.actor }}.create{{ storeClassName application.principal }}From{{ fqClass application.principal.name }}({{ variable application.principal.name }}Response);

  }
{{/ if }}
}
