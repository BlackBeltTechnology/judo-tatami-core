//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}
//
//   Access point relation: {{ accessRelation.name }}
//   Relation: {{ relationType.name }}
//   Relation owner: {{ relationType.owner.name }}
//   Relation target: {{ relationType.target.name }}
//
//    Behaviours: {{ fqClass relationType.owner.name }}.{{ variable relationType.name }} ({{ fqClass relationType.target.name }})
//    {{# each relationType.behaviours }}
//        self:   {{{ . }}}
//    {{/ each }}
//    {{# each relationType.targetBehaviours }}
//        target: {{{ . }}}
//    {{/ each }}
//    {{# each relationType.sourceBehaviours }}
//        source: {{{ . }}}
//    {{/ each }}

part of {{ variable ap.name }}.repository;

class {{ fqClass ap.name }}{{ className accessRelation.name }}{{ fqClass accessRelation.target.name }}{{ className relationType.name }}Repository {

  {{# if relationType.isCollection ~}}
  //////////////////////////////////////////////////////////////////////////////
  // GET Collection
  //////////////////////////////////////////////////////////////////////////////
  Future<List<{{ fqClass relationType.target.name }}Store>> get{{ fqClass accessRelation.target.name }}{{ className relationType.name }}({{ fqClass relationType.owner.name }}Store {{ variable relationType.name }}{{ className relationType.owner.name }}Store) async {
    List<{{ fqClass relationType.target.name }}> {{ variable relationType.target.name }}ResponseList = await {{ className accessRelation.name }}Api(locator<ApiClient>()).{{ fqVariable relationType.owner.name }}Get{{ className relationType.name }}({{ variable relationType.name }}{{ className relationType.owner.name }}Store.identifier, {{ modelName relationType.target.name }}Extension{{ fqClassWithoutModel relationType.target.name}}QueryCustomizer());
    return {{ variable relationType.target.name }}ResponseList.map<{{ fqClass relationType.target.name }}Store>(
      {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relationType.target.name }}StoreFrom{{ fqClass relationType.target.name }}).toList();
  }

  {{ else }}
  //////////////////////////////////////////////////////////////////////////////
  // GET SINGLE
  //////////////////////////////////////////////////////////////////////////////
  Future<{{ fqClass relationType.target.name }}Store> get{{ fqClass accessRelation.target.name }}{{ className relationType.name }}({{ fqClass relationType.owner.name }}Store {{ variable relationType.name }}{{ className relationType.owner.name }}Store, {{ fqClass relationType.target.name }}Store {{ variable relationType.target.name }}Store) async {
    {{ fqClass relationType.target.name }} {{ variable relationType.target.name }}Response = await {{ className accessRelation.name }}Api(locator<ApiClient>()).{{ fqVariable relationType.owner.name }}Get{{ className relationType.name }}({{ variable relationType.name }}{{ className relationType.owner.name }}Store.identifier, {{ modelName relationType.target.name }}Extension{{ fqClassWithoutModel relationType.target.name}}QueryCustomizer());
    return {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relationType.target.name }}StoreFrom{{ fqClass relationType.target.name }}({{ variable relationType.target.name }}Response);
  }
  {{/ if}}

  //////////////////////////////////////////////////////////////////////////////
  // CREATE
  //////////////////////////////////////////////////////////////////////////////
  Future<{{ fqClass relationType.target.name }}Store> create{{ fqClass accessRelation.target.name }}{{ className relationType.name }}({{ fqClass relationType.owner.name }}Store {{ variable relationType.name }}{{ className relationType.owner.name }}Store, {{ fqClass relationType.target.name }}Store {{ variable relationType.target.name }}Store) async {
    var {{ variable relationType.target.name }}ExtendedRequest = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relationType.target.name }}ExtendedFrom{{ fqClass relationType.target.name }}Store({{ variable relationType.target.name }}Store);
    var {{ variable relationType.target.name }}Response = await {{ className accessRelation.name }}Api(locator<ApiClient>()).{{ fqVariable relationType.owner.name }}Create{{ className relationType.name }}({{ variable relationType.name }}{{ className relationType.owner.name }}Store.identifier, {{ variable relationType.target.name }}ExtendedRequest);
    return {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relationType.target.name }}StoreFrom{{ fqClass relationType.target.name }}({{ variable relationType.target.name }}Response);
  }

  //////////////////////////////////////////////////////////////////////////////
  // DELETE
  //////////////////////////////////////////////////////////////////////////////
  Future<void> delete{{ fqClass accessRelation.target.name }}{{ className relationType.name }}({{ fqClass relationType.owner.name }}Store {{ variable relationType.name }}{{ className relationType.owner.name }}Store,  {{ fqClass relationType.target.name }}Store {{ variable relationType.target.name }}Store) async {
    // Request mapping
    var {{ variable relationType.target.name }}Request = {{ modelName application.name }}Identifier();
    {{ variable relationType.target.name }}Request.identifier = {{ variable relationType.target.name }}Store.identifier;
    await {{ className accessRelation.name }}Api(locator<ApiClient>()).{{ fqVariable relationType.owner.name }}Delete{{ className relationType.name }}({{ variable relationType.name }}{{ className relationType.owner.name }}Store.identifier, {{ variable relationType.target.name }}Request);
  }

  //////////////////////////////////////////////////////////////////////////////
  // UPDATE
  //////////////////////////////////////////////////////////////////////////////
  Future<{{ fqClass relationType.target.name }}Store> update{{ fqClass accessRelation.target.name }}{{ className relationType.name }}({{ fqClass relationType.owner.name }}Store {{ variable relationType.name }}{{ className relationType.owner.name }}Store,  {{ fqClass relationType.target.name }}Store {{ variable relationType.target.name }}Store) async {
    var {{ variable relationType.target.name }}Request = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relationType.target.name }}From{{ fqClass relationType.target.name }}Store({{ variable relationType.target.name }}Store);
    var {{ variable relationType.target.name }}Response = await {{ className accessRelation.name }}Api(locator<ApiClient>()).{{ fqVariable relationType.owner.name }}Update{{ className relationType.name }}({{ variable relationType.name }}{{ className relationType.owner.name }}Store.identifier, {{ variable relationType.target.name }}Request);
    return {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relationType.target.name }}StoreFrom{{ fqClass relationType.target.name }}({{ variable relationType.target.name }}Response);
  }

  {{# each relationType.target.relations ~}}
  //////////////////////////////////////////////////////////////////////////////
  // GET CREATE RANGE FOR {{ variable name }}
  //////////////////////////////////////////////////////////////////////////////
  Future<List<{{ fqClass target.name }}Store>> get{{ fqClass accessRelation.target.name }}{{ className name }}RangeForCreate{{ className ../relationType.name }}({{ fqClass ../relationType.target.name }}Store {{ variable ../relationType.name }}{{ fqClass ../relationType.owner.name }}Store) async {
    var {{ variable ../relationType.target.name }}Request = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass ../relationType.target.name }}From{{ fqClass ../relationType.target.name }}Store({{ variable ../relationType.name }}{{ fqClass ../relationType.owner.name }}Store);
    var {{ variable target.name }}ListResponse = await {{ className ../accessRelation.name }}Api(locator<ApiClient>()).{{ fqVariable relationType.owner.name }}GetRangeOf{{ className name }}ToCreate{{ className ../relationType.name }}({{ variable ../relationType.target.name }}Request);
    return {{ variable target.name }}ListResponse.map<{{ fqClass target.name }}Store>(
      {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass target.name }}StoreFrom{{ fqClass target.name }}).toList();
  }

  //////////////////////////////////////////////////////////////////////////////
  // GET UPDATE RANGE FOR {{ variable name }}
  //////////////////////////////////////////////////////////////////////////////
  Future<List<{{ fqClass target.name }}Store>> get{{ fqClass accessRelation.target.name }}{{ className name }}RangeForUpdate{{ className ../relationType.name }}({{ fqClass ../relationType.target.name }}Store {{ variable ../relationType.name }}{{ fqClass ../relationType.owner.name }}Store, List<{{ fqClass target.name }}Store> selectable{{ className target.name }}ListStore) async {
    var {{ variable ../relationType.target.name }}Request = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass ../relationType.target.name }}From{{ fqClass ../relationType.target.name }}Store({{ variable ../relationType.name }}{{ fqClass ../relationType.owner.name }}Store);
    var {{ variable target.name }}ListResponse = await {{ className ../accessRelation.name }}Api(locator<ApiClient>()).{{ fqVariable relationType.owner.name }}GetRangeOf{{ className name }}ToUpdate{{ className ../relationType.name }}({{ variable ../relationType.target.name }}Request);
    return {{ variable target.name }}ListResponse.map<{{ fqClass target.name }}Store>(
      {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass target.name }}StoreFrom{{ fqClass target.name }}).toList();
  }
{{/ each }}
}

