//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}

part of {{ variable ap.name }}.repository;

class {{ fqClass ap.name }}RepositoryStoreMapper {

{{# each classes }}
  static {{ fqClass name }}Store create{{ fqClass name }}StoreFrom{{ fqClass name }}({{ fqClass name }} {{ variable name }}) {
    if ({{ variable name }} == null) {
      return null;
    }
    var {{ variable name }}Store = {{ fqClass name }}Store();
    map{{ fqClass name }}To{{ fqClass name }}Store({{ variable name }}, {{ variable name }}Store);
    return {{ variable name }}Store;
  }

  static void map{{ fqClass name }}To{{ fqClass name }}Store({{ fqClass name }} {{ variable name }}, {{ fqClass name }}Store {{ variable name }}Store) {
    // Identifier
    {{# if isMapped }}
    {{ variable name }}Store.internal__identifier = {{ variable name }}.internal__identifier;
    {{ variable name }}Store.internal__signedIdentifier = {{ variable name }}.internal__signedIdentifier;
    {{ variable name }}Store.internal__referenceIdentifier = {{ variable name }}.internal__referenceId;
    {{ variable name }}Store.internal__updatable = {{ variable name }}.internal__updatable;
    {{ variable name }}Store.internal__deletable = {{ variable name }}.internal__deletable;

    {{/ if }}
    // Attributes
    {{# each attributes }}
        {{# unless (isTransientAttribute this) }}
    {{ variable ../name }}Store.{{ name }} = {{ variable ../name }}.{{ name }};
        {{/ unless }}
    {{/ each }}
    // Relations
    {{# each relations }}
        {{# if isRelationEmbedded }}
    if ({{ variable ../name }}.{{ name }} != null) {
            {{# if isCollection }}
      {{ variable ../name }}Store.{{ name }}.addAll({{ variable ../name }}.{{ name }}.map<{{ fqClass target.name }}Store>(({{ variable target.name }}) {
        var {{ variable target.name }}Store = {{ fqClass target.name }}Store();
        map{{ fqClass target.name }}To{{ fqClass target.name }}Store({{ variable target.name }}, {{ variable target.name }}Store);
        return {{ variable target.name }}Store;
      }).toList());
            {{ else }}
      var {{ variable name }} = {{ fqClass target.name }}Store();
      map{{ fqClass target.name }}To{{ fqClass target.name }}Store({{ variable ../name }}.{{ name }}, {{ variable name }});
      {{ variable ../name }}Store.set{{ className name }}({{ variable name }});
            {{/ if }}
    }
        {{/ if }}
    {{/ each }}
  }

  static {{ fqClass name }} create{{ fqClass name }}From{{ fqClass name }}Store({{ fqClass name }}Store {{ variable name }}Store) {
    if ({{ variable name }}Store == null) {
      return null;
    }
    var {{ variable name }} = {{ fqClass name }}();
    map{{ fqClass name }}StoreTo{{ fqClass name }}({{ variable name }}Store, {{ variable name }});
    return {{ variable name }};
  }

  static void map{{ fqClass name }}StoreTo{{ fqClass name }}({{ fqClass name }}Store {{ variable name }}Store, {{ fqClass name }} {{ variable name }}) {
    {{# if isMapped }}
    {{ variable name }}.internal__identifier = {{ variable name }}Store.internal__identifier;
    {{ variable name }}.internal__signedIdentifier = {{ variable name }}Store.internal__signedIdentifier;
    {{ variable name }}.internal__referenceId = {{ variable name }}Store.internal__referenceIdentifier;

    {{/ if }}
    // Attributes
    {{# each attributes }}
        {{# unless isReadOnly }}
            {{# unless (isTransientAttribute this) }}
    {{ variable ../name }}.{{ name }} = {{ variable ../name }}Store.{{ name }};
            {{/ unless }}
        {{/ unless }}
    {{/ each }}
    // Relations
    {{# each relations }}
        {{# if isRelationEmbedded }}
            {{# unless isReadOnly }}
    if ({{ variable ../name }}Store.{{ name }} != null) {
                {{# if isCollection }}
      {{ variable ../name }}.{{ name }} = {{ variable ../name }}Store.{{ name }}.map<{{ fqClass target.name }}>(create{{ fqClass target.name }}From{{ fqClass target.name }}Store).toList();
                {{ else }}
      {{ variable ../name }}.{{ name }} = create{{ fqClass target.name }}From{{ fqClass target.name }}Store({{ variable ../name }}Store.{{ name }});
                {{/ if }}
    }
            {{/ unless }}
        {{/ if }}
    {{/ each }}

  }

  {{# unless isPrincipal}}
  {{# if isMapped}}
  static {{ fqClass name }}ForCreateAndUpdate create{{ fqClass name }}ForCreateAndUpdateFrom{{ fqClass name }}Store({{ fqClass name }}Store {{ variable name }}Store) {
    var {{ variable name }} = {{ fqClass name }}ForCreateAndUpdate();
    map{{ fqClass name }}StoreTo{{ fqClass name }}ForCreateAndUpdate({{ variable name }}Store, {{ variable name }});
    return {{ variable name }};
  }

  static void map{{ fqClass name }}StoreTo{{ fqClass name }}ForCreateAndUpdate({{ fqClass name }}Store {{ variable name }}Store, {{ fqClass name }}ForCreateAndUpdate {{ variable name }}) {
    // Identifier
    {{ variable name }}.internal__referenceId = {{ variable name }}Store.internal__referenceIdentifier;

    // Attributes
    {{# each attributes }}
        {{# unless isReadOnly }}
            {{# unless (isTransientAttribute this) }}
    {{ variable ../name }}.{{ name }} = {{ variable ../name }}Store.{{ name }};
            {{/ unless}}
        {{/ unless }}
    {{/ each }}
    // Relations
    {{# each relations }}
        {{# if isRelationEmbedded }}
            {{# unless isReadOnly }}
                {{# unless isMemberTypeTransient}}

    if ({{ variable ../name }}Store.{{ name }} != null) {
                {{# if isCollection }}
      {{ variable ../name }}.{{ name }} = {{ variable ../name }}Store.{{ name }}.map<{{ fqClass target.name }}ForCreateAndUpdate>(({{ variable target.name }}Store) {
        return create{{ fqClass target.name }}ForCreateAndUpdateFrom{{ fqClass target.name }}Store({{ variable target.name }}Store);
      }).toList();
                {{ else }}
      {{ variable ../name }}.{{ name }} = create{{ fqClass target.name }}ForCreateAndUpdateFrom{{ fqClass target.name }}Store({{ variable ../name }}Store.{{ name }});
                {{/ if }}
    }
                {{/ unless }}
            {{/ unless }}
        {{/ if }}
    {{/ each }}
  }
  {{/ if}}
  {{/ unless}}
{{/ each }}
}