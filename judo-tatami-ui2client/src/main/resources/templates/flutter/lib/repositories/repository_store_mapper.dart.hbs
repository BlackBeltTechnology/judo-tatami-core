//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}

part of {{ variable ap.name }}.repository;

class {{ fqClass ap.name }}RepositoryStoreMapper {

{{# each application.dataElements }}
  static {{ fqClass name }}Store create{{ fqClass name }}StoreFrom{{ fqClass name }}({{ fqClass name }} {{ variable name }}) {
    if ({{ variable name }} == null) {
      return null;
    }
    var {{ variable name }}Store = {{ fqClass name }}Store();
    map{{ fqClass name }}To{{ fqClass name }}Store({{ variable name }}, {{ variable name }}Store);
    return {{ variable name }}Store;
  }

  static void map{{ fqClass name }}To{{ fqClass name }}Store({{ fqClass name }} {{ variable name }}, {{ fqClass name }}Store {{ variable name }}Store) {
    // Identifier
    {{# if isMapped ~}}
    {{ variable name }}Store.identifier = {{ variable name }}.identifier;
    {{/ if }}
    // Attributes
    {{# each attributes ~}}
    {{ variable ../name }}Store.{{ name }} = {{ variable ../name }}.{{ name }};
    {{/ each }}
    // Relations
    {{# each relations ~}}
        {{# if isEmbedded ~}}
            {{# if isCollection ~}}
    {{ variable ../name }}Store.{{ name }}.addAll({{ variable ../name }}.{{ name }}.map<{{ fqClass target.name }}Store>(({{ variable target.name }}) {
      var {{ variable target.name }}Store = {{ fqClass target.name }}Store();
      map{{ fqClass target.name }}To{{ fqClass target.name }}Store({{ variable target.name }}, {{ variable target.name }}Store);
      return {{ variable target.name }}Store;
    }).toList());
            {{ else }}
      map{{ fqClass target.name }}To{{ fqClass target.name }}Store({{ variable ../name }}.{{ name }}, {{ variable ../name }}Store.{{ name }});
            {{/ if }}
        {{/ if }}
    {{/ each }}
  }

  static {{ fqClass name }} create{{ fqClass name }}From{{ fqClass name }}Store({{ fqClass name }}Store {{ variable name }}Store) {
    if ({{ variable name }}Store == null) {
      return null;
    }
    var {{ variable name }} = {{ fqClass name }}();
    map{{ fqClass name }}StoreTo{{ fqClass name }}({{ variable name }}Store, {{ variable name }});
    return {{ variable name }};
  }

  static void map{{ fqClass name }}StoreTo{{ fqClass name }}({{ fqClass name }}Store {{ variable name }}Store, {{ fqClass name }} {{ variable name }}) {
    {{# if isMapped ~}}
    {{ variable name }}.identifier = {{ variable name }}Store.identifier;
    {{/ if }}
    // Attributes
    {{# each attributes ~}}
        {{# unless isReadOnly ~}}
            {{ variable ../name }}.{{ name }} = {{ variable ../name }}Store.{{ name }};
        {{/ unless }}
    {{/ each }}
    // Relations
    {{# each relations ~}}
        {{# if isEmbedded ~}}
            {{# if isCollection ~}}
    {{ variable ../name }}Store.{{ name }}.addAll({{ variable ../name }}.{{ name }}.map<{{ fqClass target.name }}Store>(({{ variable target.name }}) {
      var {{ variable target.name }}Store = {{ fqClass target.name }}Store();
      create{{ fqClass target.name }}From{{ fqClass target.name }}Store({{ variable target.name }}Store);
      return {{ variable target.name }}Store;
    }).toList());
            {{ else }}
      create{{ fqClass target.name }}From{{ fqClass target.name }}Store({{ variable ../name }}Store.{{ name }});
            {{/ if }}
        {{/ if }}
    {{/ each }}

  }

  static {{ fqClass name }}Extended create{{ fqClass name }}ExtendedFrom{{ fqClass name }}Store({{ fqClass name }}Store {{ variable name }}Store) {
    var {{ variable name }} = {{ fqClass name }}Extended();
    map{{ fqClass name }}StoreTo{{ fqClass name }}Extended({{ variable name }}Store, {{ variable name }});
    return {{ variable name }};
  }

  static void map{{ fqClass name }}StoreTo{{ fqClass name }}Extended({{ fqClass name }}Store {{ variable name }}Store, {{ fqClass name }}Extended {{ variable name }}) {
    // Attributes
    {{# each attributes ~}}
        {{# unless isReadOnly ~}}
    {{ variable ../name }}.{{ name }} = {{ variable ../name }}Store.{{ name }};
        {{/ unless }}
    {{/ each }}
    // Relations
    {{# each relations ~}}
        {{# unless isReadOnly ~}}
            {{# if isCollection ~}}
    {{ variable ../name }}Store.{{ name }}.addAll({{ variable ../name }}Store.{{ name }}.map<{{ fqClass target.name }}Store>(({{ variable target.name }}Store) {
      var {{ variable target.name }} = {{ fqClass target.name }}Store();
      create{{ fqClass target.name }}ExtendedFrom{{ fqClass target.name }}Store({{ variable target.name }}Store);
      return {{ variable target.name }};
    }).toList());
            {{ else }}
      if ({{ variable ../name }}Store.{{ name }} != null) {
        create{{ fqClass target.name }}ExtendedFrom{{ fqClass target.name }}Store({{ variable ../name }}Store.{{ name }});
      }
            {{/ if }}
        {{/ unless }}
    {{/ each }}
  }

  /*
  // Relation
  {{# each relations ~}}
      {{# each behaviours ~}}
          {{ behaviour }} {{ fqClass ../../name }}.{{ variable ../name }} ({{ fqClass ../target.name }})  {{ fqClass sourceRelationType.target.name }}.{{ variable sourceRelationType.name }}
      {{/ each }}
  {{/ each }}
  */

{{/ each }}
}

/*

    // Relation
    GET NorthwindExternalAP.AllProducts (NorthwindServicesProductInfo)  NorthwindServicesProductInfo.allProducts
    CREATE NorthwindExternalAP.AllProducts (NorthwindServicesProductInfo)  NorthwindServicesProductInfo.allProducts
    UPDATE NorthwindExternalAP.AllProducts (NorthwindServicesProductInfo)  NorthwindServicesProductInfo.allProducts
    DELETE NorthwindExternalAP.AllProducts (NorthwindServicesProductInfo)  NorthwindServicesProductInfo.allProducts
    GET NorthwindExternalAP.AllCategories (NorthwindServicesCategoryInfo)  NorthwindServicesCategoryInfo.allCategories
    CREATE NorthwindExternalAP.AllCategories (NorthwindServicesCategoryInfo)  NorthwindServicesCategoryInfo.allCategories
    UPDATE NorthwindExternalAP.AllCategories (NorthwindServicesCategoryInfo)  NorthwindServicesCategoryInfo.allCategories
    DELETE NorthwindExternalAP.AllCategories (NorthwindServicesCategoryInfo)  NorthwindServicesCategoryInfo.allCategories



    // Relation
    RANGE NorthwindServicesProductInfo.Category (NorthwindServicesCategoryInfo)  NorthwindServicesProductInfo.allProducts
    RANGE NorthwindServicesProductInfo.Category (NorthwindServicesCategoryInfo)  NorthwindServicesProductInfo.products

    static NorthwindExternalAP SetProducts Of AllCategories Input Products

    create NorthwindExternalAP SetProducts Of AllCategories Input Products From NorthwindServicesProductInfoStore

    (NorthwindServicesProductInfoStore productInfoStore) {


    var setProductsOfAllCategoriesInputProducts = NorthwindExternalAPSetProductsOfAllCategoriesInputProducts();
  mapNorthwindServicesProductInfoStoreToNorthwindExternalAPSetProductsOfAllCategoriesInputProducts(productInfoStore, setProductsOfAllCategoriesInputProducts);
  return setProductsOfAllCategoriesInputProducts;
}

static void mapNorthwindServicesProductInfoStoreToNorthwindExternalAPSetProductsOfAllCategoriesInputProducts (NorthwindServicesProductInfoStore productInfoStore, NorthwindExternalAPSetProductsOfAllCategoriesInputProducts setProductsOfAllCategoriesInputProducts) {
  // Identifier
  setProductsOfAllCategoriesInputProducts.identifier = productInfoStore.identifier;
}

static NorthwindExternalAPAddProductsToAllCategoriesInput createNorthwindExternalAPAddProductsToAllCategoriesInputFromNorthwindServicesCategoryInfoStoreAndProductInfoStoreList(NorthwindServicesCategoryInfoStore categoryInfoStore, List<NorthwindServicesProductInfoStore> productInfoStoreList) {
  var productsToAllCategoriesInput = NorthwindExternalAPAddProductsToAllCategoriesInput();
  mapNorthwindServicesCategoryInfoStoreAndProductInfoStoreListToNorthwindExternalAPAddProductsToAllCategoriesInput(categoryInfoStore, productInfoStoreList, productsToAllCategoriesInput);
  return productsToAllCategoriesInput;
}

static void mapNorthwindServicesCategoryInfoStoreAndProductInfoStoreListToNorthwindExternalAPAddProductsToAllCategoriesInput(NorthwindServicesCategoryInfoStore categoryInfoStore, List<NorthwindServicesProductInfoStore> productInfoStoreList, NorthwindExternalAPAddProductsToAllCategoriesInput productsToAllCategoriesInput) {
  // Identifier
  productsToAllCategoriesInput.identifier = categoryInfoStore.identifier;
  // Attributes

  // Relations
  productsToAllCategoriesInput.products = [];
  productsToAllCategoriesInput.products.addAll(productInfoStoreList.map((e) => createNorthwindExternalAPSetProductsOfAllCategoriesInputProductsFromNorthwindServicesProductInfoStore(e)).toList());
}

static NorthwindExternalAPRemoveProductsFromAllCategoriesInput createNorthwindExternalAPRemoveProductsFromAllCategoriesInputFromNorthwindServicesCategoryInfoStoreAndProductInfoStoreList(NorthwindServicesCategoryInfoStore categoryInfoStore, List<NorthwindServicesProductInfoStore> productInfoStoreList) {
  var productsFromAllCategoriesInput = NorthwindExternalAPRemoveProductsFromAllCategoriesInput();
  mapNorthwindServicesCategoryInfoStoreAndProductInfoStoreListToNorthwindExternalAPRemoveProductsFromAllCategoriesInput(categoryInfoStore, productInfoStoreList, productsFromAllCategoriesInput);
  return productsFromAllCategoriesInput;
}

static void mapNorthwindServicesCategoryInfoStoreAndProductInfoStoreListToNorthwindExternalAPRemoveProductsFromAllCategoriesInput(NorthwindServicesCategoryInfoStore categoryInfoStore, List<NorthwindServicesProductInfoStore> productInfoStoreList, NorthwindExternalAPRemoveProductsFromAllCategoriesInput productsFromAllCategoriesInput) {
  // Identifier
  productsFromAllCategoriesInput.identifier = categoryInfoStore.identifier;
  // Attributes

  // Relations
  productsFromAllCategoriesInput.products = [];
  productsFromAllCategoriesInput.products.addAll(productInfoStoreList.map((e) => createNorthwindExternalAPSetProductsOfAllCategoriesInputProductsFromNorthwindServicesProductInfoStore(e)).toList());
}

static NorthwindServicesCategoryInfoSetCategoryOfProductsInput createNorthwindServicesCategoryInfoSetCategoryOfProductsInputFromNorthwindServicesProductInfoStoreAndCategoryInfoStore(NorthwindServicesProductInfoStore productInfoStore, NorthwindServicesCategoryInfoStore selectedCategoryInfoStore) {
  var categoryInfoSetCategoryOfProductsInput = NorthwindServicesCategoryInfoSetCategoryOfProductsInput();
  mapNorthwindServicesProductInfoStoreAndCategoryInfoStoreFromNorthwindServicesCategoryInfoSetCategoryOfProductsInput(productInfoStore, selectedCategoryInfoStore, categoryInfoSetCategoryOfProductsInput);
  return categoryInfoSetCategoryOfProductsInput;
}

static void mapNorthwindServicesProductInfoStoreAndCategoryInfoStoreFromNorthwindServicesCategoryInfoSetCategoryOfProductsInput(NorthwindServicesProductInfoStore productInfoStore, NorthwindServicesCategoryInfoStore selectedCategoryInfoStore, NorthwindServicesCategoryInfoSetCategoryOfProductsInput categoryInfoSetCategoryOfProductsInput) {
  // Identifier
  categoryInfoSetCategoryOfProductsInput.identifier = productInfoStore.identifier;
  // Attributes

  // Relations
  categoryInfoSetCategoryOfProductsInput.category = createNorthwindExternalAPSetCategoryOfAllProductsInputCategoryFromNorthwindServicesCategoryInfoStore(selectedCategoryInfoStore);
}

static NorthwindExternalAPSetCategoryOfAllProductsInputCategory createNorthwindExternalAPSetCategoryOfAllProductsInputCategoryFromNorthwindServicesCategoryInfoStore(NorthwindServicesCategoryInfoStore categoryInfoStore) {
  var setCategoryOfAllProductsInputCategory = NorthwindExternalAPSetCategoryOfAllProductsInputCategory();
  mapNorthwindServicesCategoryInfoStoreToNorthwindExternalAPSetCategoryOfAllProductsInputCategory(categoryInfoStore, setCategoryOfAllProductsInputCategory);
  return setCategoryOfAllProductsInputCategory;
}

static void mapNorthwindServicesCategoryInfoStoreToNorthwindExternalAPSetCategoryOfAllProductsInputCategory(NorthwindServicesCategoryInfoStore categoryInfoStore, NorthwindExternalAPSetCategoryOfAllProductsInputCategory setCategoryOfAllProductsInputCategory) {
  // Identifier
  setCategoryOfAllProductsInputCategory.identifier = categoryInfoStore.identifier;
}
*/
