import 'dart:async';

import 'package:openapi_dart_common/openapi.dart';
import 'package:{{ path application.name }}/utilities/constants.dart';
import 'package:{{ path application.name }}/rest/{{ path application.dataElement.name }}/lib/api.dart';

import 'package:{{ path application.name }}/store/{{ path application.dataElement.name }}/{{ path name }}_store.dart';
{{#each relations ~}}
import 'package:{{ path application.name }}/store/{{ path application.dataElement.name }}/{{ path target.name }}_store.dart';
{{/each}}


class {{ fqClass name }}Repository {
  final ApiClient _apiClient =
      ApiClient(basePath: kBasePathUrl, apiClientDelegate: DioClientDelegate());

  //////////////////////////////////////////////////////////////////////////////

  Future {{ fqClass name }}({{ fqClass name }}Store {{ fqVariable name }}Store) async {
    var {{ variable name }}Extended = {{ fqClass name }}Extended();

    {{#each attributes ~}}
    {{ variable ../name }}Extended.{{ variable name }} = {{ variable ../name }}Store.{{ variable name }};
    {{/each}}

    {{ fqClass name }} {{ fqVariable name }} = await AllProductsApi(_apiClient)
            .northwindServicesCategoryInfoCreateProducts(
                productInfoStore.category.identifier,
                northwindServicesProductInfoExtended);

    productInfoStore.identifier = northwindServicesProductInfo.identifier;
    productInfoStore.weight = northwindServicesProductInfo.weight;
    productInfoStore.unitPrice = northwindServicesProductInfo.unitPrice;
    productInfoStore.productName = northwindServicesProductInfo.productName;
  }

  //////////////////////////////////////////////////////////////////////////////

  Future removeNorthwindExternalAPProductInfo(
      NorthwindExternalAPProductInfoStore productInfoStore) async {
    var northwindIdentifier = NorthwindIdentifier();
    northwindIdentifier.identifier = productInfoStore.identifier;

    await DefaultApi(_apiClient)
        .northwindExternalAPDeleteAllProducts(northwindIdentifier);
  }

  //////////////////////////////////////////////////////////////////////////////

  Future updateNorthwindExternalAPProductInfo(
      NorthwindExternalAPProductInfoStore productInfoStore) async {
    var northwindServicesProductInfo = NorthwindServicesProductInfo();

    northwindServicesProductInfo.identifier = productInfoStore.identifier;
    northwindServicesProductInfo.productName = productInfoStore.productName;
    northwindServicesProductInfo.unitPrice = productInfoStore.unitPrice;
    northwindServicesProductInfo.weight = productInfoStore.weight;

    northwindServicesProductInfo = await DefaultApi(_apiClient)
        .northwindExternalAPUpdateAllProducts(northwindServicesProductInfo);

    productInfoStore.identifier = northwindServicesProductInfo.identifier;
    productInfoStore.productName = northwindServicesProductInfo.productName;
    productInfoStore.unitPrice = northwindServicesProductInfo.unitPrice;
    productInfoStore.weight = northwindServicesProductInfo.weight;
  }

  //////////////////////////////////////////////////////////////////////////////

  Future<NorthwindExternalAPCategoryInfoStore> getProduct() async {}

  //////////////////////////////////////////////////////////////////////////////

  Future getAllNorthwindExternalAPProductInfo(
      List<NorthwindExternalAPProductInfoStore> productInfoStoreList) async {
    List<NorthwindServicesProductInfo> list =
        await DefaultApi(_apiClient).northwindExternalAPGetAllProducts();

    List<NorthwindExternalAPProductInfoStore> tempProductList = [];

    list.forEach((element) async {
      if (!productInfoStoreList
          .any((product) => product.identifier == element.identifier)) {
        NorthwindExternalAPProductInfoStore newProduct =
            NorthwindExternalAPProductInfoStore();
        newProduct.identifier = element.identifier;
        newProduct.productName = element.productName;
        newProduct.unitPrice = element.unitPrice;
        newProduct.weight = element.weight;
        tempProductList.add(newProduct);

        NorthwindServicesCategoryInfo northwindServicesCategoryInfo =
            await AllCategoriesApi(_apiClient)
                .northwindServicesProductInfoGetCategory(element.identifier);

        newProduct.category = NorthwindExternalAPCategoryInfoStore();
        newProduct.category.identifier =
            northwindServicesCategoryInfo.identifier;

        newProduct.category.categoryName =
            northwindServicesCategoryInfo.categoryName;
      }
    });

    productInfoStoreList.addAll(tempProductList);
  }
}
