//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}
//
//   Relation: {{ relation.name }}
//   Relation owner: {{ relation.owner.name }}
//   Relation target: {{ relation.target.name }}
//   Access: {{ relation.owner.root }}
//
//    Relation: {{ relation.owner.name }}.{{ variable relation.name }} ({{ relation.target.name }}) behaviours: {{# each relation.behaviours }} {{{ . }}} {{/ each }}
//    TransferObject: {{ relation.target.name }} behaviours: {{# each relation.target.behaviours }} {{{ . }}} {{/ each }}

part of {{ variable ap.name }}.repository;

class {{ fqClass relation.owner.name }}{{ fqClass relation.name }}Repository {


  {{# if relation.listable }}

      {{# if relation.isCollection }}
          {{# if relation.owner.root }}
  //////////////////////////////////////////////////////////////////////////////
  // GET Collection (Access)
  //////////////////////////////////////////////////////////////////////////////
  Future<List<{{ fqClass relation.target.name }}Store>> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}List() async {
    List<{{ fqClass relation.target.name }}> {{ variable relation.target.name }}ListResponse = await DefaultApi(locator<ApiClient>()).{{ fqVariable relation.owner.name }}Get{{ className relation.name }}({{ modelName relation.target.name }}Extension{{ fqClassWithoutModel relation.target.name}}QueryCustomizer());
    return {{ variable relation.target.name }}ListResponse.map<{{ fqClass relation.target.name }}Store>(
      {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.target.name }}StoreFrom{{ fqClass relation.target.name }}).toList();
  }
          {{ else }}
  //////////////////////////////////////////////////////////////////////////////
  // GET Collection
  //////////////////////////////////////////////////////////////////////////////
  Future<List<{{ fqClass relation.target.name }}Store>> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}List({{ fqClass relation.owner.name }}Store owner) async {
    List<{{ fqClass relation.target.name }}> {{ variable relation.target.name }}ListResponse = await DefaultApi(locator<ApiClient>()).{{ fqVariable owner.name }}Get{{ className relation.name }}(owner.signedIdentifier, {{ modelName relation.target.name }}Extension{{ fqClassWithoutModel relation.target.name}}QueryCustomizer());
    return {{ variable relation.target.name }}ListResponse.map<{{ fqClass relation.target.name }}Store>(
      {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.target.name }}StoreFrom{{ fqClass relation.target.name }}).toList();
  }
          {{/ if }}
      {{ else }}
          {{# if relation.owner.root }}
  //////////////////////////////////////////////////////////////////////////////
  // GET SINGLE (Access)
  //////////////////////////////////////////////////////////////////////////////
  Future<{{ fqClass relation.target.name }}Store> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Get() async {
    {{ fqClass relation.target.name }} {{ variable relation.target.name }}Response = await DefaultApi(locator<ApiClient>()).{{ fqVariable relation.owner.name }}Get{{ className relation.name }}({{ modelName relation.target.name }}Extension{{ fqClassWithoutModel relation.target.name}}QueryCustomizer());
    return {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.target.name }}StoreFrom{{ fqClass relation.target.name }}({{ variable relation.target.name }}Response);
  }
          {{ else }}
  //////////////////////////////////////////////////////////////////////////////
  // GET SINGLE
  //////////////////////////////////////////////////////////////////////////////
  Future<{{ fqClass relation.target.name }}Store> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Get({{ fqClass relation.owner.name }}Store owner) async {
    {{ fqClass relation.target.name }} {{ variable relation.target.name }}Response = await DefaultApi(locator<ApiClient>()).{{ fqVariable owner.name }}Get{{ className relation.name }}(owner.signedIdentifier, {{ modelName relation.target.name }}Extension{{ fqClassWithoutModel relation.target.name}}QueryCustomizer());
    return {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.target.name }}StoreFrom{{ fqClass relation.target.name }}({{ variable relation.target.name }}Response);
  }
          {{/ if }}
      {{/ if }}
  {{/ if }}
  {{# if relation.creatable }}
      {{# if relation.owner.root }}
  //////////////////////////////////////////////////////////////////////////////
  // CREATE (Access)
  //////////////////////////////////////////////////////////////////////////////
  Future<{{ fqClass relation.target.name }}Store> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Create({{ fqClass relation.target.name }}Store target) async {
    {{ fqClass relation.target.name }}Extended {{ variable relation.target.name }}ExtendedRequest = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.target.name }}ExtendedFrom{{ fqClass relation.target.name }}Store(target);
    {{ fqClass relation.target.name }} {{ variable relation.target.name }}Response = await DefaultApi(locator<ApiClient>()).{{ fqVariable relation.owner.name }}Create{{ className relation.name }}({{ variable relation.target.name }}ExtendedRequest);
    return {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.target.name }}StoreFrom{{ fqClass relation.target.name }}({{ variable relation.target.name }}Response);
  }
      {{ else }}
  //////////////////////////////////////////////////////////////////////////////
  // CREATE
  //////////////////////////////////////////////////////////////////////////////
  Future<{{ fqClass relation.target.name }}Store> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Create({{ fqClass relation.owner.name }}Store owner, {{ fqClass relation.target.name }}Store target) async {
    {{ fqClass relation.target.name }}Extended {{ variable relation.target.name }}ExtendedRequest = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.target.name }}ExtendedFrom{{ fqClass relation.target.name }}Store(target);
    {{ fqClass relation.target.name }} {{ variable relation.target.name }}Response = await DefaultApi(locator<ApiClient>()).{{ fqVariable owner.name }}Create{{ className relation.name }}(owner.signedIdentifier, {{ variable relation.target.name }}ExtendedRequest);
    return {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.target.name }}StoreFrom{{ fqClass relation.target.name }}({{ variable relation.target.name }}Response);
  }
      {{/ if }}
  {{/ if }}
  {{# if relation.target.deletable }}
      {{# if relation.owner.root }}
  //////////////////////////////////////////////////////////////////////////////
  // DELETE (Access)
  //////////////////////////////////////////////////////////////////////////////
  Future<void> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Delete({{ fqClass relation.target.name }}Store target) async {
    var {{ variable relation.target.name }}Request = {{ modelName application.name }}Identifier();
    {{ variable relation.target.name }}Request.signedIdentifier = target.signedIdentifier;
    await DefaultApi(locator<ApiClient>()).{{ fqVariable relation.owner.name }}Delete{{ className relation.name }}({{ variable relation.target.name }}Request);
  }
      {{ else }}
  //////////////////////////////////////////////////////////////////////////////
  // DELETE
  //////////////////////////////////////////////////////////////////////////////
  Future<void> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Delete({{ fqClass relation.owner.name }}Store owner,  {{ fqClass relation.target.name }}Store target) async {
    var {{ variable relation.target.name }}Request = {{ modelName application.name }}Identifier();
    {{ variable relation.target.name }}Request.signedIdentifier = target.signedIdentifier;
    await DefaultApi(locator<ApiClient>()).{{ fqVariable owner.name }}Delete{{ className relation.name }}(owner.signedIdentifier, {{ variable relation.target.name }}Request);
  }
      {{/ if }}
  {{/ if }}
  {{# if relation.target.updatable }}
      {{# if relation.owner.root }}
  //////////////////////////////////////////////////////////////////////////////
  // UPDATE  (Access)
  //////////////////////////////////////////////////////////////////////////////
    Future<{{ fqClass relation.target.name }}Store> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Update({{ fqClass relation.target.name }}Store target) async {
    {{ fqClass relation.target.name }} {{ variable relation.target.name }}Request = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.target.name }}From{{ fqClass relation.target.name }}Store(target);
    {{ fqClass relation.target.name }} {{ variable relation.target.name }}Response = await DefaultApi(locator<ApiClient>()).{{ fqVariable relation.owner.name }}Update{{ className relation.name }}({{ variable relation.target.name }}Request);
    return {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.target.name }}StoreFrom{{ fqClass relation.target.name }}({{ variable relation.target.name }}Response);
  }
      {{ else }}
  //////////////////////////////////////////////////////////////////////////////
  // UPDATE
  //////////////////////////////////////////////////////////////////////////////
  Future<{{ fqClass relation.target.name }}Store> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Update({{ fqClass relation.owner.name }}Store owner, {{ fqClass relation.target.name }}Store target) async {
    {{ fqClass relation.target.name }} {{ variable relation.target.name }}Request = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.target.name }}From{{ fqClass relation.target.name }}Store(target);
    {{ fqClass relation.target.name }} {{ variable relation.target.name }}Response = await DefaultApi(locator<ApiClient>()).{{ fqVariable owner.name }}Update{{ className relation.name }}(owner.signedIdentifier, {{ variable relation.target.name }}Request);
    return {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.target.name }}StoreFrom{{ fqClass relation.target.name }}({{ variable relation.target.name }}Response);
  }
      {{/ if }}
  {{/ if }}

/*
  {{# each relation.target.relations as |targetRelation| }}
      {{# if targetRelation.rangeable }}
  //////////////////////////////////////////////////////////////////////////////
  // GET CREATE RANGE FOR {{ variable targetRelation.name }}
  // !!! DEPRECATED !!!
  //////////////////////////////////////////////////////////////////////////////
  Future<List<{{ fqClass targetRelation.target.name }}Store>> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}RangeOf{{ fqClass targetRelation.name }}ToCreate({{ fqClass relation.target.name }}Store target) async {
    {{ fqClass relation.target.name }} {{ variable relation.target.name }}Request = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.target.name }}From{{ fqClass relation.target.name }}Store(target);
    List<{{ fqClass targetRelation.target.name }}> {{ variable targetRelation.target.name}}ListResponse = await DefaultApi(locator<ApiClient>()).{{ fqVariable relation.owner.name }}GetRangeOf{{ fqClass targetRelation.name }}ToCreate{{ fqClass relation.name }}({{ variable relation.target.name }}Request);
    return {{ variable targetRelation.target.name }}ListResponse.map<{{ fqClass targetRelation.target.name }}Store>(
      {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass targetRelation.target.name }}StoreFrom{{ fqClass targetRelation.target.name }}).toList();
  }

  //////////////////////////////////////////////////////////////////////////////
  // GET UPDATE RANGE FOR {{ variable targetRelation.name }}
  // !!! DEPRECATED !!!
  //////////////////////////////////////////////////////////////////////////////
  Future<List<{{ fqClass targetRelation.target.name }}Store>> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}RangeOf{{ fqClass targetRelation.name }}ToUpdate({{ fqClass relation.target.name }}Store target) async {
    {{ fqClass relation.target.name }} {{ variable relation.target.name }}Request = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.target.name }}From{{ fqClass relation.target.name }}Store(target);
    List<{{ fqClass targetRelation.target.name }}> {{ variable targetRelation.target.name}}ListResponse = await DefaultApi(locator<ApiClient>()).{{ fqVariable relation.owner.name }}GetRangeOf{{ fqClass targetRelation.name }}ToUpdate{{ fqClass relation.name }}({{ variable relation.target.name }}Request);
    return {{ variable targetRelation.target.name }}ListResponse.map<{{ fqClass targetRelation.target.name }}Store>(
      {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass targetRelation.target.name }}StoreFrom{{ fqClass targetRelation.target.name }}).toList();
  }
      {{/ if }}
      {{# if targetRelation.setable }}
          {{# if relation.owner.root }}
  //////////////////////////////////////////////////////////////////////////////
  // SET {{ variable targetRelation.name }} (Access)
  // !!! DEPRECATED !!!
  //////////////////////////////////////////////////////////////////////////////
  Future<void> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Set{{ fqClass targetRelation.name }}({{ fqClass relation.target.name }}Store target, {{ fqClass targetRelation.target.name }}Store selected) async {
    {{ fqClass relation.owner.name }}Set{{ fqClass targetRelation.name }}Of{{ fqClass relation.name }}Input request = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.owner.name }}Set{{ fqClass targetRelation.name }}Of{{ fqClass relation.name }}InputFrom{{ fqClass relation.target.name }}StoreAnd{{ fqClass targetRelation.target.name }}Store(target, selected);
    await DefaultApi(locator<ApiClient>()).{{ fqVariable relation.owner.name }}Set{{ className targetRelation.name }}Of{{ fqClass relation.name }}(request);
  }
          {{ else }}
  //////////////////////////////////////////////////////////////////////////////
  // SET {{ variable targetRelation.name }}
  // !!! DEPRECATED !!!
  //////////////////////////////////////////////////////////////////////////////
  Future<void> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Set{{ fqClass targetRelation.name }}({{ fqClass relation.owner.name }}Store owner, {{ fqClass relation.target.name }}Store target, {{ fqClass targetRelation.target.name }}Store selected) async {
    {{ fqClass relation.owner.name }}Set{{ fqClass targetRelation.name }}Of{{ fqClass relation.name }}Input request = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.owner.name }}Set{{ fqClass targetRelation.name }}Of{{ fqClass relation.name }}InputFrom{{ fqClass relation.target.name }}StoreAnd{{ fqClass targetRelation.target.name }}Store(target, selected);
    await DefaultApi(locator<ApiClient>()).{{ fqVariable relation.owner.name }}Set{{ className targetRelation.name }}Of{{ fqClass relation.name }}(owner.signedIdentifier, request);
  }
          {{/ if }}
      {{/ if }}
      {{# if targetRelation.unsetable }}
          {{# if relation.owner.root }}
  //////////////////////////////////////////////////////////////////////////////
  // UNSET {{ variable targetRelation.name }} (Access)
  // !!! DEPRECATED !!!
  //////////////////////////////////////////////////////////////////////////////
  Future<void> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Unset{{ fqClass targetRelation.name }}({{ fqClass relation.target.name }}Store target) async {
    var request = NorthwindIdentifier();
    request.signedIdentifier = target.signedIdentifier;
    await DefaultApi(locator<ApiClient>()).{{ fqVariable relation.owner.name }}Unset{{ className targetRelation.name }}Of{{ fqClass relation.name }}(request);
  }
          {{ else }}
  //////////////////////////////////////////////////////////////////////////////
  // UNSET {{ variable targetRelation.name }}
  // !!! DEPRECATED !!!
  //////////////////////////////////////////////////////////////////////////////
  Future<void> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Unset{{ fqClass targetRelation.name }}({{ fqClass relation.owner.name }}Store owner, {{ fqClass relation.target.name }}Store target) async {
    var request = NorthwindIdentifier();
    request.signedIdentifier = target.signedIdentifier;
    await DefaultApi(locator<ApiClient>()).{{ fqVariable relation.owner.name }}Unset{{ className targetRelation.name }}Of{{ fqClass relation.name }}(owner.signedIdentifier, request);
  }
          {{/ if }}
      {{/ if }}
      {{# if targetRelation.addable }}
          {{# if relation.owner.root }}
  //////////////////////////////////////////////////////////////////////////////
  // ADD {{ variable targetRelation.name }} (Access)
  // !!! DEPRECATED !!!
  //////////////////////////////////////////////////////////////////////////////
  Future<void> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Add{{ fqClass targetRelation.name }}({{ fqClass relation.target.name }}Store target, List<{{ fqClass targetRelation.target.name }}Store> selected) async {
    var request = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.owner.name }}Add{{ fqClass targetRelation.name }}To{{ fqClass relation.name }}InputFrom{{ fqClass relation.target.name }}StoreAnd{{ fqClass targetRelation.target.name }}StoreList(target, selected);
    await DefaultApi(locator<ApiClient>()).{{ fqVariable relation.owner.name }}Add{{ className targetRelation.name }}To{{ fqClass relation.name }}(request);
  }
          {{ else }}
  //////////////////////////////////////////////////////////////////////////////
  // ADD {{ variable targetRelation.name }}
  // !!! DEPRECATED !!!
  //////////////////////////////////////////////////////////////////////////////
  Future<void> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Add{{ fqClass targetRelation.name }}({{ fqClass relation.owner.name }}Store owner, {{ fqClass relation.target.name }}Store target, List<{{ fqClass targetRelation.target.name }}Store> selected) async {
    var request = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.owner.name }}Add{{ fqClass targetRelation.name }}To{{ fqClass relation.name }}InputFrom{{ fqClass relation.target.name }}StoreAnd{{ fqClass targetRelation.target.name }}StoreList(target, selected);
    await DefaultApi(locator<ApiClient>()).{{ fqVariable relation.owner.name }}Add{{ className targetRelation.name }}To{{ fqClass relation.name }}(owner.signedIdentifier, request);
  }
          {{/ if }}

      {{/ if }}
      {{# if targetRelation.removable }}
          {{# if relation.owner.root }}
  //////////////////////////////////////////////////////////////////////////////
  // REMOVE {{ variable targetRelation.name }} (Access)
  // !!! DEPRECATED !!!
  //////////////////////////////////////////////////////////////////////////////
  Future<void> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Remove{{ fqClass targetRelation.name }}({{ fqClass relation.target.name }}Store target, List<{{ fqClass targetRelation.target.name }}Store> selected) async {
    var request = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.owner.name }}Remove{{ fqClass targetRelation.name }}From{{ fqClass relation.name }}InputFrom{{ fqClass relation.target.name }}StoreAnd{{ fqClass targetRelation.target.name }}StoreList(target, selected);
    await DefaultApi(locator<ApiClient>()).{{ fqVariable relation.owner.name }}Remove{{ className targetRelation.name }}From{{ fqClass relation.name }}(request);
  }
          {{ else }}
  //////////////////////////////////////////////////////////////////////////////
  // REMOVE {{ variable targetRelation.name }}
  // !!! DEPRECATED !!!
  //////////////////////////////////////////////////////////////////////////////
  Future<void> {{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Remove{{ fqClass targetRelation.name }}({{ fqClass relation.owner.name }}Store owner, {{ fqClass relation.target.name }}Store target, List<{{ fqClass targetRelation.target.name }}Store> selected) async {
    var request = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.owner.name }}Remove{{ fqClass targetRelation.name }}From{{ fqClass relation.name }}InputFrom{{ fqClass relation.target.name }}StoreAnd{{ fqClass targetRelation.target.name }}StoreList(target, selected);
    await DefaultApi(locator<ApiClient>()).{{ fqVariable relation.owner.name }}Remove{{ className targetRelation.name }}From{{ fqClass relation.name }}(owner.signedIdentifier, request);
  }
          {{/ if }}
      {{/ if }}

  {{/ each }}
*/
}
