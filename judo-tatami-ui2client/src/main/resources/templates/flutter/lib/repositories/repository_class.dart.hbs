//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}
//
//   Class: {{ class.name }} behaviours: {{# each class.behaviours }} {{{ . }}} {{/ each }}

part of {{ variable ap.name }}.repository;

class {{ fqClass class.name }}Repository {

  {{# if class.isClassBehaviourTypeDeletable }}
  //////////////////////////////////////////////////////////////////////////////
  // DELETE
  //////////////////////////////////////////////////////////////////////////////
  Future<void> {{ fqVariable class.name }}Delete({{ fqClass class.name }}Store target) async {
    return await DefaultApi(locator<ApiClient>()).{{ fqVariable class.name }}DeleteInstance{{ fqClass name }}(target.signedIdentifier);
  }
  {{/ if }}
  {{# if class.isClassBehaviourTypeUpdatable }}
  //////////////////////////////////////////////////////////////////////////////
  // UPDATE
  //////////////////////////////////////////////////////////////////////////////
  Future<{{ fqClass class.name }}Store> {{ fqVariable class.name }}Update({{ fqClass class.name }}Store target) async {
    {{ fqClass class.name }} {{ variable class.name }}Request = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass class.name }}From{{ fqClass class.name }}Store(target);
    {{ fqClass class.name }} {{ variable class.name }}Response = await DefaultApi(locator<ApiClient>()).{{ fqVariable class.name }}UpdateInstance{{ fqClass name }}(target.signedIdentifier, {{ variable class.name }}Request);
    return {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass class.name }}StoreFrom{{ fqClass class.name }}({{ variable class.name }}Response);
  }
  {{/ if }}

  {{# each class.relations as |relation| }}
      {{# if relation.isRelationBehaviourTypeRangeable }}
  //////////////////////////////////////////////////////////////////////////////
  // GET CREATE RANGE FOR {{ variable relation.name }}
  //////////////////////////////////////////////////////////////////////////////
  Future<List<{{ fqClass relation.target.name }}Store>> {{ fqVariable class.name }}RangeOf{{ fqClass relation.name }}ToCreate({{ fqClass class.name }}Store target) async {
    {{ fqClass class.name }} {{ variable class.name }}Request = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass class.name }}From{{ fqClass class.name }}Store(target);
    List<{{ fqClass relation.target.name }}> {{ variable relation.target.name }}ListResponse = await DefaultApi(locator<ApiClient>()).{{ fqVariable class.name }}GetRangeReference{{ fqClass relation.name }}(input: {{ variable class.name }}Request);
    return {{ variable relation.target.name }}ListResponse.map<{{ fqClass relation.target.name }}Store>(
      {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.target.name }}StoreFrom{{ fqClass relation.target.name }}).toList();
  }

  //////////////////////////////////////////////////////////////////////////////
  // GET UPDATE RANGE FOR {{ variable relation.name }}
  //////////////////////////////////////////////////////////////////////////////
  Future<List<{{ fqClass relation.target.name }}Store>> {{ fqVariable class.name }}RangeOf{{ fqClass relation.name }}ToUpdate({{ fqClass class.name }}Store target) async {
    {{ fqClass class.name }} {{ variable class.name }}Request = {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass class.name }}From{{ fqClass class.name }}Store(target);
    List<{{ fqClass relation.target.name }}> {{ variable relation.target.name }}ListResponse = await DefaultApi(locator<ApiClient>()).{{ fqVariable class.name }}GetRangeReference{{ fqClass relation.name }}(input: {{ variable class.name }}Request);
    return {{ variable relation.target.name }}ListResponse.map<{{ fqClass relation.target.name }}Store>(
      {{ fqClass ap.name }}RepositoryStoreMapper.create{{ fqClass relation.target.name }}StoreFrom{{ fqClass relation.target.name }}).toList();
  }
      {{/ if }}
      {{# if relation.isRelationBehaviourTypeSetable }}
        {{# if relation.isCollection }}
  //////////////////////////////////////////////////////////////////////////////
  // SET {{ variable relation.name }} (Collection)
  //////////////////////////////////////////////////////////////////////////////
  Future<void> {{ fqVariable class.name }}Set{{ fqClass relation.name }}({{ fqClass class.name }}Store target, List<{{ fqClass relation.target.name }}Store> selected) async {
    List<SingleReference> itemsToSet = selected.map<SingleReference>((s) => SingleReference().copyWith(signedIdentifier: s.signedIdentifier)).toList();
    return await DefaultApi(locator<ApiClient>()).{{ fqVariable class.name }}SetReference{{ className relation.name }}(target.signedIdentifier, input: itemsToSet);
  }
        {{ else }}
  //////////////////////////////////////////////////////////////////////////////
  // SET {{ variable relation.name }} (Single)
  //////////////////////////////////////////////////////////////////////////////
  Future<void> {{ fqVariable class.name }}Set{{ fqClass relation.name }}({{ fqClass class.name }}Store target, {{ fqClass relation.target.name }}Store selected) async {
    return await DefaultApi(locator<ApiClient>()).{{ fqVariable class.name }}SetReference{{ className relation.name }}(target.signedIdentifier, SingleReference().copyWith(signedIdentifier: selected.signedIdentifier));
  }
        {{/ if }}
      {{/ if }}
      {{# if relation.isRelationBehaviourTypeUnsetable }}
  //////////////////////////////////////////////////////////////////////////////
  // UNSET {{ variable relation.name }}
  //////////////////////////////////////////////////////////////////////////////
  Future<void> {{ fqVariable class.name }}Unset{{ fqClass relation.name }}({{ fqClass class.name }}Store target) async {
    return await DefaultApi(locator<ApiClient>()).{{ fqVariable class.name }}UnsetReference{{ className relation.name }}(target.signedIdentifier);
  }
      {{/ if }}
      {{# if relation.isRelationBehaviourTypeAddable }}
  //////////////////////////////////////////////////////////////////////////////
  // ADD {{ variable relation.name }}
  //////////////////////////////////////////////////////////////////////////////
  Future<void> {{ fqVariable class.name }}Add{{ fqClass relation.name }}({{ fqClass class.name }}Store target, List<{{ fqClass relation.target.name }}Store> selected) async {
    List<SingleReference> itemsToAdd = selected.map<SingleReference>((s) => SingleReference().copyWith(signedIdentifier: s.signedIdentifier)).toList();
    return await DefaultApi(locator<ApiClient>()).{{ fqVariable class.name }}AddReference{{ className relation.name }}(target.signedIdentifier, itemsToAdd);
  }
      {{/ if }}
      {{# if relation.isRelationBehaviourTypeRemovable }}
  //////////////////////////////////////////////////////////////////////////////
  // REMOVE {{ variable relation.name }}
  //////////////////////////////////////////////////////////////////////////////
  Future<void> {{ fqVariable class.name }}Remove{{ fqClass relation.name }}({{ fqClass class.name }}Store target, List<{{ fqClass relation.target.name }}Store> selected) async {
    List<SingleReference> itemsToRemove = selected.map<SingleReference>((s) => SingleReference().copyWith(signedIdentifier: s.signedIdentifier)).toList();
    return await DefaultApi(locator<ApiClient>()).{{ fqVariable class.name }}RemoveReference{{ className relation.name }}(target.signedIdentifier, itemsToRemove);
  }
      {{/ if }}
  {{/ each }}
}
