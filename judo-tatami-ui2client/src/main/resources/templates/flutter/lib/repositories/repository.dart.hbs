//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
//   Application : {{ application.name }}
//   Root: {{ root.name }}
//   Owner: {{ classType.name }}
//   Relation: {{ relationType.name }}
//   Relation target: {{ relationType.target.name }}

part of {{ variable application.dataElement.name }}.repository;

class {{ fqClass application.dataElement.name }}{{ className root.name }}{{ className relationType.name }}Repository {
  final ApiClient _apiClient = ApiClient(basePath: kBasePathUrl, apiClientDelegate: DioClientDelegate());

  {{# if relationType.isCollection ~}}
  //////////////////////////////////////////////////////////////////////////////
  // GET Collection
  //////////////////////////////////////////////////////////////////////////////
  Future get{{ className relationType.name }}({{ fqClass classType.name }}Store {{ variable relationType.name }}{{ className classType.name }}Store, List<{{ fqClass relationType.target.name }}Store> {{ variable relationType.target.name }}StoreList) async {

    // Call Server
    List<{{ fqClass relationType.target.name }}> {{ variable relationType.target.name }}ResponseList = await {{ className root.name }}Api(_apiClient).{{ fqVariable classType.name }}Get{{ className relationType.name }}({{ variable relationType.name }}{{ className classType.name }}Store.identifier);

    // Response mapping
    {{ variable relationType.target.name }}StoreList.addAll({{ variable relationType.target.name }}ResponseList.map<{{ fqClass relationType.target.name }}Store>(({{ variable relationType.target.name }}Response) {
      // Response mapping
      var {{ variable relationType.target.name }}Store = {{ fqClass relationType.target.name }}Store();

      // Attributes
      {{ variable relationType.target.name}}Store.identifier = {{ variable relationType.target.name }}Response.identifier;
      {{# each relationType.target.attributes ~}}
      {{ variable ../relationType.target.name}}Store.{{ name }} = {{ variable ../relationType.target.name }}Response.{{ name }};
      {{/ each }}

      return {{ variable relationType.target.name }}Store;
    }).toList());
  }

  //////////////////////////////////////////////////////////////////////////////
  // GET One
  //////////////////////////////////////////////////////////////////////////////
  Future get{{ className relationType.name }}ById({{ fqClass classType.name }}Store {{ variable relationType.name }}{{ className classType.name }}Store, String identifier, List<{{ fqClass relationType.target.name }}Store> {{ variable relationType.target.name }}StoreList,  {{ fqClass relationType.target.name }}Store {{ variable relationType.target.name }}Store) {
    // Check the store. If it is empty, loading it and selecting element
    if ({{ variable relationType.target.name }}StoreList == null || {{ variable relationType.target.name }}StoreList.length == 0) {
      get{{ className relationType.name }}({{ variable relationType.name }}{{ className classType.name }}Store, {{ variable relationType.target.name }}StoreList);
    }
    {{ variable relationType.target.name }}Store = {{ variable relationType.target.name }}StoreList.firstWhere((element) => element.identifier == identifier);
  }

  {{ else }}
  //////////////////////////////////////////////////////////////////////////////
  // GET Single
  //////////////////////////////////////////////////////////////////////////////
  Future get{{ className relationType.name }}({{ fqClass classType.name }}Store {{ variable relationType.name }}{{ className classType.name }}Store, {{ fqClass relationType.target.name }}Store {{ variable relationType.target.name }}Store) async {

    // Call Server
    {{ fqClass relationType.target.name }} {{ variable relationType.target.name }}Response = await {{ className root.name }}Api(_apiClient).{{ fqVariable classType.name }}Get{{ className relationType.name }}({{ variable relationType.name }}{{ className classType.name }}Store.identifier);

    // Response mapping

    // Attributes
    {{ variable relationType.target.name}}Store.identifier = {{ variable relationType.target.name }}Response.identifier;
    {{# each relationType.target.attributes ~}}
    {{ variable ../relationType.target.name}}Store.{{ name }} = {{ variable ../relationType.target.name }}Response.{{ name }};
    {{/ each }}
  }
  {{/ if}}

  //////////////////////////////////////////////////////////////////////////////
  // CREATE
  //////////////////////////////////////////////////////////////////////////////
  Future create{{ className relationType.name }}({{ fqClass classType.name }}Store {{ variable relationType.name }}{{ className classType.name }}Store,  {{ fqClass relationType.target.name }}Store {{ variable relationType.target.name }}Store) async {

    // Request mapping
    var {{ variable relationType.target.name }}ExtendedRequest = {{ fqClass relationType.target.name }}Extended();

    // Attributes
    {{# each relationType.target.attributes ~}}
    {{ variable ../relationType.target.name}}ExtendedRequest.{{ name }} = {{ variable ../relationType.target.name }}Store.{{ name }};
    {{/ each }}

    // Single association
    {{# each relationType.target.relations ~}}
    {{# unless isCollection ~}}
    {{ variable ../relationType.target.name }}ExtendedRequest.{{ variable name }} = {{ fqClass relationType.target.name }}Extended{{ className name }}();
    {{ variable ../relationType.target.name }}ExtendedRequest.{{ variable name }}.identifier = {{ variable ../relationType.target.name }}Store.{{ variable name }}.identifier;
    {{/ unless }}
    {{/ each }}

    // Call Server
    var {{ variable relationType.target.name }}Response = await {{ className root.name }}Api(_apiClient).{{ fqVariable classType.name }}Create{{ className relationType.name }}({{ variable relationType.name }}{{ className classType.name }}Store.identifier, {{ variable relationType.target.name }}ExtendedRequest);

    // Response mapping

    // Attributes
    {{ variable relationType.target.name}}Store.identifier = {{ variable relationType.target.name }}Response.identifier;
    {{# each relationType.target.attributes ~}}
    {{ variable ../relationType.target.name}}Store.{{ name }} = {{ variable ../relationType.target.name }}Response.{{ name }};
    {{/ each }}

  }

  //////////////////////////////////////////////////////////////////////////////
  // REMOVE
  //////////////////////////////////////////////////////////////////////////////
  // Single Future remove{{ className relationType.name }}({{ fqClass classType.name }}Store {{ variable relationType.name }}{{ className classType.name }}Store) async {
  Future remove{{ className relationType.name }}({{ fqClass classType.name }}Store {{ variable relationType.name }}{{ className classType.name }}Store,  {{ fqClass relationType.target.name }}Store {{ variable relationType.target.name }}Store) async {
    // Request mapping
    var {{ variable relationType.target.name }}Request = {{ modelName application.name }}Identifier();
    {{ variable relationType.target.name }}Request.identifier = {{ variable relationType.name }}{{ className classType.name }}Store.identifier;

    // Call Server
    await {{ className root.name }}Api(_apiClient).{{ fqVariable classType.name }}Delete{{ className relationType.name }}({{ variable relationType.name }}{{ className classType.name }}Store.identifier, {{ variable relationType.target.name }}Request);

  }

  //////////////////////////////////////////////////////////////////////////////
  // UPDATE
  //////////////////////////////////////////////////////////////////////////////
  Future update{{ className relationType.name }}({{ fqClass classType.name }}Store {{ variable relationType.name }}{{ className classType.name }}Store,  {{ fqClass relationType.target.name }}Store {{ variable relationType.target.name }}Store) async {

    // Request mapping
    var {{ variable relationType.target.name }}Request = {{ fqClass relationType.target.name }}();

    // Attributes
    {{ variable relationType.target.name}}Request.identifier = {{ variable relationType.target.name }}Store.identifier;
    {{# each relationType.target.attributes ~}}
    {{ variable ../relationType.target.name}}Request.{{ name }} = {{ variable ../relationType.target.name }}Store.{{ name }};
    {{/ each }}

    // Call Server
    var {{ variable relationType.target.name }}Response = await {{ className root.name }}Api(_apiClient).{{ fqVariable classType.name }}Update{{ className relationType.name }}({{ variable relationType.name }}{{ className classType.name }}Store.identifier, {{ variable relationType.target.name }}Request);

    // Response mapping

    // Attributes
    {{ variable relationType.target.name}}Store.identifier = {{ variable relationType.target.name }}Response.identifier;
    {{# each relationType.target.attributes ~}}
    {{ variable ../relationType.target.name}}Store.{{ name }} = {{ variable ../relationType.target.name }}Response.{{ name }};
    {{/ each }}
  }

  {{# each relationType.target.relations ~}}
  //////////////////////////////////////////////////////////////////////////////
  // GET CREATE RANGE for {{ variable name }}
  //////////////////////////////////////////////////////////////////////////////
  Future get{{ className name }}RangeForCreate{{ className ../relationType.name }}({{ fqClass ../relationType.target.name }}Store {{ variable ../relationType.name }}{{ fqClass ../classType.name }}Store, List<{{ fqClass target.name }}Store> selectable{{ className target.name }}StoreList) async {

    // Request mapping
    var {{ variable ../relationType.target.name }}Request = {{ fqClass ../relationType.target.name }}();

    // Attributes
    {{ variable ../relationType.target.name}}Request.identifier = {{ variable ../relationType.name }}{{ fqClass ../classType.name }}Store.identifier;
    {{# each ../relationType.target.attributes ~}}
    {{ variable ../../relationType.target.name}}Request.{{ name }} = {{ variable ../../relationType.name }}{{ fqClass ../../classType.name }}Store.{{ name }};
    {{/ each }}

    // Call Server
    var {{ variable target.name }}ListResponse = await {{ className ../root.name }}Api(_apiClient).{{ fqVariable classType.name }}GetRangeOf{{ className name }}ToCreate{{ className ../relationType.name }}({{ variable ../relationType.target.name }}Request);

    selectable{{ className target.name }}StoreList.addAll({{ variable target.name }}ListResponse.map<{{ fqClass target.name }}Store>(({{ variable target.name }}Response) {
      // Response mapping
      var {{ variable target.name }}Store = {{ fqClass target.name }}Store();

      // Attributes
      {{ variable target.name }}Store.identifier = {{ variable target.name }}Response.identifier;
      {{# each target.attributes ~}}
      {{ variable ../target.name }}Store.{{ name }} = {{ variable ../target.name }}Response.{{ name }};
      {{/ each }}

      return {{ variable target.name }}Store;
    }).toList());
  }
  //////////////////////////////////////////////////////////////////////////////
  // GET UPDATE RANGE for {{ variable name }}
  //////////////////////////////////////////////////////////////////////////////
  Future get{{ className name }}RangeForUpdate{{ className ../relationType.name }}({{ fqClass ../relationType.target.name }}Store {{ variable ../relationType.name }}{{ fqClass ../classType.name }}Store, List<{{ fqClass target.name }}Store> selectable{{ className target.name }}StoreList) async {

    // Request mapping
    var {{ variable ../relationType.target.name }}Request = {{ fqClass ../relationType.target.name }}();

    // Attributes
    {{ variable ../relationType.target.name}}Request.identifier = {{ variable ../relationType.name }}{{ fqClass ../classType.name }}Store.identifier;
    {{# each ../relationType.target.attributes ~}}
    {{ variable ../../relationType.target.name}}Request.{{ name }} = {{ variable ../../relationType.name }}{{ fqClass ../../classType.name }}Store.{{ name }};
    {{/ each }}

    // Call Server
    var {{ variable target.name }}ListResponse = await {{ className ../root.name }}Api(_apiClient).{{ fqVariable classType.name }}GetRangeOf{{ className name }}ToUpdate{{ className ../relationType.name }}({{ variable ../relationType.target.name }}Request);

    selectable{{ className target.name }}StoreList.addAll({{ variable target.name }}ListResponse.map<{{ fqClass target.name }}Store>(({{ variable target.name }}Response) {
      // Response mapping
      var {{ variable target.name }}Store = {{ fqClass target.name }}Store();

      // Attributes
      {{ variable target.name }}Store.identifier = {{ variable target.name }}Response.identifier;
      {{# each target.attributes ~}}
      {{ variable ../target.name }}Store.{{ name }} = {{ variable ../target.name }}Response.{{ name }};
      {{/ each }}

      return {{ variable target.name }}Store;
    }).toList());
  }
{{/ each }}
}

