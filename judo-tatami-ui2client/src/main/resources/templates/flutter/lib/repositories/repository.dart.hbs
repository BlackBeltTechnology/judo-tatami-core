//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
//   Application : {{ application.name }}
//   Root: {{ root.name }}
//   Class: {{ classType.name }}
//   Relation: {{ relationType.name }}
//   Relation target: {{ relationType.target.name }}

import 'dart:async';

import 'package:openapi_dart_common/openapi.dart';
import 'package:{{ path application.name }}/utilities/constants.dart';
import 'package:{{ path application.name }}/rest/{{ path application.dataElement.name }}/lib/api.dart';

import 'package:{{ path application.name }}/store/{{ path application.dataElement.name }}/{{ path root.name }}/store.dart';
{{# each classType.relations ~}}
import 'package:{{ path application.name }}/store/{{ path application.dataElement.name }}/{{ path ../root.name }}/{{ fqPath target.name }}_store.dart';
{{/ each}}
import 'package:openapi_dart_common/openapi.dart';


class {{ fqClass application.dataElement.name }}{{ className root.name }}{{ className relationType.name }}Repository {
  final ApiClient _apiClient = ApiClient(basePath: kBasePathUrl, apiClientDelegate: DioClientDelegate());

  //////////////////////////////////////////////////////////////////////////////
  // GET LIST
  //////////////////////////////////////////////////////////////////////////////
  Future get{{ className relationType.name }}({{ fqClass application.dataElement.name }}{{ className root.name }}Store {{ variable classType.name }}Store, List<{{ fqClass relationType.target.name }}Store> {{ variable relationType.target.name }}StoreList) async {

    // Call Server
    List<{{ fqClass relationType.target.name }}> {{ variable relationType.target.name }}ResponseList = await {{ className root.name }}Api(_apiClient).{{ fqVariable classType.name }}Get{{ className relationType.name }}({{ variable classType.name }}Store.identifier);

    // Response mapping
    {{ variable relationType.target.name }}StoreList.addAll({{ variable relationType.target.name }}ResponseList.map<{{ fqClass relationType.target.name }}Store>(({{ variable classType.name }}Response) {
      // Response mapping
      var {{ variable relationType.target.name }}Store = {{ fqClass relationType.target.name }}Store();

      // Attributes
      {{ variable relationType.target.name}}Store.identifier = {{ variable relationType.target.name }}Response.identifier;
      {{# each relationType.target.attributes ~}}
      {{ variable ../relationType.target.name}}Store.{{ name }} = {{ variable ../relationType.target.name }}Response.{{ name }};
      {{/ each }}

      return {{ relationType.target.name }}Store;
    }).toList());
  }

  //////////////////////////////////////////////////////////////////////////////
  // GET One
  //////////////////////////////////////////////////////////////////////////////
  Future get{{ className relationType.name }}ById(List<{{ fqClass relationType.target.name }}Store> {{ variable relationType.target.name }}StoreList, String identifier, {{ fqClass relationType.target.name }}Store {{ variable relationType.target.name }}Store) async {
    // Check the store. If it is empty, loading it and selecting element
    if ({{ variable relationType.target.name }}StoreList == null || {{ variable relationType.target.name }}StoreList.length == 0) {
            get{{ className relationType.name }}({{ variable relationType.target.name }}StoreList);
    }
    {{ variable relationType.target.name }}Store = {{ variable relationType.target.name }}StoreList.firstWhere((element) => element.identifier == identifier);
  }

  //////////////////////////////////////////////////////////////////////////////
  // CREATE
  //////////////////////////////////////////////////////////////////////////////
  Future create{{ className relationType.name }}({{ fqClass relationType.name }}Store {{ variable relationType.name }}Store,  {{ fqClass relationType.target.name }}Store {{ variable relationType.target.name }}Store) async {

    // Request mapping
    var {{ variable relationType.target.name }}ExtendedRequest = {{ fqClass relationType.target.name }}Extended();

    // Attributes
    {{# each relationType.target.attributes ~}}
    {{ variable ../relationType.target.name}}ExtendedRequest.{{ name }} = {{ variable ../relationType.target.name }}Store.{{ name }};
    {{/ each }}

    // Single association
    {{# each relationType.target.relations ~}}
    {{# unless isCollection ~}}
    {{ variable ../relationType.target.name }}ExtendedRequest.{{ variable name }} = {{ fqClass ../relationType.target.name }}ExtendedCategory();
    {{ variable ../relationType.target.name }}ExtendedRequest.{{ variable name }}.identifier = {{ variable ../relationType.target.name }}.{{ variable name }}.identifier;
    {{/ unless }}
    {{/ each }}

    // Call Server
    var {{ variable relationType.target.name }}Response = await {{ className root.name }}Api(_apiClient).{{ fqVariable classType.name }}Create{{ className relationType.name }}({{ variable classType.name }}Store.identifier, {{ variable relationType.target.name }}ExtendedRequest);

    // Response mapping

    // Attributes
    {{ variable relationType.target.name}}Store.identifier = {{ variable relationType.target.name }}Response.identifier;
    {{# each relationType.target.attributes ~}}
    {{ variable ../relationType.target.name}}Store.{{ name }} = {{ variable ../relationType.target.name }}Response.{{ name }};
    {{/ each }}

  }

  //////////////////////////////////////////////////////////////////////////////
  // REMOVE
  //////////////////////////////////////////////////////////////////////////////
  Future remove{{ className relationType.name }}({{ fqClass relationType.name }}Store {{ variable relationType.name }}Store) async {
    // Request mapping
    var {{ variable relationType.target.name }}Request = {{ modelName application.name }}Identifier();
    {{ variable relationType.target.name }}Request.identifier = {{ variable relationType.target.name }}Store.identifier;

    // Call Server
    await {{ className root.name }}Api(_apiClient).{{ fqVariable classType.name }}Delete{{ className relationType.name }}({{ variable relationType.target.name }}Request);

  }

  //////////////////////////////////////////////////////////////////////////////
  // UPDATE
  //////////////////////////////////////////////////////////////////////////////
  Future update{{ className relationType.name }}({{ fqClass relationType.name }}Store {{ variable relationType.name }}Store,  {{ fqClass relationType.target.name }}Store {{ variable relationType.target.name }}Store) async {

    // Request mapping
    var {{ variable relationType.target.name }}Request = {{ fqClass relationType.target.name }}();

    // Attributes
    {{ variable relationType.target.name}}Request.identifier = {{ variable relationType.target.name }}Store.identifier;
    {{# each relationType.target.attributes ~}}
    {{ variable ../relationType.target.name}}Request.{{ name }} = {{ variable ../relationType.target.name }}Store.{{ name }};
    {{/ each }}

    // Call Server
    var {{ variable relationType.target.name }}Response = await {{ className root.name }}Api(_apiClient).{{ fqVariable classType.name }}Update{{ className relationType.name }}({{ variable classType.name }}Store.identifier, {{ variable relationType.target.name }}Request);

    // Response mapping

    // Attributes
    {{ variable relationType.target.name}}Store.identifier = {{ variable relationType.target.name }}Response.identifier;
    {{# each relationType.target.attributes ~}}
    {{ variable ../relationType.target.name}}Store.{{ name }} = {{ variable ../relationType.target.name }}Response.{{ name }};
    {{/ each }}
  }

  //////////////////////////////////////////////////////////////////////////////
  // GET CREATE RANGE
  //////////////////////////////////////////////////////////////////////////////
  Future getRangeForCreateAllCategories(NorthwindExternalAPProductInfoStore productInfoStore, List<NorthwindExternalAPCategoryInfoStore> selectableCategoryInfoStoreList) async {
    // Request mapping
    var productInfoRequest = NorthwindServicesProductInfo();

    // Attributes
    productInfoRequest.identifier = productInfoStore.identifier;
    productInfoRequest.productName = productInfoStore.productName;
    productInfoRequest.unitPrice = productInfoStore.unitPrice;
    productInfoRequest.weight = productInfoStore.weight;

    // Call Server
    var categoryInfoListResponse = await DefaultApi(_apiClient).northwindExternalAPGetRangeOfCategoryToCreateAllProducts(productInfoRequest);

    selectableCategoryInfoStoreList.addAll(categoryInfoListResponse.map<NorthwindExternalAPCategoryInfoStore>((categoryInfoStoreResponse) {
      // Response mapping
      var categoryInfoStore = NorthwindExternalAPCategoryInfoStore();

      // Attributes
      categoryInfoStore.identifier = categoryInfoStoreResponse.identifier;
      categoryInfoStore.categoryName = categoryInfoStoreResponse.categoryName;

      return categoryInfoStore;
    }).toList());
  }

  //////////////////////////////////////////////////////////////////////////////
  // GET UPDATE RANGE
  //////////////////////////////////////////////////////////////////////////////
  Future getRangeForUpdateAllCategories(NorthwindExternalAPProductInfoStore productInfoStore, List<NorthwindExternalAPCategoryInfoStore> selectableCategoryInfoStoreList) async {
    // Request mapping
    var productInfoRequest = NorthwindServicesProductInfo();

    // Attributes
    productInfoRequest.identifier = productInfoStore.identifier;
    productInfoRequest.productName = productInfoStore.productName;
    productInfoRequest.unitPrice = productInfoStore.unitPrice;
    productInfoRequest.weight = productInfoStore.weight;

    // Call Server
    var categoryInfoListResponse = await DefaultApi(_apiClient).northwindExternalAPGetRangeOfCategoryToUpdateAllProducts(productInfoRequest);

    selectableCategoryInfoStoreList.addAll(categoryInfoListResponse.map<NorthwindExternalAPCategoryInfoStore>((categoryInfoResponse) {
      // Response mapping
      var categoryInfoStore = NorthwindExternalAPCategoryInfoStore();

      // Attributes
      categoryInfoStore.identifier = categoryInfoResponse.identifier;
      categoryInfoStore.categoryName = categoryInfoResponse.categoryName;

      return categoryInfoStore;
    }).toList());

  }
}

