{{# if addDebugToTemplate }}//START tablepagefragment.dart.hbs-----{{ page.name }}---------------------------------------------------------------------------------------{{/ if }}
{{# with page.relationType as |relation| }}
    {{# unless page.dataElement.isAccess }}
        final {{ storeClassName page.dataElement.owner }} ownerStore;
    {{/ unless }}

    {{# unless page.dataElement.isAccess }}
        const {{ pageClassName page }}({Key key, @required this.ownerStore}) : super(key: key);
    {{/ unless }}

    @override
    State<StatefulWidget> createState() => _{{ pageStateClassName page }}({{# unless page.dataElement.isAccess }}ownerStore: ownerStore{{/ unless }});
}

class _{{ pageStateClassName page }} extends State<{{ pageClassName page }}> {
    {{# unless page.dataElement.isAccess }}
        final {{ storeClassName page.dataElement.owner }} ownerStore;
    {{/ unless }}

    final {{ pageStoreClassName page }} pageStore = {{ pageStoreClassName page }}();

    _{{ pageStateClassName page }}({{# unless page.dataElement.isAccess }}{@required this.ownerStore}{{/ unless }}){
        final navigation = locator<NavigationState>();
        SchedulerBinding.instance.addPostFrameCallback((_) {
            navigation.setCurrentTitle(AppLocalizations.of(context).lookUpValue(context, {{ pageClassName page }}.title));
        });

        pageStore.get{{ fqClass page.dataElement.name }}({{# unless page.dataElement.isAccess }} ownerStore {{/ unless }}).catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
    }
{{/ with }}
{{# if addDebugToTemplate }}//END tablepagefragment.dart.hbs-----{{ page.name }}-----------------------------------------------------------------------------------------{{/ if }}
