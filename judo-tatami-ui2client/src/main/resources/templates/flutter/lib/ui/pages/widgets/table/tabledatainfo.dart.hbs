{{log 'Table data info generation for' (variable application.name) '-' (fqClass table.pageDefinition.name) (variable table.dataElement.target.name) level='debug'}}
//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}

part of {{ variable application.name }}.ui.pages.{{ fqVariable table.pageContainer.layoutType.name }}.tables;

class {{ fqClass table.pageDefinition.name }}{{ fqClass table.name }}{{ fqClass table.pageContainer.layoutType.name }}Table implements JudoTableDataInfo {

    const {{ fqClass table.pageDefinition.name }}{{ fqClass table.name }}{{ fqClass table.pageContainer.layoutType.name }}Table({
        this.disabled = false,
    });

    final bool disabled;

    @override
    List<DataColumn> getColumns(Function onAdd, Function onSort) {
        return [
            {{# each columns}}
            DataColumn(
                label: Text('{{label}}'),
                {{# unless (isBooleanDataType dataType) }}
                    {{# unless (isEnumType dataType) }}
                onSort: onSort,
                    {{/ unless }}
                {{/ unless }}
            ),
            {{/each}}
            {{#each table.rowActions as |action|}}
                {{#unless action.isViewAction}}
                    {{# unless table.pageDefinition.isPageTypeOperationInput }}
                    DataColumn(
                        label: Text("")
                    ),
                    {{/ unless}}
                {{/ unless}}
            {{/each}}
        ];
    }

    @override
    Comparator getSortComparator(int columnIndex, bool asc) {
        {{# each columns}}
            {{# unless (isBooleanDataType dataType) }}
                {{# unless (isEnumType dataType) }}
        if (columnIndex == {{@index}}) {
            if (asc) {
                return (a, b) => a.{{ variable attributeType.name }}.compareTo(b.{{ variable attributeType.name }});
            } else {
                return (a, b) => b.{{ variable attributeType.name }}.compareTo(a.{{ variable attributeType.name }});
            }
                {{/ unless }}
            {{/ unless }}
        }
        {{/each}}
    }

    @override
    String getColumnFieldByIndex(int columnIndex, bool asc) {
    {{# each columns}}
        {{# unless (isBooleanDataType dataType) }}
            {{# unless (isEnumType dataType) }}
        if (columnIndex == {{@index}}) {
            return "{{ variable attributeType.name }}";
        }
            {{/ unless }}
        {{/ unless }}
    {{/each}}
    }

    @override
    Function getRow({BuildContext context,
            Function navigateToEditPageAction,
            Function navigateToViewPageAction,
            Function navigateToCreatePageAction,
            Function removeAction,
            Function unsetAction,
            Function deleteAction}) {

        ThemeData theme =  Theme.of(context);
        return (target{{ className table.dataElement.target.name }}) => DataRow(
            cells: [
                {{# each columns as |column|}}
                DataCell(
                    {{#if column}}
                    {{> (getWidgetTemplate column) column=column dataName=(className table.dataElement.target.name)}}
                    {{/if}}
                ),
                {{/each}}
                {{#each table.rowActions as |action|}}
                {{#if action.isRemoveAction}}
                DataCell(
                    Icon(
                        Icons.{{action.icon.name}},
                        color: disabled ? theme.disabledColor : theme.colorScheme.secondary,
                    ),
                    onTap: disabled ? null : () => removeAction(target{{ className table.dataElement.target.name }}),
                ),
                {{/if}}
                {{#if action.isDeleteAction}}
                target{{ className table.dataElement.target.name }}?.internal__deletable == true && deleteAction != null // function null if the owner is not updatable
                ? DataCell(
                    Icon(
                        Icons.{{action.icon.name}},
                        color: disabled ? theme.disabledColor : theme.colorScheme.secondary,
                    ),
                    onTap: disabled ? null : () => deleteAction(target{{ className table.dataElement.target.name }}),
                  )
                : DataCell(
                    Text(''),
                  ),
                {{/if}}
                {{#if action.isEditAction}}
                    {{# unless table.pageDefinition.isPageTypeOperationInput }}
                SHOW_TABLE_ROW_ACTIONS ? (target{{ className table.dataElement.target.name }}?.internal__updatable == true && navigateToEditPageAction != null
                ? DataCell(
                    Icon(
                        Icons.{{action.icon.name}},
                        color: disabled ? theme.disabledColor : theme.colorScheme.secondary,
                    ),
                    onTap: disabled ? null : () => navigateToEditPageAction(target{{ className table.dataElement.target.name }}),
                  )
                : DataCell(
                    Text(''),
                  )) : DataCell(Text('')),
                    {{/unless}}
                {{/if}}
                {{/each}}
            ],
        );
    }
}
