{{ log 'Breadcrumb generation for' (variable application.name) level='info' }}
//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}

import 'package:auto_route/auto_route.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_breadcrumb/flutter_breadcrumb.dart';
import 'package:injectable/injectable.dart';
import 'package:judo_flutter_components/judo_flutter_components.dart';
import 'package:{{ modelPackage application.name }}/{{ path application.name }}/ui/routes/router.gr.dart';
import 'package:{{ modelPackage application.name }}/{{ path application.name }}/injector/injector.dart';
import 'package:{{ modelPackage application.name }}/{{ path application.name }}/ui/pages/package.dart';
import 'navigation_registry.dart';
import 'navigation_service.dart';
import 'page_navigation.dart';
import 'package:mobx/mobx.dart';

part 'navigation_state.g.dart';

@lazySingleton
class NavigationState extends _NavigationState with _$NavigationState {}

abstract class _NavigationState with Store {
    final navigatorKey = GlobalKey<ExtendedNavigatorState>();
    final scaffoldKey = GlobalKey<ScaffoldState>(); // rethink this key place

    String currentRoute = Routes.{{ pageClassVariableName application.dashboard }};
    PageNavigation currentPageNavigation;
    final List<String> stack = [];

    @observable
    ObservableList<BreadCrumbItem> breadcumbItems = [ BreadCrumbItem(content: Icon(Icons.home, color: Color(0xffdcdcdc), size: 20,))].asObservable();

    @observable
    String currentTitle = '';

    @action
    void setCurrentTitle(String newTitle) => currentTitle = newTitle;

   bool isMenuCollapsed(BuildContext context) {
        {{# each application.layoutTypes as |layoutType| }}
        {{# unless layoutType.original }}
         if (MediaQuery.of(context).size.width >= {{ layoutType.minimumResolution }} && MediaQuery.of(context).size.width <={{ layoutType.maximumResolution }}) {
            return {{ layoutType.menuCollapsed }};
         }
        {{/ unless }}
        {{/ each }}
        return false;
    }
    

    void navigateTo(String route) async {
        NavigationRegistry navigationRegistry = locator<NavigationRegistry>();
        if (currentRoute != route) {
            currentRoute = route;
            currentPageNavigation = navigationRegistry.getPageNavigationByRoute(currentRoute);

            breadcumbItems.clear();
            breadcumbItems.add(BreadCrumbItem(content:
            Padding(
                padding: EdgeInsets.fromLTRB(0, 0, 16, 0),
                child:
                  Icon(Icons.home, color: Color(0xffdcdcdc), size: 20,)
                )
              )
            );

            stack.clear();

            var targetPageNavigation = await NavigationService.whereToGo(currentPageNavigation);
            if(targetPageNavigation != null) {
                currentRoute = targetPageNavigation.route;
                navigatorKey.currentState.pushAndRemoveUntil(targetPageNavigation.route, (route) => false, arguments: targetPageNavigation.getPageArgumentObject());
                return;
            } else if(targetPageNavigation == null && currentPageNavigation?.pageType == PageType.View) { // if create page is not existing, but we need to go to the empty view page
                currentRoute = Routes.{{ fqVariable application.name }}BlankPage;
                currentTitle = 'Empty';
                navigatorKey.currentState.pushAndRemoveUntil(Routes.{{ fqVariable application.name }}BlankPage, (route) => false);
                return;
            }

            navigatorKey.currentState.pushAndRemoveUntil(route, (route) => false);
        }
    }

    @optionalTypeArgs
    Future<T> open<T extends Object>(String routeName,
        {Object arguments,
            Map<String, String> queryParams,
            OnNavigationRejected onReject}) async {

        currentRoute = routeName;

        breadcumbItems.add(
            BreadCrumbItem(
                content:
                    Padding(
                      padding: EdgeInsets.symmetric(horizontal: 16),
                      child:
                      Text(currentTitle,
                        style: JudoComponentCustomizer.get().getBreadcumbTextStyle(),
                      ),
                    )
            )
        );

        stack.add(currentTitle);
        return await navigatorKey.currentState.push(routeName,
            arguments : arguments,
            queryParams : queryParams,
            onReject : onReject);
    }

    @optionalTypeArgs
    void close<T extends Object>([T result, bool access = false]) async {
        NavigationRegistry navigationRegistry = locator<NavigationRegistry>();
        currentPageNavigation = navigationRegistry.getPageNavigationByRoute(currentRoute);

        var targetPageNavigation = await NavigationService.whereToGo(currentPageNavigation, result);
        if(targetPageNavigation != null) {
            navigateTo(targetPageNavigation.route);
        }

        if (navigatorKey.currentState.canPop()) {
            currentTitle = stack.removeLast();
            breadcumbItems.removeLast();
            navigatorKey.currentState.pop<T>(result);
        }
    }
}
