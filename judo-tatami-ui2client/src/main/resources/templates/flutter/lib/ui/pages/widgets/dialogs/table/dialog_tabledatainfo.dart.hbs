{{log 'Dialog table data info generation for' (variable application.name) '-' (fqClass table.pageDefinition.name) (variable table.dataElement.target.name) level='debug'}}
//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}

part of {{ variable application.name }}.ui.pages.dialogs.tables;

class {{ fqClass table.pageDefinition.name }}{{ fqClass table.name }}DialogTable implements JudoTableDataInfo {

    const {{ fqClass table.pageDefinition.name }}{{ fqClass table.name }}DialogTable(this.context, {this.disabled = false});

    final BuildContext context;
    final bool disabled;

    @override
    List<DataColumn> getColumns(Function onAdd, Function onSort) {
        return [
            {{# each columns as |column| }}
            DataColumn(
                label: Text(AppLocalizations.of(context).lookUpValue(context, '{{ column.label }}')),
                {{# unless (isBooleanDataType column.attributeType.dataType) }}
                    {{# unless (isEnumType column.attributeType.dataType) }}
                onSort: onSort,
                    {{/ unless }}
                {{/ unless }}
            ),
            {{/each}}
        ];
    }

    @override
    Comparator getSortComparator(int columnIndex, bool asc) {
        {{# each columns as |column| }}
            {{# unless (isBooleanDataType column.attributeType.dataType) }}
                {{# unless (isEnumType column.attributeType.dataType) }}
        if (columnIndex == {{@index}}) {
            if (asc) {
                return (a, b) => a.{{ variable column.attributeType.name }}.compareTo(b.{{ variable column.attributeType.name }});
            } else {
                return (a, b) => b.{{ variable column.attributeType.name }}.compareTo(a.{{ variable column.attributeType.name }});
            }
        }
                {{/ unless }}
            {{/ unless }}
        {{/each}}
    }

    @override
    String getColumnFieldByIndex(int columnIndex, bool asc) {
    {{# each columns as |column| }}
        {{# unless (isBooleanDataType column.attributeType.dataType) }}
            {{# unless (isEnumType column.attributeType.dataType) }}
        if (columnIndex == {{@index}}) {
            return "{{ variable column.attributeType.name }}";
        }
            {{/ unless }}
        {{/ unless }}
    {{/each}}
    }

    @override
    Function getRow({BuildContext context,
            Function navigateToEditPageAction,
            Function navigateToViewPageAction,
            Function navigateToCreatePageAction,
            Function removeAction,
            Function unsetAction,
            Function deleteAction}) {

        ThemeData theme =  Theme.of(context);
        return (target{{ className table.dataElement.target.name }}) => DataRow(
            cells: [
                {{# each columns as |column| }}
                DataCell(
                    {{#if column}}
                    {{> (getWidgetTemplate column) column=column dataName=(className table.dataElement.target.name)}}
                    {{/if}}
                ),
                {{/each}}
            ],
        );
    }
}
