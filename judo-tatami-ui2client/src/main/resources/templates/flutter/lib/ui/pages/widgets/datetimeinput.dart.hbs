{{~ log 'Date time field generation for' (variable application.name) '-' (fqClass page.name)'page'(fqClass page.dataElement.target.name) attributeType.name level='debug' ~}}
//START datetimeinput.dart.hbs-----{{page.dataElement.target.name}}------------------------------------------------------------------------
{{#if (isViewTypePage page) }}
Observer(
    builder: (_) => JudoDateTimeInput(
        key: UniqueKey(),
        col: {{ multiplyCol col }},
        row: {{ row }},
        disabled: {{ disabled }}{{# if enabledBy }} || !((target{{ className page.relationType.target.name }}Store?.{{ variable enabledBy.name }}) ?? false){{/ if }},
        use24HourFormat: true,
        initialDate: target{{ className page.dataElement.target.name }}Store.{{ variable attributeType.name }},
      {{#if this.isLabelVisible }}
        label: AppLocalizations.of(context).lookUpValue(context, '{{ this.label }}'),
      {{/if}}
      {{#if this.isIconVisible }}
        icon: Icon(Icons.{{ this.icon.name }}),
      {{/if}}
        readOnly: true,
    ),
),
{{/if}}

{{#if (isCreateTypePage page) }}
Observer(
    builder: (_) => JudoDateTimeInput(
        key: inputWidgetKeyMap['{{ name }}'],
        col: {{ multiplyCol col }},
        row: {{ row }},
        disabled: {{ disabled }}{{# if enabledBy }} || !((target{{ className page.relationType.target.name }}Store?.{{ variable enabledBy.name }}) ?? false){{/ if }},
        use24HourFormat: true,
        initialDate: target{{ className page.dataElement.target.name }}Store.{{ variable attributeType.name }},
      {{#if this.isLabelVisible }}
        label: AppLocalizations.of(context).lookUpValue(context, '{{ this.label }}'),
      {{/if}}
      {{#if this.isIconVisible }}
        icon: Icon(Icons.{{ this.icon.name }}),
      {{/if}}
        onChanged: (value) => target{{ className page.dataElement.target.name }}Store.set{{ className attributeType.name }}(value),
        firstDate: DateTime(DateTime.now().year - 5), // TODO: revisit this line
        lastDate: DateTime(DateTime.now().year + 5), // TODO: revisit this line
        readOnly: {{attributeType.isReadOnly}},
    ),
),
{{/if}}

{{#if page.isPageTypeUpdate}}
Observer(
    builder: (_) => JudoDateTimeInput(
        key: inputWidgetKeyMap['{{ name }}'],
        col: {{ multiplyCol col }},
        row: {{ row }},
        disabled: {{ disabled }}{{# if enabledBy }} || !((target{{ className page.relationType.target.name }}Store?.{{ variable enabledBy.name }}) ?? false){{/ if }},
        use24HourFormat: true,
        initialDate: target{{ className page.dataElement.target.name }}Store.{{ variable attributeType.name }},
      {{#if this.isLabelVisible }}
        label: AppLocalizations.of(context).lookUpValue(context, '{{ this.label }}'),
      {{/if}}
      {{#if this.isIconVisible }}
        icon: Icon(Icons.{{ this.icon.name }}),
      {{/if}}
        onChanged: (value) => target{{ className page.dataElement.target.name }}Store.set{{ className attributeType.name }}(value),
        firstDate: DateTime(DateTime.now().year - 5), // TODO: revisit this line
        lastDate: DateTime(DateTime.now().year + 5), // TODO: revisit this line
        readOnly: {{attributeType.isReadOnly}},
    ),
),
{{/if}}
//END datetimeinput.dart.hbs-----{{page.dataElement.target.name}}--------------------------------------------------------------------------
