{{ log 'Page generation for' (variable application.name) '-' (fqClass page.name) level='info' }}
//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}
// Container: {{ container.name }}

part of {{ pageLibraryName page }};
{{# if page.isPageTypeView }}
{{> flutter/lib/ui/pages/pagetypesfragments/viewpagestore.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeTable }}
{{> flutter/lib/ui/pages/pagetypesfragments/tablepagestore.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeCreate }}
{{> flutter/lib/ui/pages/pagetypesfragments/createpagestore.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeUpdate }}
{{> flutter/lib/ui/pages/pagetypesfragments/editpagestore.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeDashboard }}
    {{# if page.relationType.isCollection }}
{{> flutter/lib/ui/pages/pagetypesfragments/tablepagestore.dart.hbs }}
    {{ else }}
{{> flutter/lib/ui/pages/pagetypesfragments/viewpagestore.dart.hbs }}
    {{/ if }}
{{/ if }}
{{# if page.isPageTypeOperationInput }}
{{> flutter/lib/ui/pages/pagetypesfragments/operationinputpagestore.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeOperationOutput }}
{{> flutter/lib/ui/pages/pagetypesfragments/operationoutputpagestore.dart.hbs }}
{{/ if }}


class {{ pageClassName page }} extends StatefulWidget {
    static const String title = '{{ page.label }}';

{{# if page.isPageTypeDashboard }}
    {{# if page.relationType.isCollection }}
{{> flutter/lib/ui/pages/pagetypesfragments/tablepagefragment.dart.hbs }}
    {{ else }}
{{> flutter/lib/ui/pages/pagetypesfragments/dashboardpagefragment.dart.hbs }}
    {{/ if }}
{{/ if }}
{{# if page.isPageTypeTable }}
{{> flutter/lib/ui/pages/pagetypesfragments/tablepagefragment.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeView }}
{{> flutter/lib/ui/pages/pagetypesfragments/viewpagefragment.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeCreate }}
{{> flutter/lib/ui/pages/pagetypesfragments/createpagefragment.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeUpdate }}
{{> flutter/lib/ui/pages/pagetypesfragments/editpagefragment.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeOperationInput }}
{{> flutter/lib/ui/pages/pagetypesfragments/operationinputpagefragment.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeOperationOutput }}
{{> flutter/lib/ui/pages/pagetypesfragments/operationoutputpagefragment.dart.hbs }}
{{/ if }}

    {{# if (isInputWidgetMapNeed page) }}
    var inputWidgetKeyMap = {
    {{# each (getInputWidgets page.containers.[0]) as |input| }}
        '{{ variable input.name }}' : GlobalKey(),
    {{/ each }}
    };
    {{/ if }}

    @override
    Widget build(BuildContext context) {

        {{# if (isSingleRelationDashboardPage page) }}
        {{> flutter/lib/ui/pages/pagetypesfragments/dashboardlayoutbuilder.dart.hbs }}
        {{ else }}
        LayoutBuilder layout = LayoutBuilder(builder: (context, constraints) {
            {{# each page.containers as |pageContainer| }}
            {{# unless pageContainer.layoutType.original }}
            if (MediaQuery.of(context).size.width >= {{ pageContainer.layoutType.minimumResolution }} && MediaQuery.of(context).size.width <= {{ pageContainer.layoutType.maximumResolution }}) {
                return get{{ pageBodyClassName page pageContainer.layoutType.name }}(context

                    {{~# if page.isPageTypeDashboard ~}}
                    , pageStore
                    {{~/ if ~}}

                    {{~# if page.isPageTypeTable ~}}
                        {{~# unless page.dataElement.isAccess ~}}
                    , ownerStore
                        {{~/ unless ~}}
                    , pageStore
                    {{~/ if ~}}

                    {{~# if page.isPageTypeView ~}}
                    , targetStore
                        {{~# unless page.dataElement.isAccess ~}}
                    , ownerStore
                        {{~/ unless ~}}
                    , pageStore
                    {{~/ if ~}}

                    {{~# if page.isPageTypeUpdate ~}}
                    , targetStore, pageStore
                    {{~/ if ~}}

                    {{~# if page.isPageTypeCreate ~}}
                    , targetStore
                        {{~# unless page.dataElement.isAccess ~}}
                    , ownerStore
                        {{~/ unless ~}}
                    , pageStore
                    {{~/ if ~}}

                    {{~# if page.isPageTypeOperationInput ~}}
                    , targetStore
                    , pageStore
                    {{~/ if ~}}

                    {{~# if page.isPageTypeOperationOutput ~}}
                    , targetStore
                    , pageStore
                    {{~/ if ~}}

                    {{~# if (isInputWidgetMapNeed page) ~}}
                    , inputWidgetKeyMap
                    {{~/ if ~}}
                );
            }
            {{/ unless }}
            {{/ each }}
            return get{{ pageBodyClassName page application.defaultLayoutType.name }}(context

                {{~# if page.isPageTypeDashboard ~}}
                , pageStore
                {{~/ if ~}}

                {{~# if page.isPageTypeTable ~}}
                {{~# unless page.dataElement.isAccess ~}}
                , ownerStore
                {{~/ unless ~}}
                , pageStore
                {{~/ if ~}}

                {{~# if page.isPageTypeView ~}}
                , targetStore
                {{~# unless page.dataElement.isAccess ~}}
                , ownerStore
                {{~/ unless ~}}
                , pageStore
                {{~/ if ~}}

                {{~# if page.isPageTypeUpdate ~}}
                , targetStore, pageStore
                {{~/ if ~}}

                {{~# if page.isPageTypeCreate ~}}
                , targetStore
                {{~# unless page.dataElement.isAccess ~}}
                , ownerStore
                {{~/ unless ~}}
                , pageStore
                {{~/ if ~}}

                {{~# if page.isPageTypeOperationInput ~}}
                , targetStore
                , pageStore
                {{~/ if ~}}

                {{~# if page.isPageTypeOperationOutput ~}}
                , targetStore
                , pageStore
                {{~/ if ~}}

                {{~# if (isInputWidgetMapNeed page) ~}}
                , inputWidgetKeyMap
                {{~/ if ~}}
            );
        });

        {{# if page.isPageTypeCreate }}
        return FutureBuilder<{{ storeClassName page.relationType.target }}>(
            future: pageStore.getDefaults(),
            builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting) {
                    return JudoLoadingProgress();
                } else if (snapshot.connectionState == ConnectionState.done) {
                    pageStore.targetStore = snapshot.data;
                    return layout;
                } else {
                    return Container();
                }
            },
        );
        {{ else }}
        return layout;
        {{/ if }}
        {{/ if }}
    }
}
