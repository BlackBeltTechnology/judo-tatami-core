{{~ log 'Date field generation for' (variable application.name) '-' (fqClass page.name)'page'(variable page.dataElement.target.name) attributeType.name level='debug' ~}}
{{# if addDebugToTemplate }}//START xmi:id="{{ getXMIID this }}" dateinput.dart.hbs-----{{ page.dataElement.target.name }}----------------------------------------------------------------------------{{/ if }}
Observer(
    builder: (_) => JudoDateInput(
        key: {{# if (isViewTypePage page) }}UniqueKey(){{ else }}inputWidgetKeyMap['{{ name }}']{{/ if }},
        {{# if (isPageValidatable page) }}
        errorMessage: pageStore.validationAttributeErrorMessageMap['{{ variable attributeType.name }}'].message,
        {{/ if }}
        col: {{ col }},
        row: {{ row }},
        disabled: {{ disabled }}{{# if enabledBy }} || !((targetStore?.{{ variable enabledBy.name }}) ?? false){{/ if }},
        initialDate: targetStore.{{ variable attributeType.name }},
        {{# if this.isLabelVisible }}
        label: AppLocalizations.of(context).lookUpValue(context, '{{ this.label }}'),
        {{/ if }}
        inCard: {{ isInCard }},
        {{# if this.isIconVisible }}
        icon: Icon(getIconByString('{{ this.icon.name }}')),
        {{/ if }}
        readOnly: {{# if (isViewTypePage page) }}true{{ else }}{{ attributeType.isReadOnly }}{{/ if }},
        {{# unless (isViewTypePage page) }}
        mandatory: {{ attributeType.isRequired }},
        onChanged: (value) => targetStore.set{{ className attributeType.name }}(value),
        firstDate: DateTime(DateTime.now().year - 5), // TODO: revisit this line
        lastDate: DateTime(DateTime.now().year + 5), // TODO: revisit this line
        {{/ unless }}
    ),
),
{{# if addDebugToTemplate }}//END dateinput.dart.hbs-----{{ page.dataElement.target.name }}------------------------------------------------------------------------------{{/ if }}
