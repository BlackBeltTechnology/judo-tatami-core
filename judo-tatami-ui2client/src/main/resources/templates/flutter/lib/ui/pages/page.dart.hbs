{{log 'Page generation for' (variable application.name) '-' (fqClass page.name) level='info'}}
//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}
// Container: {{ container.name }}

part of {{ variable application.name }}.ui.pages;
{{# if page.isPageTypeView }}
{{> templates/flutter/lib/ui/pages/pagetypesfragments/viewpagestore.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeTable }}
{{> templates/flutter/lib/ui/pages/pagetypesfragments/tablepagestore.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeCreate }}
{{> templates/flutter/lib/ui/pages/pagetypesfragments/createpagestore.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeUpdate }}
{{> templates/flutter/lib/ui/pages/pagetypesfragments/editpagestore.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeDashboard }}
    {{# if page.relationType.isCollection }}
{{> templates/flutter/lib/ui/pages/pagetypesfragments/tablepagestore.dart.hbs }}
    {{ else }}
{{> templates/flutter/lib/ui/pages/pagetypesfragments/viewpagestore.dart.hbs }}
    {{/if}}
{{/ if }}
{{# if page.isPageTypeOperationInput }}
{{> templates/flutter/lib/ui/pages/pagetypesfragments/operationinputpagestore.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeOperationOutput }}
{{> templates/flutter/lib/ui/pages/pagetypesfragments/operationoutputpagestore.dart.hbs }}
{{/ if }}


class {{ fqClass page.name }}Page extends StatefulWidget {
    static const String title = '{{ page.label }}';

{{# if page.isPageTypeDashboard }}
    {{# if page.relationType.isCollection }}
{{> templates/flutter/lib/ui/pages/pagetypesfragments/tablepagefragment.dart.hbs }}
    {{ else }}
{{> templates/flutter/lib/ui/pages/pagetypesfragments/dashboardpagefragment.dart.hbs }}
    {{/if}}
{{/ if }}
{{# if page.isPageTypeTable }}
{{> templates/flutter/lib/ui/pages/pagetypesfragments/tablepagefragment.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeView }}
{{> templates/flutter/lib/ui/pages/pagetypesfragments/viewpagefragment.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeCreate }}
{{> templates/flutter/lib/ui/pages/pagetypesfragments/createpagefragment.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeUpdate }}
{{> templates/flutter/lib/ui/pages/pagetypesfragments/editpagefragment.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeOperationInput }}
{{> templates/flutter/lib/ui/pages/pagetypesfragments/operationinputpagefragment.dart.hbs }}
{{/ if }}
{{# if page.isPageTypeOperationOutput }}
{{> templates/flutter/lib/ui/pages/pagetypesfragments/operationoutputpagefragment.dart.hbs }}
{{/ if }}

    {{# if (isInputWidgetMapNeed page) }}
    var inputWidgetKeyMap = {
    {{# each (getInputWidgets page.containers.[0]) as |input|}}
        '{{ variable input.name }}' : GlobalKey(),
    {{/each}}
    };
    {{/ if }}

    @override
    Widget build(BuildContext context) {

        {{# if page.isPageTypeTable}}
            {{# each page.containers.[0].tables as |table| }}
                {{# if table.pageDefinition.relationType.isFilterable }}
        filterStoreWidgetMap = {
                    {{# each table.filters as |filter|}}
                        {{# each filter.attributeType.dataType.operator.members as |filterOperator|}}
                            {{# each (likeOperationHelperList filterOperator) as |likeOperator| }}
            {{fqVariable page.name}}PageStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{# if (isFilterOperationLike filterOperator)}}{{ fqClass likeOperator }}{{ else }}{{ className filterOperator.name }}{{/ if }}Filter'] :
                                {{# if (isStringType filter.attributeType.dataType) }}
                JudoInputText(
                    col: 1,
                    label: {{fqVariable page.name}}PageStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{# if (isFilterOperationLike filterOperator)}}{{ fqClass likeOperator }}{{ else }}{{ className filterOperator.name }}{{/ if }}Filter'].getWidgetLabel(context),
                    onChanged: (value) => {{fqVariable page.name}}PageStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{# if (isFilterOperationLike filterOperator)}}{{ fqClass likeOperator }}{{ else }}{{ className filterOperator.name }}{{/ if }}Filter'].setFilterValue({{# if (isFilterOperationLike filterOperator)}}{{# if (isFilterOperationTypeLikeContain likeOperator) }}'%' + {{/ if }}value + '%'{{ else }}value{{/ if }}),
                ),
                                {{/ if }}
                                {{~# if (isNumericType filter.attributeType.dataType) }}
                JudoNumericInput(
                    col: 1,
                    label: {{fqVariable page.name}}PageStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].getWidgetLabel(context),
                    onChanged: (value) => {{fqVariable page.name}}PageStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].setFilterValue({{ dartType filter.attributeType.dataType }}.parse(value)),
                ),
                                {{/ if }}
                                {{~# if (isDateType filter.attributeType.dataType) }}
                JudoDateInput(
                    col: 1,
                    label: {{fqVariable page.name}}PageStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].getWidgetLabel(context),
                    onChanged: (value) => {{fqVariable page.name}}PageStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].setFilterValue(value),
                ),
                                {{/ if }}
                                {{~# if (isTimestampType filter.attributeType.dataType) }}
                JudoDateTimeInput(
                    col: 1,
                    label: {{fqVariable page.name}}PageStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].getWidgetLabel(context),
                    onChanged: (value) => {{fqVariable page.name}}PageStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].setFilterValue(value),
                ),
                                {{/ if }}
                                {{~# if (isBooleanType filter.attributeType.dataType) }}
                Observer(
                    builder: (_) => JudoSwitch(
                        col: 1,
                        label: {{fqVariable page.name}}PageStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].getWidgetLabel(context),
                        initialValue: {{fqVariable page.name}}PageStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].filterValue,
                        onChanged: (value) => {{fqVariable page.name}}PageStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].setFilterValue(value),
                    )
                ),
                                {{/ if }}
                                {{~# if (isEnumType filter.attributeType.dataType) }}
                Observer(
                    builder: (_) => JudoComboBox<{{ className filter.attributeType.dataType.name }}>(
                        col: 1,
                        label: {{fqVariable page.name}}PageStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].getWidgetLabel(context),
                        onChanged: (value) => {{fqVariable page.name}}PageStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].setFilterValue(value),
                        items: {{ className filter.attributeType.dataType.name }}.values,
                        dropdownMenuShow: (value) => new DropdownMenuItem<{{ className filter.attributeType.dataType.name }}>(
                            value: value,
                            child: new Text(value.toString().split('.').last)
                        ),
                    )
                ),
                                {{/ if }}
                            {{/ each }}
                        {{/each}}
                    {{/ each }}
        };
                {{/ if }}
            {{/ each }}
        {{/if}}

        {{# if (isSingleRelationDashboardPage page)  }}
        {{> templates/flutter/lib/ui/pages/pagetypesfragments/dashboardlayoutbuilder.dart.hbs }}
        {{else}}
        return LayoutBuilder(builder: (context, constraints) {
                    {{#each page.containers as |pageContainer|}}
                    {{#unless pageContainer.layoutType.original}}
                    if (MediaQuery.of(context).size.width >= {{pageContainer.layoutType.minimumResolution}} && MediaQuery.of(context).size.width <= {{pageContainer.layoutType.maximumResolution}}) {
                        return get{{ fqClass page.name }}Page{{fqClass pageContainer.layoutType.name}}Body(context

                            {{~# if page.isPageTypeDashboard ~}}
                            , {{fqVariable page.name}}PageStore
                            {{~/ if ~}}

                            {{~# if page.isPageTypeTable ~}}
                                {{~# unless page.dataElement.isAccess ~}}
                            , owner{{ className page.dataElement.owner.name }}Store
                                {{~/ unless ~}}
                            , {{fqVariable page.name}}PageStore
                                {{~# if page.dataElement.isFilterable ~}}
                            , filterStoreWidgetMap
                                {{~/ if ~}}
                            {{~/ if ~}}

                            {{~# if page.isPageTypeView ~}}
                            , target{{ className page.dataElement.target.name }}Store
                                {{~# unless page.dataElement.isAccess ~}}
                            , owner{{ className page.dataElement.owner.name }}Store
                                {{~/ unless ~}}
                            , {{fqVariable page.name}}PageStore
                            {{~/ if ~}}

                            {{~# if page.isPageTypeUpdate ~}}
                            , target{{ className page.dataElement.target.name }}Store, {{fqVariable page.name}}PageStore
                            {{~/ if ~}}

                            {{~# if page.isPageTypeCreate ~}}
                            , target{{ className page.dataElement.target.name }}Store
                                {{~# unless page.dataElement.isAccess ~}}
                            , owner{{ className page.dataElement.owner.name }}Store
                                {{~/ unless ~}}
                            , {{fqVariable page.name}}PageStore
                            {{~/ if ~}}

                            {{~# if page.isPageTypeOperationInput ~}}
                            , target{{ className page.dataElement.target.name }}Store
                            , {{fqVariable page.name}}PageStore
                            {{~/ if ~}}

                            {{~# if page.isPageTypeOperationOutput ~}}
                            , target{{ className page.dataElement.target.name }}Store
                            , {{fqVariable page.name}}PageStore
                            {{~/ if ~}}

                            {{~# if (isInputWidgetMapNeed page) ~}}
                            , inputWidgetKeyMap
                            {{~/ if ~}}
                        );
                    }
                    {{/unless}}
                    {{/each}}
                    return get{{ fqClass page.name }}Page{{fqClass application.defaultLayoutType.name}}Body(context

                        {{~# if page.isPageTypeDashboard ~}}
                        , {{fqVariable page.name}}PageStore
                        {{~/ if ~}}

                        {{~# if page.isPageTypeTable ~}}
                        {{~# unless page.dataElement.isAccess ~}}
                        , owner{{ className page.dataElement.owner.name }}Store
                        {{~/ unless ~}}
                        , {{fqVariable page.name}}PageStore
                            {{~# if page.dataElement.isFilterable ~}}
                        , filterStoreWidgetMap
                            {{~/ if ~}}
                        {{~/ if ~}}

                        {{~# if page.isPageTypeView ~}}
                        , target{{ className page.dataElement.target.name }}Store
                        {{~# unless page.dataElement.isAccess ~}}
                        , owner{{ className page.dataElement.owner.name }}Store
                        {{~/ unless ~}}
                        , {{fqVariable page.name}}PageStore
                        {{~/ if ~}}

                        {{~# if page.isPageTypeUpdate ~}}
                        , target{{ className page.dataElement.target.name }}Store, {{fqVariable page.name}}PageStore
                        {{~/ if ~}}

                        {{~# if page.isPageTypeCreate ~}}
                        , target{{ className page.dataElement.target.name }}Store
                        {{~# unless page.dataElement.isAccess ~}}
                        , owner{{ className page.dataElement.owner.name }}Store
                        {{~/ unless ~}}
                        , {{fqVariable page.name}}PageStore
                        {{~/ if ~}}

                        {{~# if page.isPageTypeOperationInput ~}}
                        , target{{ className page.dataElement.target.name }}Store
                        , {{fqVariable page.name}}PageStore
                        {{~/ if ~}}

                        {{~# if page.isPageTypeOperationOutput ~}}
                        , target{{ className page.dataElement.target.name }}Store
                        , {{fqVariable page.name}}PageStore
                        {{~/ if ~}}

                        {{~# if (isInputWidgetMapNeed page) ~}}
                        , inputWidgetKeyMap
                        {{~/ if ~}}
                    );
        });
        {{/ if }}
    }
}
