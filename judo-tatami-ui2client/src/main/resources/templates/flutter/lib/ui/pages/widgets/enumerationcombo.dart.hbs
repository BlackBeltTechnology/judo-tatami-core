{{~ log 'Enumeration combo generation for' (variable application.name) '-' (fqClass page.name)'page' label level='debug' }}
//START xmi:id="{{ getXMIID this }}" enumerationcombo.dart.hbs-----{{ page.name }}----------------------------------------------------------------------------------------
{{# if (isViewTypePage page) }}
Observer(
    builder: (_) => JudoComboBox<{{ className attributeType.dataType.name }}>(
        key: UniqueKey(),
        col: {{ col }},
        row: {{ row }},
      {{# if this.isIconVisible }}
        icon: Icon(getIconByString("{{ this.icon.name }}")),
      {{/ if }}
      {{# if this.isLabelVisible }}
        label: AppLocalizations.of(context).lookUpValue(context, '{{ label }}'),
      {{/ if }}
        inCard: {{ isInCard }},
        disabled: {{ disabled }}{{# if enabledBy }} || !((targetStore?.{{ variable enabledBy.name }}) ?? false){{/ if }},
        items: {{ className attributeType.dataType.name }}.values,
        value: targetStore.{{ variable attributeType.name }},
        dropdownMenuShow: (value) => new DropdownMenuItem<{{ className attributeType.dataType.name }}>(
            value: value,
            child: new Text(AppLocalizations.of(context).lookUpValue(context, value.toString().split('.').last))
        ),
        readOnly: true,
    )
),
{{/ if }}

{{# if (isCreateTypePage page) }}
Observer(
    builder: (_) => JudoComboBox<{{ className attributeType.dataType.name }}>(
        key: inputWidgetKeyMap['{{ name }}'],
        col: {{ col }},
        row: {{ row }},
      {{# if item.isIconVisible }}
        icon: Icon(getIconByString("{{ this.icon.name }}")),
      {{/ if }}
      {{# if this.isLabelVisible }}
        label: AppLocalizations.of(context).lookUpValue(context, '{{ label }}'),
      {{/ if }}
        inCard: {{ isInCard }},
        disabled: {{ disabled }}{{# if enabledBy }} || !((targetStore?.{{ variable enabledBy.name }}) ?? false){{/ if }},
        items: {{ className attributeType.dataType.name }}.values,
        value: targetStore.{{ variable attributeType.name }},
        onChanged: (value) => targetStore.set{{ className attributeType.name }}(value),
        dropdownMenuShow: (value) => new DropdownMenuItem<{{ className attributeType.dataType.name }}>(
            value: value,
            child: new Text(AppLocalizations.of(context).lookUpValue(context, value.toString().split('.').last))
        ),
        readOnly: {{ attributeType.isReadOnly }},
    )
),
{{/ if }}

{{# if page.isPageTypeUpdate }}
Observer(
    builder: (_) => JudoComboBox<{{ className attributeType.dataType.name }}>(
        key: inputWidgetKeyMap['{{ name }}'],
        col: {{ col }},
        row: {{ row }},
      {{# if item.isIconVisible }}
        icon: Icon(getIconByString("{{ this.icon.name }}")),
      {{/ if }}
      {{# if this.isLabelVisible }}
        label: AppLocalizations.of(context).lookUpValue(context, '{{ label }}'),
      {{/ if }}
        inCard: {{ isInCard }},
        disabled: {{ disabled }}{{# if enabledBy }} || !((targetStore?.{{ variable enabledBy.name }}) ?? false){{/ if }},
        items: {{ className attributeType.dataType.name }}.values,
        value: targetStore.{{ variable attributeType.name }},
        onChanged: (value) => targetStore.set{{ className attributeType.name }}(value),
        dropdownMenuShow: (value) => new DropdownMenuItem<{{ className attributeType.dataType.name }}>(
            value: value,
            child: new Text(AppLocalizations.of(context).lookUpValue(context, value.toString().split('.').last))
        ),
        readOnly: {{ attributeType.isReadOnly }},
    )
),
{{/ if }}
//END enumerationcombo.dart.hbs-----{{ page.name }}------------------------------------------------------------------------------------------
