{{~ log 'Text area input field generation for' (variable application.name) '-' (fqClass page.name)'page'(variable page.dataElement.target.name) attributeType.name level='debug' ~}}
//START textarea.dart.hbs-----{{page.dataElement.target.name}}-----------------------------------------------------------------------------
{{#if (isViewTypePage page) }}
Observer(
    builder: (_) => JudoInputText(
        key: UniqueKey(),
        col: {{ col }},
        row: {{ row }},
        multiline: true,
        inCard: {{ isInCard }},
        maxLength: {{attributeType.dataType.maxLength}} ?? 250,
        disabled: {{ disabled }}{{# if enabledBy }} || !((target{{ className page.relationType.target.name }}Store?.{{ variable enabledBy.name }}) ?? false){{/ if }},
      {{#if this.isLabelVisible }}
        label: AppLocalizations.of(context).lookUpValue(context, '{{ this.label }}'),
      {{/if}}
      {{#if this.isIconVisible }}
        icon: Icon(getIconByString("{{ this.icon.name }}")),
      {{/if}}
        initialValue: target{{ className page.dataElement.target.name }}Store.{{ variable attributeType.name }},
        readOnly: true,
    )
),
{{/if}}

{{#if (isCreateTypePage page) }}
{{# if enabledBy }}Observer(
    builder: (_) => {{/ if }}JudoInputText(
        key: inputWidgetKeyMap['{{ name }}'],
        col: {{ col }},
        row: {{ row }},
        mandatory: {{ attributeType.isRequired }},
        multiline: true,
        inCard: {{ isInCard }},
        maxLength: {{attributeType.dataType.maxLength}} ?? 250,
        disabled: {{ disabled }}{{# if enabledBy }} || !((target{{ className page.relationType.target.name }}Store?.{{ variable enabledBy.name }}) ?? false){{/ if }},
      {{#if this.isLabelVisible }}
        label: AppLocalizations.of(context).lookUpValue(context, '{{ this.label }}'),
      {{/if}}
      {{#if this.isIconVisible }}
        icon: Icon(getIconByString("{{ this.icon.name }}")),
      {{/if}}
        onChanged: (value) => target{{ className page.dataElement.target.name }}Store.set{{ className attributeType.name }}(value.toString()),
        readOnly: {{attributeType.isReadOnly}},
    ){{# if enabledBy }}
){{/ if }},
{{/if}}

{{#if page.isPageTypeUpdate}}
{{# if enabledBy }}Observer(
    builder: (_) => {{/ if }}JudoInputText(
        key: inputWidgetKeyMap['{{ name }}'],
        col: {{ col }},
        row: {{ row }},
        mandatory: {{ attributeType.isRequired }},
        multiline: true,
        inCard: {{ isInCard }},
        maxLength: {{attributeType.dataType.maxLength}} ?? 250,
        disabled: {{ disabled }}{{# if enabledBy }} || !((target{{ className page.relationType.target.name }}Store?.{{ variable enabledBy.name }}) ?? false){{/ if }},
      {{#if this.isLabelVisible }}
        label: AppLocalizations.of(context).lookUpValue(context, '{{ this.label }}'),
      {{/if}}
      {{#if this.isIconVisible }}
        icon: Icon(getIconByString("{{ this.icon.name }}")),
      {{/if}}
        initialValue: target{{ className page.dataElement.target.name }}Store.{{ variable attributeType.name }},
        onChanged: (value) => target{{ className page.dataElement.target.name }}Store.set{{ className attributeType.name }}(value.toString()),
        readOnly: {{attributeType.isReadOnly}},
    ){{# if enabledBy }}
){{/ if }},
{{/if}}
//END textarea.dart.hbs-----{{page.dataElement.target.name}}-------------------------------------------------------------------------------
