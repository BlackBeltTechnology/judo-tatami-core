{{ log 'Stored aggregation action generation for' (variable application.name) '-' (fqClass page.name)'page'(variable relation.name)'relation' level='debug' }}
//START input_page_stored_aggregation_actions.dart.hbs-----{{ relaltion.name }}---------------------------------------------------------------------------------
// {{ className relation.name }} stored aggregation in-memory actions

@observable
ObservableFuture {{ variable relation.owner.name }}{{ fqClass relation.name }}StoreFuture;

{{# if relation.isCollection }}
@action
Future<List<{{ storeClassName relation.target.name }}>> add{{ fqClass relation.name }}({{ storeClassName relation.owner.name }} ownerStore, List<{{ storeClassName relation.target.name }}> selectedStore) async {
    try {
        ownerStore.{{ variable relation.name }}.addAll(selectedStore);
        return ownerStore.{{ variable relation.name }};
    } on ApiException catch (error) {
        errorMessage = "Could not add {{ relation.name }}";
        throw error;
    }
}

@action
Future<void> remove{{ fqClass relation.name }}({{ storeClassName relation.owner.name }} ownerStore, {{ storeClassName relation.target.name }} selectedStore) async {
    try {
        errorMessage = null;
        ownerStore.{{ variable relation.name }}.remove(selectedStore); // TODO: fix with remove more than 1 element
    } on ApiException catch (error) {
        errorMessage = "Could not remove {{ relation.name }}";
        throw error;
    }
}

{{/ if }}
@action
    Future<void> set{{ fqClass relation.name }}({{ storeClassName relation.owner.name }} ownerStore, {{# if relation.isCollection }}List<{{ storeClassName relation.target.name }}>{{ else }}{{ storeClassName relation.target.name }}{{/ if }} selectedStore) async {
    try {
        errorMessage = null;
        ownerStore.{{ variable relation.name }} = {{# if relation.isCollection }}selectedStore.asObservable(){{ else }}selectedStore{{/ if }};
    } on ApiException catch (error) {
        errorMessage = "Could not set {{ relation.name }}";
        throw error;
    }
}

@action
Future<void> unset{{ fqClass relation.name }}({{ storeClassName relation.owner.name }} ownerStore) async {
    try {
        errorMessage = null;
        ownerStore.{{ variable relation.name }} = null;
    } on ApiException catch (error) {
        errorMessage = "Could not unset {{ relation.name }}";
        throw error;
    }
}

//END input_page_stored_aggregation_actions.dart.hbs-----{{ relaltion.name }}-----------------------------------------------------------------------------------
