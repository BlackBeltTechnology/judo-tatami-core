{{ log 'Aggregation action button generation for' (variable application.name) '-' (fqClass page.name)'page'(variable relation.name)'relation' level='debug' ~}}
{{# if addDebugToTemplate }}//START aggregationAction.dart.hbs-----{{ relation.name }}-----------------------------------------------------------------------------------{{/ if }}
{{# if (isObserverButton this page.dataElement action) }}Observer(
    builder: (_) => {{/ if }}JudoButton(
        col: {{ col }},
        {{# neq row 1.0 }}row: {{ row }},{{/ neq }}
        {{# if disabled }}
            disabled: true,
        {{ else if enabledBy }}
            disabled: !((targetStore?.{{ variable enabledBy.name }}) ?? false),
        {{/if}}
    {{# if action.isBackAction }}
        onPressed: () => navigation.close(),
    {{/ if }}
    {{# if action.isCreateAction }}
        onPressed:{{# unless relation.isAccess }}{{# unless relation.isRelationKindStatic }} targetStore.internal__updatable ?{{/ unless }}{{/ unless }} () async {
            var created = await navigation.open(Routes.{{ pageClassVariableName action.target }}{{# unless relation.isAccess }},
            arguments: {{ pageArgumentsClassName action.target }}(ownerStore: targetStore, validatable: pageStore.validatable){{~/ unless }});
            if (created != null) {
                pageStore.create{{ fqClass relation.name }}({{# unless relation.isAccess }}targetStore ,{{/ unless }}created)
                .catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
            }
        }{{# unless relation.isAccess }}{{# unless relation.isRelationKindStatic }} : null{{/ unless }}{{/ unless }},
    {{/ if }}
    {{# if action.isAddAction }}
        onPressed:{{# unless relation.isAccess }}{{# unless relation.isRelationKindStatic }} targetStore.internal__updatable ?{{/ unless }}{{/ unless }} () async {
            var selected =
            {{> flutter/lib/ui/pages/widgets/dialog.dart.hbs relation=relation addDialog=true }}
            if (selected != null) {
        {{# if relation.isRelationBehaviourTypeAddable }}
                pageStore.add{{ fqClass relation.name }}(targetStore, selected)
                    .catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
        {{ else }}
            var temporaryList = List<{{ storeClassName relation.target }}>.from(targetStore.{{ variable relation.name }})
                ..addAll(selected);
            targetStore.set{{ fqClass relation.name }}(temporaryList);
        {{/ if }}
            }
        }{{# unless relation.isAccess }}{{# unless relation.isRelationKindStatic }} : null{{/ unless }}{{/ unless }},
    {{/ if }}
    {{# if action.isSetAction }}
        onPressed:{{# unless relation.isAccess }}{{# unless relation.isRelationKindStatic }} targetStore.internal__updatable ?{{/ unless }}{{/ unless }} () async {
            var selected =
            {{> flutter/lib/ui/pages/widgets/dialog.dart.hbs relation=relation }}
            if (selected != null) {
        {{# if relation.isRelationBehaviourTypeSetable }}
                pageStore.set{{ fqClass relation.name }}(targetStore, selected)
                    .catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
        {{ else }}
                targetStore.set{{ fqClass relation.name }}(selected);
        {{/ if }}
            }
        }{{# unless relation.isAccess }}{{# unless relation.isRelationKindStatic }} : null{{/ unless }}{{/ unless }},
    {{/ if }}
    {{# if action.isUnsetAction }}
        onPressed:{{# unless page.relationType.isAccess }}{{# unless page.relationType.isRelationKindStatic }} targetStore.internal__updatable ?{{/ unless }}{{/ unless }} () async {
            pageStore.unset{{ fqClass page.relationType.name }}(targetStore)
                .catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
        }{{# unless page.relationType.isAccess }}{{# unless page.relationType.isRelationKindStatic }} : null{{/ unless }}{{/ unless }},
    {{/ if }}
    {{# if action.isNavigationToPageAction }}
        onPressed: () async {
            await navigation.open(Routes.{{ pageClassVariableName action.target }},
            arguments: {{ pageArgumentsClassName action.target }}(ownerStore: targetStore));
        },
    {{/ if }}
    {{# if this.isLabelVisible }}
        label: AppLocalizations.of(context).lookUpValue(context, '{{ this.label }}'),
    {{/ if }}
    {{# if this.isIconVisible }}
        icon: Icon(getIconByString('{{ this.icon.name }}')),
    {{/ if }}
    ){{# if (isObserverButton this page.dataElement action) }}
){{/ if }},
{{# if addDebugToTemplate }}//END aggregationAction.dart.hbs-----{{ relation.name }}-------------------------------------------------------------------------------------{{/ if }}
