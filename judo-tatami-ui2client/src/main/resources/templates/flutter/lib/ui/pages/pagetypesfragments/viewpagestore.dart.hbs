class {{ fqClass page.name }}PageStore extends _{{ fqClass page.name }}PageStore with _${{ fqClass page.name }}PageStore {}

abstract class _{{ fqClass page.name }}PageStore with Store {
    {{# with page.relationType as |relation| }}
        {{ fqClass relation.owner.name }}{{ fqClass relation.name }}Repository _{{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Repository = locator<{{ fqClass relation.owner.name }}{{ fqClass relation.name }}Repository>();

    @observable
    String errorMessage;

    @observable
    ObservableFuture {{ relation.name }}StoreFuture;

    {{# with relation.behaviour as |selfbehaviour| }}
    {{# if selfbehaviour.updateable }}
    @action
    Future<{{ fqClass relation.target.name }}Store> update{{ fqClass relation.name }}({{ fqClass relation.target.name }}Store {{ fqVariable relation.target.name }}Store) async {
        try {
            errorMessage = null;
            {{ relation.name }}StoreFuture = ObservableFuture(_{{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Repository.{{ fqVariable relation.target.name }}Update({{ fqVariable relation.target.name }}Store));
            return await {{relation.name}}StoreFuture;
        } on ApiException {
            errorMessage = "Could not update {{ relation.name }}";
        }
    }
    {{/ if }}

    {{# if selfbehaviour.deletable }}
    @action
    Future<void> delete{{ fqClass relation.name }}({{ fqClass relation.target.name }}Store {{ fqVariable relation.target.name }}Store) async {
        try {
            errorMessage = null;
            {{ relation.name }}StoreFuture =
            ObservableFuture(_{{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Repository.{{ fqVariable relation.target.name }}Delete({{ fqVariable relation.target.name }}Store));
            await {{ relation.name }}Future;
        } on ApiException {
            errorMessage = "Could not delete {{ relation.name }}";
        }
    }
    {{/ if }}
    {{/ with }}
    {{/ with }}
}
