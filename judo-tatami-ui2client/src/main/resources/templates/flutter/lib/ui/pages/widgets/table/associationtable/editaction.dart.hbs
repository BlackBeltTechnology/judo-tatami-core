navigateToEditPageAction:{{# unless relation.isAccess }} ownerStore.internal__updatable ?{{/ unless }} (element) async {
    {{ storeClassName relationType.target }} cloned = {{ storeClassName relationType.target }}();
    cloned.updateWith(element);
    var res = await navigation.open(Routes.{{ pageClassVariableName action.target }},
        arguments: {{ pageArgumentsClassName action.target }}(targetStore: cloned));
    if (res != null) {
        element.updateWith(cloned);
        var updated = await pageStore.update{{ className relation.target.name }}(element)
            .catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
        if (updated != null) {
            element.updateWith(updated);
            pageStore.get{{ fqClass relation.name }}({{# unless relation.isAccess }}ownerStore{{/ unless }})
                .catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
        }
    }
}{{# unless relation.isAccess }}{{# unless relation.isRelationKindStatic }} : null{{/ unless }}{{/ unless }},
