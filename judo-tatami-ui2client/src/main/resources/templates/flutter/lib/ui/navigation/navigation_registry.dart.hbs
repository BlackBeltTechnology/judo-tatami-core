{{ log 'Navigation registry generation for' (variable application.name) level='info' }}
//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}

import 'package:injectable/injectable.dart';
import 'page_navigation.dart';
import '../pages/package.dart';
import 'navigation_store.dart';
import '../routes/router.gr.dart';

@lazySingleton
class NavigationRegistry {
{{# each layout.pageContainers as |container| }}
    {{# with container.owner as |page| }}
    {{# with page.relationType as |relation| }}
        {{# if page.dataElement.isAccess }}
            {{# unless page.dataElement.isCollection }}
    PageNavigation {{ pageClassVariableName page.name }} = PageNavigation(
        route: Routes.{{ pageClassVariableName page.name }},
        isAccess: true,
        pageType:
            {{~# if page.isPageTypeDashboard ~}}
                PageType.View
            {{~/ if ~}}
            {{~# if page.isPageTypeView ~}}
                PageType.View
            {{~/ if ~}}
            {{~# if page.isPageTypeCreate ~}}
                PageType.Create
            {{~/ if ~}}
            {{~# if page.isPageTypeUpdate ~}}
                PageType.Edit
            {{~/ if ~}}
            {{~# if page.isPageTypeTable ~}}
                PageType.Table
            {{~/ if ~}},
        page: {{ pageClassName page.name }},
        crudFunctions: {
            Crud.Read: {{# if relation.isRelationBehaviourTypeListable }}NavigationStore().get{{ fqClass relation.name }}{{ else }}null{{/ if }},
            Crud.Create: {{# if relation.isRelationBehaviourTypeCreatable }}NavigationStore().create{{ fqClass relation.name }}{{ else }}null{{/ if }},
            Crud.Delete: {{# if relation.isRelationBehaviourTypeDeletable }}NavigationStore().delete{{ fqClass relation.target.name }}{{ else }}null{{/ if }},
            Crud.Update: {{# if relation.isRelationBehaviourTypeUpdatable }}NavigationStore().update{{ fqClass relation.target.name }}{{ else }}null{{/ if }},
        }
    );
            {{/ unless }}
        {{/ if }}
    {{/ with }}
    {{/ with }}
{{/ each }}

  NavigationRegistry() {
    init();
  }

  void init() {
    {{# each layout.pageContainers as |container| }}
        {{# with container.owner as |page| }}
        {{# with page.relationType as |relation| }}
                {{# if page.dataElement.isAccess }}
                    {{# unless page.dataElement.isCollection }}
    {{ pageClassVariableName page.name }}.setPages(
        {{# each (getPagesByRelation application.pages page.dataElement) as |relationPage| }}
                {{# if relationPage.isPageTypeView }}
                    {{# if page.isPageTypeDashboard }}
        viewPage: {{ pageClassVariableName page.name }},
                    {{ else }}
        viewPage: {{ pageClassVariableName relationPage.name }},
                    {{/ if }}
                {{/ if }}
                {{# if relationPage.isPageTypeCreate }}
        createPage: {{ pageClassVariableName relationPage.name }},
                {{/ if }}
                {{# if relationPage.isPageTypeUpdate }}
        editPage: {{ pageClassVariableName relationPage.name }},
                {{/ if }}
                {{# if relationPage.isPageTypeTable }}
        tablePage: {{ pageClassVariableName relationPage.name }},
                {{/ if }}
        {{/ each }}
    );
                    {{/ unless }}
                {{/ if }}
        {{/ with }}
        {{/ with }}
    {{/ each }}
  }

  PageNavigation getPageNavigationByRoute (String route) {
    switch(route) {
    {{# each layout.pageContainers as |container| }}
        {{# with container.owner as |page| }}
            {{# with page.relationType as |relation| }}
                {{# if page.dataElement.isAccess }}
                    {{# unless page.dataElement.isCollection }}
        case Routes.{{ pageClassVariableName page.name }}:
            return {{ pageClassVariableName page.name }};
                    {{/ unless }}
                {{/ if }}
            {{/ with }}
        {{/ with }}
    {{/ each }}
        default:
            return null;
    }
  }

  static Object pageNavigationArgumentObject({PageNavigation pageNavigation, Object target, Object owner}) {
    switch(pageNavigation.route) {
    {{# each layout.pageContainers as |container| }}
        {{# with container.owner as |page| }}
            {{# with page.relationType as |relation| }}
                {{# if page.dataElement.isAccess }}
                    {{# unless page.dataElement.isCollection }}
                        {{# if page.isPageTypeView }}
        case Routes.{{ pageClassVariableName page.name }}:
            return {{ pageArgumentsClassName page.name }}(targetStore: target);
                        {{/ if }}
                    {{/ unless }}
                {{/ if }}
            {{/ with }}
        {{/ with }}
    {{/ each }}
        default:
            return null;
    }

  }

}