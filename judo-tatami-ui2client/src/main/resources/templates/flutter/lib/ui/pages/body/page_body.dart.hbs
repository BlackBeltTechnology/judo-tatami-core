//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}
// Container: {{ container.name }}

part of {{ variable application.name }}.ui.pages.{{variable container.layoutType.name}};

Widget get{{ fqClass page.name }}Page{{fqClass container.layoutType.name}}Body(BuildContext context

        {{~# if page.isPageTypeTable ~}}
        {{~# unless page.dataElement.isAccess ~}}
        , {{ fqClass page.dataElement.owner.name }}Store owner{{ className page.dataElement.owner.name }}Store
        {{~/ unless ~}}
        , {{fqClass page.name}}PageStore {{fqVariable page.name}}PageStore
        {{~/ if ~}}

        {{~# if page.isPageTypeView ~}}
        , {{ fqClass page.dataElement.target.name }}Store target{{ className page.dataElement.target.name }}Store
        {{~# unless page.dataElement.isAccess ~}}
        , {{ fqClass page.dataElement.owner.name }}Store owner{{ className page.dataElement.owner.name }}Store
        {{~/ unless ~}}
        , {{fqClass page.name}}PageStore {{fqVariable page.name}}PageStore
        {{~/ if ~}}

        {{~# if page.isPageTypeUpdate ~}}
        , {{ fqClass page.dataElement.target.name }}Store target{{ className page.dataElement.target.name }}Store, {{fqClass page.name}}PageStore {{fqVariable page.name}}PageStore
        {{~/ if ~}}

        {{~# if page.isPageTypeCreate ~}}
        , {{ fqClass page.dataElement.target.name }}Store target{{ className page.dataElement.target.name }}Store
        {{~# unless page.dataElement.isAccess ~}}
        , {{ fqClass page.dataElement.owner.name }}Store owner{{ className page.dataElement.owner.name }}Store
        {{~/ unless ~}}
        , {{fqClass page.name}}PageStore {{fqVariable page.name}}PageStore
        {{~/ if ~}}

        {{~# if page.isPageTypeOperationInput ~}}
        , {{ fqClass page.dataElement.target.name }}Store target{{ className page.dataElement.target.name }}Store
        , {{fqClass page.name}}PageStore {{fqVariable page.name}}PageStore
        {{~/ if ~}}

        {{~# if page.isPageTypeOperationOutput ~}}
        , {{ fqClass page.dataElement.target.name }}Store target{{ className page.dataElement.target.name }}Store
        , {{fqClass page.name}}PageStore {{fqVariable page.name}}PageStore
        {{~/ if ~}}

    ) {
    final navigation = locator<NavigationState>();

    return SizedBox(
        height: kJudoHeight * {{ row }},
        child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
                JudoColumn(
                    col: {{ col }},
                    row: {{ row }},
                    mainAxisSize: MainAxisSize.min,
                    children: [
                    {{# each this.children as |child| }}
                    {{# if child }}
                        {{> (getWidgetTemplate child) }}
                    {{/ if }}
                    {{/ each }}
                    ],
                )
            ]
        ),
    );
}
