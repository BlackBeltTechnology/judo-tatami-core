{{log 'Page body generation for' (variable application.name) '-' (fqClass page.name)(fqClass container.layoutType.name) level='info'}}
//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}
// Container: {{ container.name }}

part of {{ variable application.name }}.ui.pages.{{variable container.layoutType.name}};

Widget get{{ fqClass page.name }}Page{{fqClass container.layoutType.name}}Body(BuildContext context

        {{~# if page.isPageTypeDashboard ~}}
            {{~# unless page.dataElement.isCollection ~}}
                {{~# if page.dataElement ~}}
        , {{ fqClass page.dataElement.target.name }}Store target{{ className page.dataElement.target.name }}Store
                {{~/ if ~}}
            {{~/ unless ~}}
        , {{fqClass page.name}}PageStore {{fqVariable page.name}}PageStore
            {{~# if (isRefreshTableTypePage page) ~}}
                {{~# if page.dataElement.isFilterable ~}}
        , Map<FilterStore, Widget> filterStoreWidgetMap
                {{~/ if ~}}
            {{~/ if ~}}
        {{~/ if ~}}

        {{~# if page.isPageTypeTable ~}}
            {{~# unless page.dataElement.isAccess ~}}
        , {{ fqClass page.dataElement.owner.name }}Store owner{{ className page.dataElement.owner.name }}Store
            {{~/ unless ~}}
        , {{fqClass page.name}}PageStore {{fqVariable page.name}}PageStore
            {{~# if page.dataElement.isFilterable ~}}
        , Map<FilterStore, Widget> filterStoreWidgetMap
            {{~/ if ~}}
        {{~/ if ~}}

        {{~# if page.isPageTypeView ~}}
        , {{ fqClass page.dataElement.target.name }}Store target{{ className page.dataElement.target.name }}Store
        {{~# unless page.dataElement.isAccess ~}}
        , {{ fqClass page.dataElement.owner.name }}Store owner{{ className page.dataElement.owner.name }}Store
        {{~/ unless ~}}
        , {{fqClass page.name}}PageStore {{fqVariable page.name}}PageStore
        {{~/ if ~}}

        {{~# if page.isPageTypeUpdate ~}}
        , {{ fqClass page.dataElement.target.name }}Store target{{ className page.dataElement.target.name }}Store, {{fqClass page.name}}PageStore {{fqVariable page.name}}PageStore
        {{~/ if ~}}

        {{~# if page.isPageTypeCreate ~}}
        , {{ fqClass page.dataElement.target.name }}Store target{{ className page.dataElement.target.name }}Store
        {{~# unless page.dataElement.isAccess ~}}
        , {{ fqClass page.dataElement.owner.name }}Store owner{{ className page.dataElement.owner.name }}Store
        {{~/ unless ~}}
        , {{fqClass page.name}}PageStore {{fqVariable page.name}}PageStore
        {{~/ if ~}}

        {{~# if page.isPageTypeOperationInput ~}}
        , {{ fqClass page.dataElement.target.name }}Store target{{ className page.dataElement.target.name }}Store
        , {{fqClass page.name}}PageStore {{fqVariable page.name}}PageStore
        {{~/ if ~}}

        {{~# if page.isPageTypeOperationOutput ~}}
        , {{ fqClass page.dataElement.target.name }}Store target{{ className page.dataElement.target.name }}Store
        , {{fqClass page.name}}PageStore {{fqVariable page.name}}PageStore
        {{~/ if ~}}

        {{~# if (isInputWidgetMapNeed page) ~}}
        , Map inputWidgetKeyMap
        {{~/ if ~}}
    ) {
    final navigation = locator<NavigationState>();
    {{# if (isRefreshTableTypePage page) }}
    var addFilterButtonKey = GlobalKey();
    {{/if}}

    return CustomScrollView(
        slivers: [
            SliverFillRemaining(
                hasScrollBody: false,
                child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                        {{# if (isRefreshTableTypePage page) }}Observer(
                            builder: (_) => {{/ if }}JudoColumn(
                                col: {{ multiplyCol col }},
                                row: {{ row }}{{# if (isRefreshTableTypePage page) }} + {{ fqVariable page.name }}PageStore.getPlusRowSize + 1{{/ if }}, // +1 is for the text under table
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                {{# each this.children as |child| }}
                                    {{# if child }}
                                    {{> (getWidgetTemplate child) }}
                                    {{/ if }}
                                {{/ each }}
                                ],
                            ),{{# if (isRefreshTableTypePage page) }}
                        ),{{/ if }}
                    ]
                ),
            )
        ]
    );
}
