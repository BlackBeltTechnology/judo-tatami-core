Observer(builder: (_) {
    switch({{ fqVariable page.targetClassType.name }}Store.{{ fqClass page.targetClassType.name }}StoreFuture.status){
        case FutureStatus.pending:
            return JudoLoadingProgress();
        case FutureStatus.rejected:
            return Container();
        case FutureStatus.fulfilled:
            return JudoTable(
                col: {{col}},
                dataInfo: {{fqClass pageDefinition.name}}{{fqClass name}}Table(),
                rowList: {{ fqVariable page.targetClassType.name }}Store.{{ variable dataElement.name }},
                {{#each this.rowActions as |action|}}
                {{#if (isViewButton action)}}
                navigateToViewPageAction: (element) async {
                    var response = await navigation.open(Routes.{{fqVariable action.target.name}},
                    arguments: {{fqClass action.target.name}}Arguments({{ fqVariable page.targetClassType.name }}Store: element));
                    if (response != null) {
                        {{ fqVariable page.targetClassType.name }}Store.get{{ fqVariable page.targetClassType.name }}();
                    }
                },
                {{/if}}
                {{#if (isRemoveButton action)}}
                removeAction: (element) => {{ fqVariable page.targetClassType.name }}Store.remove{{ fqClass page.targetClassType.name }}({{ fqVariable page.targetClassType.name }}Store, element),
                {{/if}}
                {{/each}}
            );
    }
}),
