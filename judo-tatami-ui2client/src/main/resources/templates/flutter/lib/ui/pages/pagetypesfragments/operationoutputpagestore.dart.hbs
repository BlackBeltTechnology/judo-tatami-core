{{ log 'Pagestore generation for' (variable application.name) '-' (fqClass page.name) level='debug' }}
{{# if addDebugToTemplate }}//START operationoutputpagestore.dart.hbs-----{{ page.name }}--------------------------------------------------------------------------------{{/ if }}
class {{ pageStoreClassName page }} extends _{{ pageStoreClassName page }} with _${{ pageStoreClassName page }} {}

abstract class _{{ pageStoreClassName page }} with Store {
{{# with page.dataElement as |relation| }}
    {{ repositoryClassName application.actor }} _actorRepository = locator<{{ repositoryClassName application.actor }}>();

    PageState pageState = PageState();
    {{# each (getButtonWidgets page.containers.[0]) as |button| }}
        LoadingState {{ variable button.name }}LoadingState;
    {{/ each }}

    _{{ pageStoreClassName page }}(){
        {{# each (getButtonWidgets page.containers.[0]) as |button| }}
            {{ variable button.name }}LoadingState = LoadingState(pageState.setDisabledByLoading);
        {{/ each }}
    }

    @observable
    String errorMessage;

    @observable
    {{ storeClassName relation.target }} targetStore;

    @observable
    ObservableFuture {{ fqVariable relation.name }}StoreFuture;

    // TODO: review that this is necessary in all cases
    bool validatable = false;

    {{# if relation.isRelationBehaviourTypeRefreshable }}
        {{> flutter/lib/ui/pages/pagetypesfragments/operationoutputpagestore/refreshaction.dart.hbs page=page relation=relation }}
    {{/ if }}

    {{# if relation.isRelationBehaviourTypeUpdatable }}
        {{> flutter/lib/ui/pages/pagetypesfragments/operationoutputpagestore/updateaction.dart.hbs page=page relation=relation }}
    {{/ if }}

    {{# if relation.isRelationBehaviourTypeDeletable }}
        {{> flutter/lib/ui/pages/pagetypesfragments/operationoutputpagestore/deleteaction.dart.hbs page=page relation=relation }}
    {{/ if }}

    {{# if relation.isRelationBehaviourTypeCreateValidatable }}
        {{> flutter/lib/ui/pages/pagetypesfragments/operationoutputpagestore/validateaction.dart.hbs page=page relation=relation }}
    {{/ if }}
{{/ with }}

{{# each page.containers.[0].tables as |table| }}
    @observable
    int {{ fqVariable table.dataElement.name }}QueryLimit = ({{ table.row }} - 2).round();

    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/embedded_table_paging_actions.dart.hbs table=table page=page relation=table.dataElement }}

    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/range_actions.dart.hbs page=page relation=table.dataElement table=table }}
{{/ each }}
{{# each page.containers.[0].links as |link| }}
    @observable
    int {{ fqVariable link.dataElement.name }}QueryLimit = 5; // For judo link setter dialog

    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/range_actions.dart.hbs page=page relation=link.dataElement table=link }}
{{/ each }}

{{# each page.dataElement.target.relations as |relation| }}
    {{# unless isRelationKindStatic }}
        {{# unless isRelationKindAssociation }}
    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/embedded_table_order_action.dart.hbs page=page relation=relation}}
        {{/ unless }}
    {{/ unless }}
    {{# unless isMemberTypeTransient }}
        {{# if isRelationKindAggregation }}
    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/aggregationactions.dart.hbs page=page relation=relation }}
        {{/ if }}
        {{# if isRelationKindComposition }}
    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/aggregationactions.dart.hbs page=page relation=relation }}
        {{/ if }}
    {{/ unless }}
{{/ each }}

    //OPERATIONS
    {{# each page.dataElement.target.operations as |operation| }}
    @action
    {{# if operation.output }}Future<{{# if operation.output.isCollection }}List<{{ storeClassName operation.output.target }}>{{ else }}{{ storeClassName operation.output.target }}{{/ if }}>{{ else }}Future<void>{{/ if }} {{ fqVariable operation.owner.name }}{{ className operation.name }}({{# if operation.input }}{{ storeClassName operation.input.target }} targetStore, {{/ if }}{{# if operation.isMapped }}{{ storeClassName operation.owner }} ownerStore{{/ if }}) async {
        try {
            errorMessage = null;
            {{# if operation.output }}return {{/ if }}await _actorRepository.{{ fqVariable operation.owner.name }}{{ className operation.name }}({{# if operation.input }}targetStore, {{/ if }}{{# if operation.isMapped }}ownerStore{{/ if }});
        } on ApiException {
            errorMessage = "Could not call operation {{ operation.name }}";
        }
    }
    {{/ each }}
}
{{# if addDebugToTemplate }}//END operationoutputpagestore.dart.hbs-----{{ page.name }}----------------------------------------------------------------------------------{{/ if }}
