{{ log 'Pagestore generation for' (variable application.name) '-' (fqClass page.name) level='debug' }}
//START operationoutputpagestore.dart.hbs-----{{ page.name }}--------------------------------------------------------------------------------
class {{ pageStoreClassName page }} extends _{{ pageStoreClassName page }} with _${{ pageStoreClassName page }} {}

abstract class _{{ pageStoreClassName page }} with Store {
{{# with page.dataElement as |relation| }}
    {{ repositoryClassName application.actor }} _actorRepository = locator<{{ repositoryClassName application.actor }}>();

    @observable
    String errorMessage;

    @observable
    {{ storeClassName relation.target }} targetStore;

    @observable
    ObservableFuture {{ fqVariable relation.name }}StoreFuture;

    // TODO: review that this is necessary in all cases
    bool validatable = false;

    {{# if relation.isRelationBehaviourTypeRefreshable }}
    @action
    Future<void> refresh{{ className relation.target.name }}({{ storeClassName relation.target }} targetStore) async {
        try {
            errorMessage = null;
            targetStore.updateWith(await _actorRepository.{{ fqVariable relation.target.name }}GetByIdentifier(targetStore));
        } on ApiException catch (error) {
            errorMessage = "Could not refresh {{ variable relation.target.name }}";
            throw error;
        }
    }

    {{/ if }}
    {{# if relation.isRelationBehaviourTypeUpdatable }}
    @action
    Future<{{ storeClassName relation.target }}> update{{ className relation.target.name }}({{ storeClassName relation.target }} targetStore) async {
        try {
            errorMessage = null;
            return await _actorRepository.{{ fqVariable relation.target.name }}Update(targetStore);
        } on ApiException catch (error) {
            errorMessage = "Could not update {{ variable relation.target.name }}";
            throw error;
        }
    }

    {{/ if }}
    {{# if relation.isRelationBehaviourTypeDeletable }}
    @action
    Future<void> delete{{ className relation.target.name }}({{ storeClassName relation.target }} targetStore) async {
        try {
            errorMessage = null;
            await _actorRepository.{{ fqVariable relation.target.name }}Delete(targetStore);
        } on ApiException catch (error) {
            errorMessage = "Could not delete {{ variable relation.name }}";
            throw error;
        }
    }

    {{/ if }}
    {{# if relation.isRelationBehaviourTypeCreateValidatable }}
    @action
    Future<{{ storeClassName relation.target }}> validate({{# unless page.dataElement.isAccess }}{{ storeClassName relation.owner }} ownerStore, {{/ unless }}{{ storeClassName relation.target }} targetStore) async {
        try {
            errorMessage = null;
            return await _actorRepository.{{ fqVariable relation.owner.name }}{{ fqClass relation.name }}ValidateForCreate({{# unless page.dataElement.isAccess }}ownerStore, {{/ unless }}targetStore);
        } on ApiException catch (error) {
            errorMessage = "Could not validate {{ relation.name }}";
            throw error;
        }
    }

    {{/ if }}
{{/ with }}

{{# each page.containers.[0].tables as |table| }}
    @observable
    int {{ fqVariable table.dataElement.name }}QueryLimit = ({{ table.row }} - 2).round();

    {{> templates/flutter/lib/ui/pages/pagetypesfragments/storeactions/embedded_table_paging_actions.dart.hbs table=table page=page relation=table.dataElement }}

    {{> templates/flutter/lib/ui/pages/pagetypesfragments/storeactions/range_actions.dart.hbs page=page relation=table.dataElement table=table }}
{{/ each }}
{{# each page.containers.[0].links as |link| }}
    @observable
    int {{ fqVariable link.dataElement.name }}QueryLimit = 5; // For judo link setter dialog

    {{> templates/flutter/lib/ui/pages/pagetypesfragments/storeactions/range_actions.dart.hbs page=page relation=link.dataElement table=link }}
{{/ each }}

{{# each page.dataElement.target.relations as |relation| }}
    {{# unless isRelationKindStatic }}
        {{# unless isRelationKindAssociation }}
    {{> templates/flutter/lib/ui/pages/pagetypesfragments/storeactions/embedded_table_order_action.dart.hbs page=page relation=relation}}
        {{/ unless }}
    {{/ unless }}
    {{# unless isMemberTypeTransient }}
        {{# if isRelationKindAggregation }}
    {{> templates/flutter/lib/ui/pages/pagetypesfragments/storeactions/aggregationactions.dart.hbs page=page relation=relation }}
        {{/ if }}
        {{# if isRelationKindComposition }}
    {{> templates/flutter/lib/ui/pages/pagetypesfragments/storeactions/aggregationactions.dart.hbs page=page relation=relation }}
        {{/ if }}
    {{/ unless }}
{{/ each }}

    //OPERATIONS
    {{# each page.dataElement.target.operations as |operation| }}
    @action
    {{# if operation.output }}Future<{{# if operation.output.isCollection }}List<{{ storeClassName operation.output.target }}>{{ else }}{{ storeClassName operation.output.target }}{{/ if }}>{{ else }}Future<void>{{/ if }} {{ fqVariable operation.owner.name }}{{ className operation.name }}({{# if operation.input }}{{ storeClassName operation.input.target }} targetStore, {{/ if }}{{# if operation.isMapped }}{{ storeClassName operation.owner }} ownerStore{{/ if }}) async {
        try {
            errorMessage = null;
            {{# if operation.output }}return {{/ if }}await _actorRepository.{{ fqVariable operation.owner.name }}{{ className operation.name }}({{# if operation.input }}targetStore, {{/ if }}{{# if operation.isMapped }}ownerStore{{/ if }});
        } on ApiException {
            errorMessage = "Could not call operation {{ operation.name }}";
        }
    }
    {{/ each }}
}
//END operationoutputpagestore.dart.hbs-----{{ page.name }}----------------------------------------------------------------------------------
