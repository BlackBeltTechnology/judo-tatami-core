//START editpagefragment.dart.hbs-----{{ page.name }}----------------------------------------------------------------------------------------
    final {{ storeClassName page.dataElement.target }} targetStore;
    {{# if (validatableFlagNeed page.dataElement) }}
    final bool validatable;
    {{/ if }}

    const {{ pageClassName page }}({Key key, @required this.targetStore{{# if (validatableFlagNeed page.dataElement) }}, this.validatable{{/ if }} }) : super(key: key);

    @override
    State<StatefulWidget> createState() =>
        _{{ pageStateClassName page }}(targetStore: targetStore{{# if (validatableFlagNeed page.dataElement) }}, validatable: validatable{{/ if }});
}

class _{{ pageStateClassName page }} extends State<{{ pageClassName page }}> {

    final {{ storeClassName page.dataElement.target }} targetStore;
    {{# if (validatableFlagNeed page.dataElement) }}
    final bool validatable;
    {{/ if }}

    final {{ pageStoreClassName page }} pageStore = {{ pageStoreClassName page }}();

    _{{ pageStateClassName page }}({@required this.targetStore{{# if (validatableFlagNeed page.dataElement) }}, this.validatable{{/ if }} }) {
        pageStore.targetStore = targetStore;

        final navigation = locator<NavigationState>();
        SchedulerBinding.instance.addPostFrameCallback((_) {
            navigation.setCurrentTitle(AppLocalizations.of(context).lookUpValue(context, {{ pageClassName page }}.title){{# if page.dataElement.target.representation }} + ' - ${targetStore.{{ variable page.dataElement.target.representation.name }} }'{{/ if }});
        });
        {{# if (validatableFlagNeed page.dataElement) }}
        if (this.validatable != null) {
            pageStore.validatable = this.validatable;
        }
        {{/ if }}
    }
//END editpagefragment.dart.hbs-----{{ page.name }}------------------------------------------------------------------------------------------
