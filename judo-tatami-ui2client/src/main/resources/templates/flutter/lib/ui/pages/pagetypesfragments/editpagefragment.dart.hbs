    final {{ fqClass page.dataElement.target.name }}Store target{{ className page.dataElement.target.name }}Store;
    {{# if (validatableFlagNeed page.dataElement) }}
    final bool validatable;
    {{/ if }}

    const {{fqClass page.name}}Page({Key key, @required this.target{{ className page.dataElement.target.name }}Store{{# if (validatableFlagNeed page.dataElement) }}, this.validatable{{/ if }} }) : super(key: key);

    @override
    State<StatefulWidget> createState() =>
        _{{ fqClass page.name }}PageState(target{{ className page.dataElement.target.name }}Store: target{{ className page.dataElement.target.name }}Store{{# if (validatableFlagNeed page.dataElement) }}, validatable: validatable{{/ if }});
}

class _{{ fqClass page.name }}PageState extends State<{{ fqClass page.name }}Page> {

    final {{ fqClass page.dataElement.target.name }}Store target{{ className page.dataElement.target.name }}Store;
    {{# if (validatableFlagNeed page.dataElement) }}
    final bool validatable;
    {{/ if }}

    final {{fqClass page.name}}PageStore {{fqVariable page.name}}PageStore = {{fqClass page.name}}PageStore();

    _{{fqClass page.name}}PageState({@required this.target{{ className page.dataElement.target.name }}Store{{# if (validatableFlagNeed page.dataElement) }}, this.validatable{{/ if }} })
    {{~# if (validatableFlagNeed page.dataElement) ~}}
    {
        if (this.validatable != null) {
            {{fqVariable page.name}}PageStore.validatable = this.validatable;
        }
    }
    {{~ else ~}}
        ;
    {{/ if }}
