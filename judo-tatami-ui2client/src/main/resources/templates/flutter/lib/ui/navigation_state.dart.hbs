//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}

import 'package:auto_route/auto_route.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_breadcrumb/flutter_breadcrumb.dart';
import 'package:injectable/injectable.dart';
import 'package:{{ modelPackage application.name }}/{{ path application.name }}/ui/routes/router.gr.dart';

@lazySingleton
class NavigationState {
    final navigatorKey = GlobalKey<ExtendedNavigatorState>();
    String currentRoute = Routes.{{ fqVariable application.dashboard.name }}Page;
    final List<BreadCrumbItem> breadcumbItems = [ BreadCrumbItem(content: Icon(Icons.home, color: Colors.white60, size: 16,))];
    final List<String> stack = [];

    String currentTitle = "";

    bool isMenuCollapsed(BuildContext context) {
        {{#each application.layoutTypes as |layoutType|}}
        {{#unless layoutType.original}}
         if (MediaQuery.of(context).size.width >= {{layoutType.minimumResolution}} && MediaQuery.of(context).size.width <={{layoutType.maximumResolution}}) {
            return {{layoutType.menuCollapsed}};
         }
        {{/unless}}
        {{/each}}
        return false;
    }

    void navigateTo(String route) {
        if (currentRoute != route) {
            currentRoute = route;

            breadcumbItems.clear();
            breadcumbItems.add(BreadCrumbItem(content: Icon(Icons.home, color: Colors.white60, size: 16,)));

            stack.clear();
            currentTitle = route;
            navigatorKey.currentState.pushAndRemoveUntil(route, (route) => false);
        }
    }

    @optionalTypeArgs
    Future<T> open<T extends Object>(String routeName,
        {Object arguments,
            Map<String, String> queryParams,
            OnNavigationRejected onReject}) async {

        breadcumbItems.add(
            BreadCrumbItem(
                content: Text(currentTitle,
                    style: TextStyle(
                        color: Colors.white70,
                        fontSize: 14
                    ),
                )
            )
        );

        stack.add(currentTitle);
        currentTitle = routeName;
        return await navigatorKey.currentState.push(routeName,
            arguments : arguments,
            queryParams : queryParams,
            onReject : onReject);
    }

    @optionalTypeArgs
    void close<T extends Object>([T result]) {
        currentTitle = stack.removeLast();
        breadcumbItems.removeLast();
        navigatorKey.currentState.pop<T>(result);
    }
}
