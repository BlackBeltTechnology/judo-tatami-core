//START createpagefragment.dart.hbs-----{{ page.name }}--------------------------------------------------------------------------------------
    {{# unless page.dataElement.isAccess }}
    final {{ storeClassName page.dataElement.owner }} ownerStore;
    {{/ unless }}
    {{# if (validatableFlagNeed page.dataElement) }}
    final bool validatable;
    {{/ if }}

    const {{ pageClassName page }}({ Key key{{# unless page.dataElement.isAccess }}, @required this.ownerStore{{/ unless }}{{# if (validatableFlagNeed page.dataElement) }}, this.validatable{{/ if }} }) : super(key: key);

    {{# unless page.dataElement.isAccess }}
    @override
    _{{ pageStateClassName page }} createState() => _{{ pageStateClassName page }}(ownerStore: ownerStore{{# if (validatableFlagNeed page.dataElement) }}, validatable: validatable{{/ if }});
    {{ else }}
    @override
    _{{ pageStateClassName page }} createState() => _{{ pageStateClassName page }}({{# if (validatableFlagNeed page.dataElement) }}validatable: validatable{{/ if }});
    {{/ unless }}
}

class _{{ pageStateClassName page }} extends State<{{ pageClassName page }}> {

    final {{ storeClassName page.dataElement.target }} targetStore = {{ storeClassName page.dataElement.target }}();
    {{# unless page.dataElement.isAccess }}
    final {{ storeClassName page.dataElement.owner }} ownerStore;
    {{/ unless }}
    {{# if (validatableFlagNeed page.dataElement) }}
    final bool validatable;
    {{/ if }}

    final {{ pageStoreClassName page }} pageStore = {{ pageStoreClassName page }}();
    {{# if page.isPageTypeCreate }}
        {{# if page.relationType.target.isClassBehaviourTypeTemplateable }}
    Future<{{ storeClassName page.relationType.target }}> futureTemplate;

    @override
    void initState() {
        super.initState();
        futureTemplate = pageStore.getDefaults();
    }
        {{/if}}
    {{/ if }}


    _{{ pageStateClassName page }}({{# unless page.dataElement.isAccess }}{ @required this.ownerStore,{{# unless (validatableFlagNeed page.dataElement) }} } {{/ unless }}{{/ unless }}{{# if (validatableFlagNeed page.dataElement) }}{{# if page.dataElement.isAccess }}{ {{/ if }} this.validatable }{{/ if }} ) {
        pageStore.targetStore = targetStore;

        final navigation = locator<NavigationState>();
        SchedulerBinding.instance.addPostFrameCallback((_) {
            navigation.setCurrentTitle(AppLocalizations.of(context).lookUpValue(context, {{ pageClassName page }}.title));
        });
    {{# if (validatableFlagNeed page.dataElement) }}
        if (this.validatable != null) {
            pageStore.validatable = this.validatable;
        }
    {{/ if }}
    }
//END createpagefragment.dart.hbs-----{{ page.name }}----------------------------------------------------------------------------------------
