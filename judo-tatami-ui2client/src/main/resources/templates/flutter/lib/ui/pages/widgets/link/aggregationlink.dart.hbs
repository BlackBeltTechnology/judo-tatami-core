{{~ log 'Link generation for' (variable application.name) '-' (fqClass page.name) (variable dataElement.name) level='debug' ~}}
//START aggregationlink.dart.hbs-----{{dataElement.name}}----------------------------------------------------------------------------------
{{# with dataElement as |relation|}}
Observer(builder: (_) {
    return JudoLink(
        label: AppLocalizations.of(context).lookUpValue(context, '{{ label }}'),
        icon: Icon(Icons.{{ safe iconName 'texture' }}),
        disabled: {{ disabled }},
        {{# if page.isPageTypeView }}
        readOnly: true,
        {{ else }}
            {{# if attributeType.isReadOnly }}
        readOnly: true,
            {{ else }}
        readOnly: false,
            {{/ if }}
        {{/ if }}
        col: {{ multiplyCol col }},
        row: {{ row }},
        formatter: (element) {
            if (element == null) return '';
            var ret = '';
            {{# each link.parts as |part|}}
                {{#if part}}
            if (element.{{ variable part.attributeType.name }} != null) {
                if (ret.length > 0) ret = ret + ' - ';
                ret = ret + ({{> templates/flutter/lib/ui/pages/widgets/link/linkformatter.dart.hbs part=part dataName=(className link.dataElement.target.name) parameterVariable='element' }});
            }
                {{/if}}
            {{/each}}
            return ret;
        },

        data: target{{ className relation.owner.name }}Store.{{variable relation.name}},
        {{#each link.actions as |action|}}
            {{#if action.isSetAction}}
                {{# unless page.isPageTypeView }}
                    {{# unless attributeType.isReadOnly }}
        setAction: target{{ className relation.owner.name }}Store.internal__updatable ? () async {
            var selected =
            {{> templates/flutter/lib/ui/pages/widgets/dialog.dart.hbs relation=relation}}
            if (selected != null) {
                        {{# if relation.isRelationBehaviourTypeSetable }}
                {{fqVariable page.name}}PageStore.set{{ fqClass relation.name }}(target{{ className relation.owner.name }}Store, selected)
                    .catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
                        {{ else }}
                target{{ className relation.owner.name }}Store.set{{ fqClass relation.name }}(selected);
                        {{/ if }}
            }
        } : null,
                    {{/ unless }}
                {{/ unless }}
        {{/if}}
        {{/each}}
        actions: [
        {{#each link.actions as |action|}}
        {{#if action.isViewAction}}
            target{{ className relation.owner.name }}Store.{{variable relation.name}} != null ?
            IconButton(
                icon: Icon(
                    Icons.{{ action.icon.name }},
                    color: false ? JudoComponentsSettings.disabledColor : null,
                ),
                onPressed: () async {
                    var response = await navigation.open(Routes.{{ fqVariable action.target.name }}Page,
                    arguments: {{ fqClass action.target.name }}PageArguments({{# unless relation.isAccess}}owner{{ className relation.owner.name }}Store: target{{ className relation.owner.name }}Store, {{/ unless}}target{{ className relation.target.name }}Store: target{{ className relation.owner.name }}Store.{{variable relation.name}}));
                    {{# unless relation.isMemberTypeTransient }}
                        {{# unless page.isPageTypeOperationOutput}}
                    if (response != null) {
                        {{ fqVariable page.name }}PageStore.refresh{{ className relation.owner.name }}(target{{ className relation.owner.name }}Store)
                            .catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
                    }
                        {{/unless}}
                    {{/ unless }}
                }
            ) : null,
        {{/if}}
        {{#if action.isEditAction}}
            (target{{ className relation.owner.name }}Store.internal__updatable && target{{ className relation.owner.name }}Store.{{variable relation.name}} != null) ?
            IconButton(
                icon: Icon(
                    Icons.{{ action.icon.name }},
                    color: false ? JudoComponentsSettings.disabledColor : null,
                ),
                onPressed:{{# unless relation.isAccess}} target{{ className relation.owner.name }}Store.internal__updatable ?{{/ unless}} () async {
                    {{ fqClass relationType.target.name }}Store cloned = {{ fqClass relationType.target.name }}Store();
                    cloned.updateWith(target{{ className relation.owner.name }}Store.{{variable relation.name}});
                    var res = await navigation.open(Routes.{{ fqVariable action.target.name }}Page,
                    arguments: {{ fqClass action.target.name }}PageArguments(target{{ className relation.target.name }}Store: cloned, validatable: {{ fqVariable page.name }}PageStore.validatable));
                    if (res != null) {
                        target{{ className relation.owner.name }}Store.{{variable relation.name}}.updateWith(cloned);
                        var updated = await {{ fqVariable page.name }}PageStore.update{{ className relation.name }}{{ className relation.target.name }}(target{{ className relation.owner.name }}Store.{{variable relation.name}}, target{{ className relation.owner.name }}Store)
                            .catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
                        {{# if (isValidateHere page) }}
                            {{# unless page.dataElement.isRelationKindAggregation }}
                                {{# unless page.dataElement.isRelationKindComposition }}
                                    {{# unless relation.isMemberTypeTransient }}
                        var validate = await {{ fqVariable page.name }}PageStore.validate({{# unless page.dataElement.isAccess}}owner{{ className page.dataElement.owner.name }}Store, {{/unless}}target{{ className page.dataElement.target.name }}Store)
                            .catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
                        if (validate != null) {
                            target{{ className relation.owner.name }}Store.updateWith(validate);
                        }
                                    {{/unless}}
                                {{/unless}}
                            {{/unless}}
                        {{ else }}
                        if (updated != null) {
                            target{{ className relation.owner.name }}Store.{{variable relation.name}}.updateWith(updated);
                            {{ fqVariable page.name }}PageStore.get{{ fqClass relation.name }}({{# unless relation.isAccess}}target{{ className relation.owner.name }}Store{{/ unless}})
                                .catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
                        }
                        {{/if}}
                    }
                }{{# unless relation.isAccess}} : null{{/ unless}}
            ) : null,
        {{/if}}
        {{#if action.isCreateAction}}
            target{{ className relation.owner.name }}Store.internal__updatable && target{{ className relation.owner.name }}Store.{{variable relation.name}} == null ?
            IconButton(
                icon: Icon(
                    Icons.{{ action.icon.name }},
                    color: false ? JudoComponentsSettings.disabledColor : null,
                ),
                onPressed:{{# unless relation.isAccess}} target{{ className relation.owner.name }}Store.internal__updatable ?{{/ unless}} () async {
                    var created = await navigation.open(Routes.{{ fqVariable action.target.name }}Page{{# unless relation.isAccess}},
                        arguments: {{ fqClass action.target.name }}PageArguments(owner{{ className relation.owner.name }}Store: target{{ className relation.owner.name }}Store, validatable: {{ fqVariable page.name }}PageStore.validatable){{~/ unless}});
                    if (created != null) {
                        {{ fqVariable page.name }}PageStore.create{{ fqClass relation.name }}({{# unless relation.isAccess}}target{{ className relation.owner.name }}Store ,{{/ unless}}created)
                            .catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
                        {{# unless page.isPageTypeUpdate }}
                            {{# unless page.isPageTypeView }}
                                {{# unless page.isPageTypeOperationOutput}}
                                    {{# unless page.dataElement.isRelationKindAggregation }}
                                        {{# unless page.dataElement.isRelationKindComposition }}
                                            {{# unless relation.isMemberTypeTransient }}
                        var validate = await {{ fqVariable page.name }}PageStore.validate({{# unless page.dataElement.isAccess}}owner{{ className page.dataElement.owner.name }}Store, {{/unless}}target{{ className page.dataElement.target.name }}Store)
                        .catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
                        if (validate != null) {
                            target{{ className relation.owner.name }}Store.updateWith(validate);
                        }
                                            {{/unless}}
                                        {{/unless}}
                                    {{/unless}}
                                {{/ unless }}
                            {{/unless}}
                        {{/unless}}
                    }
                }{{# unless relation.isAccess}} : null{{/ unless}}
            ) : null,
        {{/if}}
        {{#if action.isRemoveAction}}
            (target{{ className relation.owner.name }}Store.internal__updatable && target{{ className relation.owner.name }}Store.{{variable relation.name}} != null) ?
            IconButton(
                icon: Icon(
                    Icons.{{ action.icon.name }},
                    color: false ? JudoComponentsSettings.disabledColor : null,
                ),
                onPressed: {{# unless relation.isAccess}} target{{ className relation.owner.name }}Store.internal__updatable ?{{/ unless}} () async => {{fqVariable page.name}}PageStore.remove{{ fqClass relation.name }}(target{{ className relation.owner.name }}Store, target{{ className relation.owner.name }}Store.{{variable relation.name}}){{# unless relation.isAccess}} : null{{/ unless}}
            ) : null,
                {{/if}}
                {{#if action.isDeleteAction}}
            (target{{ className relation.owner.name }}Store.internal__updatable && target{{ className relation.owner.name }}Store.{{variable relation.name}} != null) ?
            IconButton(
                icon: Icon(
                    Icons.{{ action.icon.name }},
                    color: false ? JudoComponentsSettings.disabledColor : null,
                ),
                onPressed:{{# unless relation.isAccess}} target{{ className relation.owner.name }}Store.internal__updatable ?{{/ unless}} () async {
                    {{fqVariable page.name}}PageStore.delete{{ className relation.name }}{{ className relation.target.name }}(target{{ className relation.owner.name }}Store.{{variable relation.name}}{{# unless relation.isAccess}}, target{{ className relation.owner.name }}Store{{/unless}})
                        .catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
                }{{# unless relation.isAccess}} : null{{/ unless}}
            ) : null,
                {{/if}}
                {{#if action.isUnsetAction}}
            (target{{ className relation.owner.name }}Store.internal__updatable && target{{ className relation.owner.name }}Store.{{variable relation.name}} != null) ?
            IconButton(
                icon: Icon(
                Icons.{{ action.icon.name }},
                    color: false ? JudoComponentsSettings.disabledColor : null,
                ),
                onPressed: {{# unless relation.isAccess}}{{# unless relation.isRelationKindStatic}} target{{ className relation.owner.name }}Store.internal__updatable ?{{/ unless}}{{/ unless}} () async {
                    {{# if relation.isRelationBehaviourTypeUnsetable }}
                    {{fqVariable page.name}}PageStore.unset{{ fqClass relation.name }}(target{{ className relation.owner.name }}Store)
                        .catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
                    {{ else }}
                    target{{ className relation.owner.name }}Store.set{{ fqClass relation.name }}(null);
                    {{/ if }}
                }{{# unless relation.isAccess}}{{# unless relation.isRelationKindStatic}}: null{{/ unless}}{{/ unless}}
            ) : null,
        {{/if}}

        {{/each}}
        ],
    );
}),
{{/ with}}
//END aggregationlink.dart.hbs-----{{dataElement.name}}------------------------------------------------------------------------------------
