JudoButton(
    col: 1,
{{# if (isSaveButton this) }}
    onPressed: () => navigation.close({{ fqVariable page.targetClassType.name }}Store),
    icon: Icon(Icons.{{icon.name}}),
    label: '{{label}}',
{{/ if}}
{{# if (isBackButton this) }}
    onPressed: () => navigation.close(),
    icon: Icon(Icons.{{icon.name}}),
{{/ if }}
{{# if (isCreateButton this) }}
    onPressed: () async {
        var created = await navigation.open(Routes.{{ fqVariable instanceAction.target.name }}Page);
        if (created != null) {
            await {{ fqVariable page.name }}PageStore.create{{ fqClass page.relationType.name }}({{# unless page.dataElement.isAccess}}{{ variable page.dataElement.owner.name }}Store ,{{/ unless}}created);
            {{fqVariable page.name}}PageStore.get{{ fqClass page.relationType.name }}({{# unless page.dataElement.isAccess}}{{ variable page.dataElement.owner.name }}Store{{/ unless}});
        }
    },
    label: '{{label}}',
    icon: Icon(Icons.{{icon.name}}),
{{/ if }}
{{# if (isDeleteButton this) }}
    onPressed: () async {
        await {{ fqVariable page.name }}PageStore.delete{{ fqClass page.targetClassType.name }}({{ fqVariable page.targetClassType.name }}Store);
        navigation.close({{ fqVariable page.targetClassType.name }}Store);
    },
    label: '{{label}}',
    icon: Icon(Icons.{{icon.name}}),
{{/ if }}
{{# if (isEditButton this) }}
    onPressed: () async {
        {{ fqClass page.targetClassType.name }}Store cloned = {{ fqClass page.targetClassType.name }}Store();
        cloned.updateWith({{ fqVariable page.targetClassType.name }}Store);
        var ret = await navigation.open(Routes.{{ fqVariable this.target.name }}Page,
        arguments: {{ fqClass this.target.name }}PageArguments({{ fqVariable page.targetClassType.name }}Store: cloned));
        if (ret != null) {
            {{ fqVariable page.targetClassType.name }}Store.updateWith(cloned);
            var updated = await {{ fqVariable page.name }}PageStore.update{{ fqClass page.targetClassType.name }}({{ fqVariable page.targetClassType.name }}Store);
            if (updated != null) {
            {{ fqVariable page.targetClassType.name }}Store.updateWith(updated);
            }
        }
    },
    label: '{{label}}',
    icon: Icon(Icons.{{icon.name}}),
{{/if}}
{{#if (isAddButton this)}}
    onPressed: () async {
        var selected =
            {{> templates/flutter/lib/ui/pages/widgets/dialog.dart.hbs}}
        if (selected != null) {
            {{fqVariable page.name}}PageStore.add{{fqClass page.relationType.name}}({{ variable page.dataElement.owner.name }}Store, selected);
        }
    },
    label: '{{label}}',
    icon: Icon(Icons.{{icon.name}}),
{{/if}}
{{#if (isSetButton this)}}
    onPressed: () async {
        var selected =
            {{> templates/flutter/lib/ui/pages/widgets/dialog.dart.hbs}}
        if (selected != null) {
            {{fqVariable page.name}}PageStore.set{{fqClass page.relationType.name}}({{ variable page.dataElement.owner.name }}Store, selected);
        }
    },
    label: '{{label}}',
    icon: Icon(Icons.{{icon.name}}),
{{/if}}
    rounded: true,
),
