JudoButton(
    col: 1,
{{# if this.isSaveAction }}
    onPressed: () => navigation.close(target{{ className page.dataElement.target.name }}Store),
    icon: Icon(Icons.{{icon.name}}),
    label: '{{label}}',
{{/ if}}
{{# if this.isBackAction }}
    onPressed: () => navigation.close(),
    icon: Icon(Icons.{{icon.name}}),
{{/ if }}
{{# if this.isCreateAction }}
    onPressed:{{# unless page.dataElement.isAccess}}{{# unless page.dataElement.isRelationKindStatic}} owner{{ className page.dataElement.owner.name }}Store.internal__updatable ?{{/ unless}}{{/ unless}} () async {
        var created = await navigation.open(Routes.{{ fqVariable instanceAction.target.name }}Page);
        if (created != null) {
            await {{ fqVariable page.name }}PageStore.create{{ fqClass page.relationType.name }}({{# unless page.dataElement.isAccess}}owner{{ className page.dataElement.owner.name }}Store ,{{/ unless}}created);
            {{fqVariable page.name}}PageStore.get{{ fqClass page.relationType.name }}({{# unless page.dataElement.isAccess}}owner{{ className page.dataElement.owner.name }}Store{{/ unless}});
        }
    }{{# unless page.dataElement.isAccess}}{{# unless page.dataElement.isRelationKindStatic}} : null{{/ unless}}{{/ unless}},
    label: '{{label}}',
    icon: Icon(Icons.{{icon.name}}),
{{/ if }}
{{# if this.isDeleteAction }}
    onPressed:{{# unless page.dataElement.isAccess}}{{# unless page.dataElement.isRelationKindStatic}} owner{{ className page.dataElement.owner.name }}Store.internal__updatable &&{{/ unless}}{{/ unless}} target{{ className page.dataElement.target.name }}Store.internal__deletable ? () async {
        await {{ fqVariable page.name }}PageStore.delete{{ className page.relationType.target.name }}(target{{ className page.dataElement.target.name }}Store);
        navigation.close(target{{ className page.dataElement.target.name }}Store);
    } : null,
    label: '{{label}}',
    icon: Icon(Icons.{{icon.name}}),
{{/ if }}
{{# if (isEditButton this) }}
    onPressed:{{# unless page.dataElement.isAccess}}{{# unless page.dataElement.isRelationKindStatic}} owner{{ className page.dataElement.owner.name }}Store.internal__updatable ?{{/ unless}}{{/ unless}} () async {
        {{ fqClass page.dataElement.target.name }}Store cloned = {{ fqClass page.dataElement.target.name }}Store();
        cloned.updateWith(target{{ className page.dataElement.target.name }}Store);
        var ret = await navigation.open(Routes.{{ fqVariable this.target.name }}Page,
        arguments: {{ fqClass this.target.name }}PageArguments(target{{ className page.dataElement.target.name }}Store: cloned));
        if (ret != null) {
            target{{ className page.dataElement.target.name }}Store.updateWith(cloned);
            var updated = await {{ fqVariable page.name }}PageStore.update{{ className page.relationType.target.name }}(target{{ className page.dataElement.target.name }}Store);
            if (updated != null) {
            target{{ className page.dataElement.target.name }}Store.updateWith(updated);
            }
        }
    }{{# unless page.dataElement.isAccess}}{{# unless page.dataElement.isRelationKindStatic}} : null{{/ unless}}{{/ unless}},
    label: '{{label}}',
    icon: Icon(Icons.{{icon.name}}),
{{/if}}
{{#if this.isAddAction}}
    onPressed:{{# unless page.dataElement.isAccess}}{{# unless page.dataElement.isRelationKindStatic}} owner{{ className page.dataElement.owner.name }}Store.internal__updatable ?{{/ unless}}{{/ unless}} () async {
        var selected =
            {{> templates/flutter/lib/ui/pages/widgets/dialog.dart.hbs}}
        if (selected != null) {
            {{fqVariable page.name}}PageStore.add{{ fqClass page.relationType.name }}(owner{{ className page.dataElement.owner.name }}Store, selected);
        }
    }{{# unless page.dataElement.isAccess}}{{# unless page.dataElement.isRelationKindStatic}} : null{{/ unless}}{{/ unless}},
    label: '{{label}}',
    icon: Icon(Icons.{{icon.name}}),
{{/if}}
{{#if this.isSetAction}}
    onPressed:{{# unless page.dataElement.isAccess}}{{# unless page.dataElement.isRelationKindStatic}} owner{{ className page.dataElement.owner.name }}Store.internal__updatable ?{{/ unless}}{{/ unless}} () async {
        var selected =
            {{> templates/flutter/lib/ui/pages/widgets/dialog.dart.hbs}}
        if (selected != null) {
            {{fqVariable page.name}}PageStore.set{{ fqClass page.relationType.name }}(owner{{ className page.dataElement.owner.name }}Store, selected);
        }
    }{{# unless page.dataElement.isAccess}}{{# unless page.dataElement.isRelationKindStatic}} : null{{/ unless}}{{/ unless}},
    label: '{{label}}',
    icon: Icon(Icons.{{icon.name}}),
{{/if}}
    rounded: true,
),
