{{log 'Instance action button generation for' (variable application.name) '-' (fqClass page.name)'page'(variable page.dataElement.target.name) level='debug'}}
JudoButton(
    col: {{col}},
    disabled: {{disabled}},
{{# if action.isSaveAction }}
    onPressed: () async {
    {{# if page.isPageTypeUpdate }}
        var res = await {{ fqVariable page.name }}PageStore.validate(target{{ className page.relationType.target.name }}Store)
            .catchError((onError) => judoAlert(context: context, title: 'Error', text: onError.toString()));
        if (res != null) {
            navigation.close(target{{ className page.dataElement.target.name }}Store);
        }
    {{/ if }}
    {{# if page.isPageTypeCreate }}
        {{# unless page.dataElement.isRelationKindAggregation }}
            {{# unless page.dataElement.isRelationKindComposition }}
        var res = await {{ fqVariable page.name }}PageStore.validate({{# unless page.dataElement.isAccess}}owner{{ className page.dataElement.owner.name }}Store, {{/unless}}target{{ className page.relationType.target.name }}Store)
            .catchError((onError) => judoAlert(context: context, title: 'Error', text: onError.toString()));
        if (res != null) {
            navigation.close(target{{ className page.dataElement.target.name }}Store);
        }
            {{/ unless }}
        {{/ unless }}
        {{# if page.dataElement.isRelationKindAggregation }}
        navigation.close(target{{ className page.dataElement.target.name }}Store);
        {{/ if }}
        {{# if page.dataElement.isRelationKindComposition }}
        navigation.close(target{{ className page.dataElement.target.name }}Store);
        {{/ if }}
    {{/ if }}
    {{# if page.isPageTypeOperationInput }}
        navigation.close(target{{ className page.dataElement.target.name }}Store);
    {{/if}}
    },
{{/ if}}
{{# if action.isBackAction }}
    onPressed: () => navigation.close(),
{{/ if }}
{{# if action.isCreateAction }}
    onPressed:{{# unless page.dataElement.isAccess}}{{# unless page.dataElement.isRelationKindStatic}} owner{{ className page.dataElement.owner.name }}Store.internal__updatable ?{{/ unless}}{{/ unless}} () async {
        var created = await navigation.open(Routes.{{ fqVariable action.target.name }}Page{{# unless page.dataElement.isAccess}},
            arguments: {{ fqClass action.target.name }}PageArguments(owner{{ className page.dataElement.owner.name }}Store: owner{{ className page.dataElement.owner.name }}Store){{~/ unless}});
        if (created != null) {
            {{ fqVariable page.name }}PageStore.create{{ fqClass page.relationType.name }}({{# unless page.dataElement.isAccess}}owner{{ className page.dataElement.owner.name }}Store ,{{/ unless}}created)
                .catchError((onError) => judoAlert(context: context, title: 'Error', text: onError.toString()));
        }
    }{{# unless page.dataElement.isAccess}}{{# unless page.dataElement.isRelationKindStatic}} : null{{/ unless}}{{/ unless}},
{{/ if }}
{{# if action.isDeleteAction }}
    onPressed:{{# unless page.dataElement.isAccess}}{{# unless page.dataElement.isRelationKindStatic}} owner{{ className page.dataElement.owner.name }}Store.internal__updatable &&{{/ unless}}{{/ unless}} target{{ className page.dataElement.target.name }}Store.internal__deletable ? () async {
        await {{ fqVariable page.name }}PageStore.delete{{ className page.relationType.target.name }}(target{{ className page.dataElement.target.name }}Store)
            .catchError((onError) => judoAlert(context: context, title: 'Error', text: onError.toString()));
        navigation.close(target{{ className page.dataElement.target.name }}Store);
    } : null,
{{/ if }}
{{# if  action.isEditAction }}
    onPressed:{{# unless page.dataElement.isAccess}}{{# unless page.dataElement.isRelationKindStatic}} owner{{ className page.dataElement.owner.name }}Store.internal__updatable ?{{/ unless}}{{/ unless}} () async {
        {{ fqClass page.dataElement.target.name }}Store cloned = {{ fqClass page.dataElement.target.name }}Store();
        cloned.updateWith(target{{ className page.dataElement.target.name }}Store);
        var ret = await navigation.open(Routes.{{ fqVariable action.target.name }}Page,
        arguments: {{ fqClass action.target.name }}PageArguments(target{{ className page.dataElement.target.name }}Store: cloned));
        if (ret != null) {
            target{{ className page.dataElement.target.name }}Store.updateWith(cloned);
            var updated = await {{ fqVariable page.name }}PageStore.update{{ className page.relationType.target.name }}(target{{ className page.dataElement.target.name }}Store)
                .catchError((onError) => judoAlert(context: context, title: 'Error', text: onError.toString()));
            if (updated != null) {
                target{{ className page.dataElement.target.name }}Store.updateWith(updated);
            }
        }
    }{{# unless page.dataElement.isAccess}}{{# unless page.dataElement.isRelationKindStatic}} : null{{/ unless}}{{/ unless}},
{{/if}}
{{#if action.isAddAction}}
    onPressed:{{# unless page.dataElement.isAccess}}{{# unless page.dataElement.isRelationKindStatic}} owner{{ className page.dataElement.owner.name }}Store.internal__updatable ?{{/ unless}}{{/ unless}} () async {
        var selected =
            {{> templates/flutter/lib/ui/pages/widgets/dialog.dart.hbs relation=page.dataElement}}
        if (selected != null) {
            {{fqVariable page.name}}PageStore.add{{ fqClass page.relationType.name }}(owner{{ className page.dataElement.owner.name }}Store, selected)
                .catchError((onError) => judoAlert(context: context, title: 'Error', text: onError.toString()));
        }
    }{{# unless page.dataElement.isAccess}}{{# unless page.dataElement.isRelationKindStatic}} : null{{/ unless}}{{/ unless}},
{{/if}}
{{#if action.isSetAction}}
    onPressed:{{# unless page.dataElement.isAccess}}{{# unless page.dataElement.isRelationKindStatic}} owner{{ className page.dataElement.owner.name }}Store.internal__updatable ?{{/ unless}}{{/ unless}} () async {
        var selected =
            {{> templates/flutter/lib/ui/pages/widgets/dialog.dart.hbs relation=page.dataElement}}
        if (selected != null) {
            {{fqVariable page.name}}PageStore.set{{ fqClass page.relationType.name }}(owner{{ className page.dataElement.owner.name }}Store, selected)
                .catchError((onError) => judoAlert(context: context, title: 'Error', text: onError.toString()));
        }
    }{{# unless page.dataElement.isAccess}}{{# unless page.dataElement.isRelationKindStatic}} : null{{/ unless}}{{/ unless}},
{{/if}}
{{# if action.isNavigationToPageAction }}
    onPressed: () async {
        await navigation.open(Routes.{{ fqVariable action.target.name }}Page,
            arguments: {{ fqClass action.target.name }}PageArguments(owner{{ className action.target.dataElement.owner.name }}Store: target{{ className page.dataElement.target.name }}Store));
    },
{{/ if }}
{{# if action.isCallOperationAction }}
    onPressed: () async {
        {{#if action.operation.isStatic}}
        {{#if action.operation.output}}{{fqClass action.operation.output.target.name}}Store {{fqVariable action.operation.output.target.name}}Store = {{/if}}await {{fqVariable page.name}}PageStore.{{fqVariable action.operation.owner.name}}{{className action.operation.name}}()
            .whenComplete(() => judoAlert(context: context, title: 'Successful operation', text: '{{label}} called successfully.'))
            .catchError((onError) => judoAlert(context: context, title: 'Error', text: onError.toString()));
        {{else}}
        {{# if action.operation.input}}
        var ret = await navigation.open(Routes.{{ fqVariable action.inputParameterPage.name }}Page);
        if (ret != null) {
            {{#if action.operation.output}}{{fqClass action.operation.output.target.name}}Store {{fqVariable action.operation.output.target.name}}Store = {{/if}}await {{fqVariable page.name}}PageStore.{{fqVariable action.operation.owner.name}}{{className action.operation.name}}({{# if action.operation.input}}ret, {{/if}}target{{ className page.dataElement.target.name }}Store)
                .catchError((onError) => judoAlert(context: context, title: 'Error', text: onError.toString()));
            {{#if action.operation.output}}
            if ({{fqVariable action.operation.output.target.name}}Store != null) {
                await navigation.open(Routes.{{ fqVariable action.outputParameterPage.name }}Page,
                    arguments: {{ fqClass action.outputParameterPage.name }}PageArguments(target{{className action.operation.output.target.name}}Store: {{fqVariable action.operation.output.target.name}}Store));
            }
        }
            {{/if}}
        {{else}}
            {{#if action.operation.output}}
            {{#if action.operation.output}}{{fqClass action.operation.output.target.name}}Store {{fqVariable action.operation.output.target.name}}Store = {{/if}}await {{fqVariable page.name}}PageStore.{{fqVariable action.operation.owner.name}}{{className action.operation.name}}({{# if action.operation.input}}ret, {{/if}}target{{ className page.dataElement.target.name }}Store)
                .catchError((onError) => judoAlert(context: context, title: 'Error', text: onError.toString()));
            if ({{fqVariable action.operation.output.target.name}}Store != null) {
                await navigation.open(Routes.{{ fqVariable action.outputParameterPage.name }}Page,
                    arguments: {{ fqClass action.outputParameterPage.name }}PageArguments(target{{className action.operation.output.target.name}}Store: {{fqVariable action.operation.output.target.name}}Store));
            }
        }
            {{else}}
        {{#if action.operation.output}}{{fqClass action.operation.output.target.name}}Store {{fqVariable action.operation.output.target.name}}Store = {{/if}}await {{fqVariable page.name}}PageStore.{{fqVariable action.operation.owner.name}}{{className action.operation.name}}({{# if action.operation.input}}ret, {{/if}}target{{ className page.dataElement.target.name }}Store)
            .whenComplete(() => judoAlert(context: context, title: 'Successful operation', text: '{{label}} called successfully.'))
            .catchError((onError) => judoAlert(context: context, title: 'Error', text: onError.toString()));
            {{/if}}
        {{/if}}
        {{/if}}
    },
{{/if}}
{{#if label }}
    label: '{{label}}',
{{/if}}
{{#if icon }}
    icon: Icon(Icons.{{icon.name}}),
{{/if}}
    rounded: true,
),
