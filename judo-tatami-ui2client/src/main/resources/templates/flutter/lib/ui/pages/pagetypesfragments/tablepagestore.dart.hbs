{{ log 'Pagestore generation for' (variable application.name) '-' (fqClass page.name) level='debug' }}
{{# if addDebugToTemplate }}//START tablepagestore.dart.hbs-----{{ page.name }}------------------------------------------------------------------------------------------{{/ if }}
class {{ pageStoreClassName page }} extends _{{ pageStoreClassName page }} with _${{ pageStoreClassName page }} {}

abstract class _{{ pageStoreClassName page }} with Store {
    {{# with page.relationType as |relation| }}
    {{ repositoryClassName application.actor }} _actorRepository = locator<{{ repositoryClassName application.actor }}>();

    PageState pageState = PageState();
    {{# each (getButtonWidgets page.containers.[0]) as |button| }}
        LoadingState {{ variable button.name }}LoadingState;
    {{/ each }}

    _{{ pageStoreClassName page }}(){
        {{# each (getButtonWidgets page.containers.[0]) as |button| }}
            {{ variable button.name }}LoadingState = LoadingState(pageState.setDisabledByLoading);
        {{/ each }}
    }

    @observable
    String errorMessage;

    @observable
    {{ storeClassName relation.target }} targetStore;

    {{# each page.containers.[0].tables as |table| }}
        {{# if table.pageDefinition.relationType.isFilterable }}
            final Map<String, FilterStore> stringFilterStoreMap = {
                    {{# each table.filters as |filter| }}
                        '{{ variable filter.attributeType.name }}' : FilterStore(attributeName: '{{ variable filter.attributeType.name }}', attributeLabel: '{{ filter.label }}', filterType: FilterType.{{ filterDataType filter.attributeType.dataType }}{{# if (isEnumType filter.attributeType.dataType) }}, enumValues: {{ className filter.attributeType.dataType.name }}.values{{/ if }}),
                    {{/ each }}
            };

            // final String mask = '{
            {{~# each (getAttributeTypeNamesFromColumnsAndAttributes page.containers.[0].tables.[0].filters relation.target.attributes) as |attributeName| ~}}
                {{ variable attributeName }}{{# unless @last }},{{/ unless }}
            {{~/ each ~}}
            }';

            @computed
            int get getPlusRowSize => availableFilterList.length;

            @observable
            ObservableList<FilterStore> availableFilterList = <FilterStore>[].asObservable();

            @action
            void addNewFilter(FilterStore newFilterStore) => availableFilterList.add(FilterStore.clone(newFilterStore));

        {{/ if }}
        @observable
        int {{ fqVariable table.pageDefinition.relationType.name }}QueryLimit = ({{ table.row }} - 2).round();

        @action
        void set{{ fqClass table.pageDefinition.relationType.name }}QueryLimit(double queryLimit) {
            {{ fqVariable table.pageDefinition.relationType.name }}QueryLimit = queryLimit.round();
        }
    {{/ each }}

    {{# if relation.isCollection }}
        {{# if page.dataElement.isAccess }}
            @observable
            List<{{ storeClassName relation.target }}> {{ fqVariable relation.name }}StoreList = ObservableList<{{ storeClassName relation.target }}>();

            @computed
            bool get nextButtonEnable => {{ fqVariable relation.name }}StoreList.length == {{ fqVariable relation.name }}QueryLimit && !nextPageIsEmpty;
        {{ else }}
            @observable
            bool nextButtonEnable = true;
        {{/ if }}

        @computed
        int get pageTableItemsRangeStart => nextPageCounter * {{ fqVariable relation.name }}QueryLimit + 1;

        @observable
        int nextPageCounter = 0;

        @computed
        bool get previousButtonEnable => nextPageCounter > 0;

        @observable
        bool nextPageIsEmpty = false;

        @observable
        int {{ fqVariable relation.name }}SortColumnIndex = 0; // TODO: JNG-2716

        @observable
        String {{ fqVariable relation.name }}SortColumnName = '{{ variable page.containers.[0].tables.[0].columns.[0].attributeType.name }}'; // TODO: JNG-2716

        @observable
        bool {{ fqVariable relation.name }}SortAsc = false; // TODO: JNG-2716

        @observable
        Comparator {{ fqVariable relation.name }}SortCompare;

        @action
        void {{ fqVariable relation.name }}SetSort({{# unless page.dataElement.isAccess }}{{ storeClassName relation.owner }} ownerStore, {{/ unless }}BuildContext context, String sortColumnName, int sortColumnIndex, bool asc, Comparator sortCompare) {

            if ({{ fqVariable relation.name }}SortColumnIndex != sortColumnIndex) {
              {{ fqVariable relation.name }}SortAsc = true;
            } else {
              {{ fqVariable relation.name }}SortAsc = !{{ fqVariable relation.name }}SortAsc;
            }

            {{ fqVariable relation.name }}SortColumnIndex = sortColumnIndex;
            {{ fqVariable relation.name }}SortColumnName = sortColumnName;
            {{ fqVariable relation.name }}SortCompare = sortCompare;
            {{# if relation.isOrderable }}
                get{{ fqClass relation.name }}({{# unless page.dataElement.isAccess }}ownerStore{{/ unless }}).catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
            {{ else }}
                {{# if page.dataElement.isAccess }}
                    {{ fqVariable relation.name }}StoreList.sort(sortCompare);
                {{ else }}
                    ownerStore.{{ variable relation.name }}.sort(sortCompare);
                {{/ if }}
            {{/ if }}
        }
    {{ else }}
        {{# if page.dataElement.isAccess }}
            @observable
            {{ storeClassName relation.target }} store;
        {{/ if }}
    {{/ if }}

    @observable
    ObservableFuture {{ variable relation.owner.name }}{{ fqClass relation.name }}StoreFuture;

    {{# if relation.isRelationBehaviourTypeCreatable }}
        {{> flutter/lib/ui/pages/pagetypesfragments/tablepagestore/create_action.dart.hbs page=page relation=relation }}
    {{/ if }}

    {{# if relation.isRelationBehaviourTypeAddable }}
        {{> flutter/lib/ui/pages/pagetypesfragments/tablepagestore/add_action.dart.hbs page=page relation=relation }}
    {{/ if }}

    {{# if relation.isRelationBehaviourTypeRemovable }}
        {{> flutter/lib/ui/pages/pagetypesfragments/tablepagestore/remove_action.dart.hbs page=page relation=relation }}
    {{/ if }}

    {{# if relation.isRelationBehaviourTypeListable }}
        {{> flutter/lib/ui/pages/pagetypesfragments/tablepagestore/list_action.dart.hbs page=page relation=relation }}
    {{/ if }}

    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/range_actions.dart.hbs page=page relation=relation table=page.containers.[0].tables.[0] }}

    {{# if relation.isRelationBehaviourTypeSetable }}
        {{> flutter/lib/ui/pages/pagetypesfragments/tablepagestore/set_action.dart.hbs page=page relation=relation }}
    {{/ if }}

    {{# if relation.isRelationBehaviourTypeUnsetable }}
        {{> flutter/lib/ui/pages/pagetypesfragments/tablepagestore/unset_action.dart.hbs page=page relation=relation }}
    {{/ if }}

    {{# if relation.isRelationBehaviourTypeDeletable }}
        {{> flutter/lib/ui/pages/pagetypesfragments/tablepagestore/delete_action.dart.hbs page=page relation=relation }}
    {{/ if }}

    {{# if relation.isRelationBehaviourTypeUpdatable }}
        {{> flutter/lib/ui/pages/pagetypesfragments/tablepagestore/update_action.dart.hbs page=page relation=relation }}
    {{/ if }}
    {{/ with }}
}
{{# if addDebugToTemplate }}//END tablepagestore.dart.hbs-----{{ page.name }}--------------------------------------------------------------------------------------------{{/ if }}
