class {{ fqClass page.name }}PageStore extends _{{ fqClass page.name }}PageStore with _${{ fqClass page.name }}PageStore {}

abstract class _{{ fqClass page.name }}PageStore with Store {
    {{# with page.relationType as |relation| }}
    {{ fqClass relation.owner.name }}{{ fqClass relation.name }}Repository _{{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Repository = locator<{{ fqClass relation.owner.name }}{{ fqClass relation.name }}Repository>();

    @observable
    String errorMessage;

    {{# if relation.isCollection }}
    @observable
    List<{{ fqClass relation.name }}Store> {{ fqVariable relation.name }}ListStore = ObservableList<{{ fqClass relation.name }}Store>();
    {{/ if }}

    @observable
    ObservableFuture {{ fqVariable relation.name }}StoreFuture;

    {{# with relation.behaviour as |selfbehaviour| }}
    {{# if selfbehaviour.creatable }}
    @action
    Future<{{ fqClass relation.target.name }}Store> create{{ fqClass relation.name }}({{ fqClass relation.target.name }}Store {{ fqVariable relation.target.name }}Store) async {
        try {
            errorMessage = null;
            {{ relation.name }}StoreFuture = ObservableFuture(_{{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Repository.{{ fqVariable relation.target.name }}Create({{ fqVariable relation.target.name }}Store));
            return await {{ relation.name }}StoreFuture;
        } on ApiException {
            errorMessage = "Could not create {{ relation.name }}";
        }
    }
    {{/ if }}

	{{#if relation.isCollection}}
    @action
    Future<List<{{ fqClass relation.target.name }}Store>> add{{fqClass relation.name}}({{ fqClass relation.owner.name }}Store {{ variable relation.owner.name }}Store, {{ fqClass relation.target.name }}Store selected{{ className relation.target.name }}Store) async {
        try {
            await _{{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Repository.{{ fqVariable relation.owner.name }}{{fqClass relation.name}}Add({{ variable relation.owner.name }}Store, [selected{{ className relation.target.name }}Store]);
            {{ variable relation.owner.name }}Store.{{variable relation.name}}.addAll([selected{{ className relation.target.name }}Store]);
            return {{ variable relation.owner.name }}Store.{{variable relation.name}};
        } on ApiException {
            errorMessage = "Could not add {{relation.name}}";
        }
    }
    {{/if}}
    
    {{# if selfbehaviour.removable }}
    @action
    Future<void> remove{{ fqClass relation.name }}({{ fqClass relation.target.name }}Store {{ fqVariable relation.target.name }}Store) async {
        try {
            errorMessage = null;
            {{ relation.name }}StoreFuture = ObservableFuture(_{{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Repository.{{ fqVariable relation.target.name }}Delete({{ fqVariable relation.target.name }}Store));
            await {{ relation.name }}StoreFuture;
            {{ relation.name }}ListStore.remove({{ fqVariable relation.target.name }}Store);
        } on ApiException {
            errorMessage = "Could not remove {{ relation.name }}";
        }
    }
    {{/if}}

    {{# if selfbehaviour.getable }}
    {{# if relation.isCollection }}
    @action
    Future<List<{{ fqClass relation.target.name }}Store>> get{{ fqClass relation.name }}() async {
        try {
            errorMessage = null;
            {{ relation.name }}StoreFuture = ObservableFuture(_{{ fqVariable relation.owner.name }}{{ fqClass relation.name }}Repository.{{ fqVariable relation.target.name }}List());
            {{ relation.name }}ListStore.clear();
            {{ relation.name }}ListStore.addAll(await {{ relation.name }}StoreFuture);
            return {{ relation.name }}ListStore;
        } on ApiException {
            errorMessage = "Could not load all {{ relation.name }}";
        }

    }
    {{/ if }}
    {{/ if }}
    {{/ with }}
    {{/ with }}
}
