{{ log 'Pagestore generation for' (variable application.name) '-' (fqClass page.name) level='debug' }}
//START createpagestore.dart.hbs-----{{ page.name }}-----------------------------------------------------------------------------------------
class {{ pageStoreClassName page }} extends _{{ pageStoreClassName page }} with _${{ pageStoreClassName page }} {}

abstract class _{{ pageStoreClassName page }} with Store {
    {{# with page.relationType as |relation| }}
    {{ repositoryClassName application.actor }} _actorRepository = locator<{{ repositoryClassName application.actor }}>();

    @observable
    String errorMessage;

    @observable
    {{ storeClassName relation.target }} targetStore;

    {{# if (validatableFlagNeed relation) }}
    bool validatable = false;
    {{/ if }}

    @action
    Future<{{ storeClassName relation.target }}> getDefaults() async {
        try {
            return await _actorRepository.{{ fqVariable relation.target.name }}Default();
        } on ApiException catch (error) {
            errorMessage = "Could not load default values";
            throw error;
        }
    }

    {{# if relation.isRelationBehaviourTypeCreateValidatable }}
    @action
    Future<{{ storeClassName relation.target }}> validate({{# unless page.dataElement.isAccess }}{{ storeClassName relation.owner }} ownerStore, {{/ unless }}{{ storeClassName relation.target }} targetStore) async {
        try {
            errorMessage = null;
            return await _actorRepository.{{ fqVariable relation.owner.name }}{{ fqClass relation.name }}ValidateForCreate({{# unless page.dataElement.isAccess }}ownerStore, {{/ unless }}targetStore);
        } on ApiException catch (error) {
            errorMessage = "Could not validate {{ relation.name }}";
            throw error;
        }
    }

    {{/ if }}
    {{/ with }}

{{# each page.containers.[0].tables as |table| }}
    @observable
    int {{ fqVariable table.dataElement.name }}QueryLimit = ({{ table.row }} - 2).round();

    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/embedded_table_paging_actions.dart.hbs table=table page=page relation=table.dataElement }}

    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/range_actions.dart.hbs page=page relation=table.dataElement table=table }}
{{/ each }}
{{# each page.containers.[0].links as |link| }}
    @observable
    int {{ fqVariable link.dataElement.name }}QueryLimit = 5; // For judo link setter dialog

    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/range_actions.dart.hbs page=page relation=link.dataElement table=link }}
{{/ each }}

{{# each page.dataElement.target.relations as |relation| }}
    {{# unless isRelationKindStatic }}
        {{# unless isRelationKindAssociation }}
    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/embedded_collection_table_order_action.dart.hbs page=page relation=relation }}
        {{/ unless }}
    {{/ unless }}
    {{# unless isMemberTypeTransient }}
        {{# if isRelationKindAggregation }}
    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/aggregationactions.dart.hbs page=page relation=relation }}
        {{/ if }}
        {{# if isRelationKindComposition }}
    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/aggregationactions.dart.hbs page=page relation=relation }}
        {{/ if }}
    {{/ unless }}
{{/ each }}
}
//END createpagestore.dart.hbs-----{{ page.name }}-------------------------------------------------------------------------------------------
