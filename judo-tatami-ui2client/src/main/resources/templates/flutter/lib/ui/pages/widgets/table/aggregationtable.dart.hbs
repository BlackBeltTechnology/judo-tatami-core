{{~ log 'Table generation for' (variable application.name) '-' (fqClass page.name) (variable dataElement.name) level='debug' ~}}
{{# with dataElement as |relation|}}
Observer(builder: (_) {
    return JudoTable(
        disabled: {{disabled}},
        col: {{ multiplyCol col }},
        row: {{row}},
        dataInfo: {{ fqClass pageDefinition.name }}{{ fqClass table.name }}{{ fqClass pageContainer.layoutType.name }}Table(disabled: {{disabled}}),
        rowList: {{# if relation.isCollection }}target{{ className relation.owner.name }}Store.{{variable relation.name}}{{else}}[target{{ className relation.owner.name }}Store.{{variable relation.name}}].asObservable(){{/ if}},
        {{#each table.rowActions as |rowAction|}}
        {{#if rowAction.isViewAction}}
        navigateToViewPageAction: (element) async {
            var response = await navigation.open(Routes.{{ fqVariable rowAction.target.name }}Page,
            arguments: {{ fqClass rowAction.target.name }}PageArguments({{# unless relation.isAccess}}owner{{ className relation.owner.name }}Store: target{{ className relation.owner.name }}Store, {{/ unless}}target{{ className relation.target.name }}Store: element));
            {{# unless relation.isMemberTypeTransient }}
            if (response != null) {
                {{ fqVariable page.name }}PageStore.get{{ fqClass relation.name }}({{# unless relation.isAccess}}target{{ className relation.owner.name }}Store{{/ unless}})
                    .catchError((error) => ErrorHandler.errorDialog(context, error));
            }
            {{/ unless }}
        },
        {{/if}}
        {{#if rowAction.isEditAction}}
        navigateToEditPageAction:{{# unless relation.isAccess}} target{{ className relation.owner.name }}Store.internal__updatable ?{{/ unless}} (element) async {
            {{ fqClass relationType.target.name }}Store cloned = {{ fqClass relationType.target.name }}Store();
            cloned.updateWith(element);
            var res = await navigation.open(Routes.{{ fqVariable rowAction.target.name }}Page,
            arguments: {{ fqClass rowAction.target.name }}PageArguments(target{{ className relation.target.name }}Store: cloned, validatable: {{ fqVariable page.name }}PageStore.validatable));
            if (res != null) {
                element.updateWith(cloned);
                var updated = await {{ fqVariable page.name }}PageStore.update{{ className relation.target.name }}(element)
                    .catchError((error) => ErrorHandler.errorDialog(context, error));
                {{# if (isValidateHere page) }}
                    {{# unless page.dataElement.isRelationKindAggregation }}
                        {{# unless page.dataElement.isRelationKindComposition }}
                var validate = await {{ fqVariable page.name }}PageStore.validate({{# unless page.dataElement.isAccess}}owner{{ className page.dataElement.owner.name }}Store, {{/unless}}target{{ className page.dataElement.target.name }}Store)
                    .catchError((error) => ErrorHandler.errorDialog(context, error));
                if (validate != null) {
                    target{{ className relation.owner.name }}Store.updateWith(validate);
                }
                        {{/unless}}
                    {{/unless}}
                {{ else }}
                if (updated != null) {
                    element.updateWith(updated);
                    {{ fqVariable page.name }}PageStore.get{{ fqClass relation.name }}({{# unless relation.isAccess}}target{{ className relation.owner.name }}Store{{/ unless}})
                        .catchError((error) => ErrorHandler.errorDialog(context, error));
                }
                {{/if}}
            }
        }{{# unless relation.isAccess}} : null{{/ unless}},
        {{/if}}
        {{#if rowAction.isRemoveAction}}
        removeAction:{{# unless relation.isAccess}} target{{ className relation.owner.name }}Store.internal__updatable ?{{/ unless}} (element) => {{fqVariable page.name}}PageStore.remove{{ fqClass relation.name }}(target{{ className relation.owner.name }}Store, element){{# unless relation.isAccess}} : null{{/ unless}},
        {{/if}}
        {{#if rowAction.isUnsetAction}}
        unsetAction:{{# unless relation.isAccess}}{{# unless relation.isRelationKindStatic}} target{{ className relation.owner.name }}Store.internal__updatable ?{{/ unless}}{{/ unless}} () async {
            {{fqVariable page.name}}PageStore.unset{{ fqClass relation.name }}(target{{ className relation.owner.name }}Store)
                .catchError((error) => ErrorHandler.errorDialog(context, error));
        }{{# unless relation.isAccess}}{{# unless relation.isRelationKindStatic}} : null{{/ unless}}{{/ unless}},
        {{/if}}
        {{#if rowAction.isDeleteAction}}
        deleteAction:{{# unless relation.isAccess}} target{{ className relation.owner.name }}Store.internal__updatable ?{{/ unless}} (element) async {
            {{fqVariable page.name}}PageStore.delete{{ className relation.target.name }}(element{{# unless relation.isAccess}}, target{{ className relation.owner.name }}Store{{/unless}})
                .catchError((error) => ErrorHandler.errorDialog(context, error));
        }{{# unless relation.isAccess}} : null{{/ unless}},
        {{/if}}
        {{/each}}
    );
}),
{{/ with}}
