{{~ log 'Numeric field generation for' (variable application.name) '-' (fqClass page.name)'page'(variable page.dataElement.target.name) attributeType.name level='debug' ~}}
{{# if addDebugToTemplate }}//START xmi:id="{{ getXMIID this }}" numericinput.dart.hbs-----{{ page.dataElement.target.name }}-------------------------------------------------------------------------{{/ if }}
Observer(
    builder: (_) => JudoNumericInput(
        key: {{# if (isViewTypePage page) }}UniqueKey(){{ else }}inputWidgetKeyMap['{{ name }}']{{/ if }},
        {{# if (isPageValidatable page) }}
        errorMessage: pageStore.validationAttributeErrorMessageMap['{{ variable attributeType.name }}'].message,
        {{/ if }}
        col: {{ col }},
        row: {{ row }},
        inCard: {{ isInCard }},
        disabled: {{ disabled }}{{# if enabledBy }} || !((targetStore?.{{ variable enabledBy.name }}) ?? false){{/ if }},
        {{# if this.isLabelVisible }}
        label: AppLocalizations.of(context).lookUpValue(context, '{{ this.label }}'),
        {{/ if }}
        {{# if this.isIconVisible }}
        icon: Icon(getIconByString('{{ this.icon.name }}')),
        {{/ if }}
        initialValue: targetStore.{{ variable attributeType.name }}.toString(),
        readOnly: {{# if (isViewTypePage page) }}true{{ else }}{{ attributeType.isReadOnly }}{{/ if }},
        {{# unless (isViewTypePage page) }}
        mandatory: {{ attributeType.isRequired }},
        onChanged: (value) => targetStore.set{{ className attributeType.name }}({{ dartType attributeType.dataType }}.parse(value)),
        {{/ unless }}
    )
),
{{# if addDebugToTemplate }}//END numericinput.dart.hbs-----{{ page.dataElement.target.name }}---------------------------------------------------------------------------{{/ if }}
