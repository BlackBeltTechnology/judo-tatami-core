{{# if action.operation.output }}
    {{ storeClassName action.operation.output.target }} store;
{{/ if }}
var ret = await navigation.open(Routes.{{ pageClassVariableName action.inputParameterPage }},
    arguments: {{ pageArgumentsClassName action.inputParameterPage }}(
        operationCall: ({{ storeClassName action.operation.input.target }} input, {{ pageStoreClassName action.inputParameterPage }} inputPageStore) async {
            bool callSuccessful = true;

            {{# if action.isConfirmationTypeMandatory }}
                {{> flutter/lib/ui/pages/widgets/confirmationDialog.dart.hbs }}
            {{/ if }}

            {{# if action.isConfirmationTypeConditional }}
                {{> flutter/lib/ui/pages/widgets/confirmationDialog.dart.hbs }}
            {{/ if }}

            {{# if action.operation.output }}store = {{/ if }}await pageStore.{{ fqVariable action.operation.owner.name }}{{ className action.operation.name }}(input, {{# if action.operation.isMapped }}targetStore{{/ if }})
                .catchError((error) {
                    ErrorHandler.showErrorSnack(context, error.message, validationAttributeErrorMessageMap: inputPageStore.validationAttributeErrorMessageMap);
                    callSuccessful = false;
                });
            return callSuccessful;
        }
    )
);

{{# if action.operation.output }}
    if (store != null) {
        await navigation.open(Routes.{{ pageClassVariableName action.outputParameterPage }},
            arguments: {{ pageArgumentsClassName action.outputParameterPage }}(targetStore: store));
    }
{{/ if }}

{{# if page.relationType.isRelationBehaviourTypeRefreshable }}
    if (ret != null) {
        await pageStore.refresh{{ className page.relationType.target.name }}(targetStore);
    }
{{/ if }}
