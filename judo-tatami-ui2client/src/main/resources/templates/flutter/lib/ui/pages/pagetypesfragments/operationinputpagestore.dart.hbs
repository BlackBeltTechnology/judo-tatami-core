{{ log 'Pagestore generation for' (variable application.name) '-' (fqClass page.name) level='debug' }}
{{# if addDebugToTemplate }}//START operationinputpagestore.dart.hbs-----{{ page.name }}---------------------------------------------------------------------------------{{/ if }}
class {{ pageStoreClassName page }} extends _{{ pageStoreClassName page }} with _${{ pageStoreClassName page }} {}

abstract class _{{ pageStoreClassName page }} with Store {
    {{ repositoryClassName application.actor }} _actorRepository = locator<{{ repositoryClassName application.actor }}>();

    PageState pageState = PageState();
    {{# each (getButtonWidgets page.containers.[0]) as |button| }}
        LoadingState {{ variable button.name }}LoadingState;
    {{/ each }}

    _{{ pageStoreClassName page }}(){
        {{# each (getButtonWidgets page.containers.[0]) as |button| }}
            {{ variable button.name }}LoadingState = LoadingState(pageState.setDisabledByLoading);
        {{/ each }}
    }

    Function operationCall;

    @observable
    String errorMessage;

    @observable
    {{ storeClassName page.dataElement.target }} targetStore;

    @observable
    ObservableMap<String, ErrorMessage> validationAttributeErrorMessageMap = {
    {{# each page.dataElement.target.attributes as |attribute| }}
        '{{ variable attribute.name }}' : ErrorMessage(),
    {{/ each }}
    {{# each page.dataElement.target.relations as |targetRelation| }}
        '{{ variable targetRelation.name }}' : ErrorMessage(),
    {{/ each }}
    }.asObservable();

    // TODO: review that this is necessary in all cases
    bool validatable = false;

{{# each page.containers.[0].tables as |table| }}
    @observable
    int {{ fqVariable table.dataElement.name }}QueryLimit = ({{ table.row }} - 2).round();

    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/embedded_table_paging_actions.dart.hbs table=table page=page relation=table.dataElement }}

    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/range_actions.dart.hbs page=page relation=table.dataElement table=table }}
{{/ each }}
{{# each page.containers.[0].links as |link| }}
    @observable
    int {{ fqVariable link.dataElement.name }}QueryLimit = 5; // For judo link setter dialog

    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/range_actions.dart.hbs page=page relation=link.dataElement table=link }}
{{/ each }}

{{# each page.dataElement.target.relations as |relation| }}
    {{# unless isRelationKindStatic }}
        {{# unless isRelationKindAssociation }}
    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/embedded_table_order_action.dart.hbs page=page relation=relation}}
        {{/ unless }}
    {{/ unless }}
    {{# if isRelationKindAggregation }}
        {{# if isMemberTypeTransient }}
    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/input_page_transient_actions.dart.hbs page=page relation=relation }}
        {{/ if }}
        {{# if isMemberTypeStored }}
    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/input_page_stored_aggregation_actions.dart.hbs page=page relation=relation }}
        {{/ if }}
    {{/ if }}
    {{# if isRelationKindComposition }}
    {{> flutter/lib/ui/pages/pagetypesfragments/storeactions/aggregationactions.dart.hbs page=page relation=relation }}
    {{/ if }}
{{/ each }}
}
{{# if addDebugToTemplate }}//END operationinputpagestore.dart.hbs-----{{ page.name }}-----------------------------------------------------------------------------------{{/ if }}

