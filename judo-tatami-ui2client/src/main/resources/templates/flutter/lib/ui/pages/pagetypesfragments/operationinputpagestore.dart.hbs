{{ log 'Pagestore generation for' (variable application.name) '-' (fqClass page.name) level='debug' }}
//START operationinputpagestore.dart.hbs-----{{ page.name }}---------------------------------------------------------------------------------
class {{ fqClass page.name }}PageStore extends _{{ fqClass page.name }}PageStore with _${{ fqClass page.name }}PageStore {}

abstract class _{{ fqClass page.name }}PageStore with Store {
    {{ fqClass application.actor.name }}Repository _{{ fqVariable application.actor.name }}Repository = locator<{{ fqClass application.actor.name }}Repository>();

    @observable
    String errorMessage;

    // TODO: review that this is necessary in all cases
    bool validatable = false;

    {{# each page.dataElement.target.relations as |relation| }}
        {{# unless isRelationKindStatic }}
            {{# unless isRelationKindAssociation }}
    {{> templates/flutter/lib/ui/pages/pagetypesfragments/storeactions/embedded_collection_table_order_action.dart.hbs page=page relation=relation}}
            {{/ unless }}
        {{/ unless }}
        {{# if isRelationKindAggregation }}
            {{# if isMemberTypeTransient }}
    {{> templates/flutter/lib/ui/pages/pagetypesfragments/storeactions/input_page_transient_actions.dart.hbs page=page relation=relation }}
            {{/ if }}
            {{# if isMemberTypeStored }}
    {{> templates/flutter/lib/ui/pages/pagetypesfragments/storeactions/input_page_stored_aggregation_actions.dart.hbs page=page relation=relation }}
            {{/ if }}
        {{/ if }}
        {{# if isRelationKindComposition }}
    {{> templates/flutter/lib/ui/pages/pagetypesfragments/storeactions/aggregationactions.dart.hbs page=page relation=relation }}
        {{/ if }}
    {{/ each }}
}
//END operationinputpagestore.dart.hbs-----{{ page.name }}-----------------------------------------------------------------------------------

