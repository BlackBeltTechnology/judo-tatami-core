{{log 'Dialog generation for' (variable application.name) '-' (fqClass page.name) level='info'}}
//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}
// Page: {{ page.name }}
// Table: {{ table.name }}

part of {{ variable application.name }}.ui.pages.dialogs;

{{# with table.filters as |tableFilters| }}
{{# with table.dataElement as |relation|}}
class {{ fqClass relation.name }}{{ className relation.target.name }}DialogFor{{fqClass page.name}}PageHelperStore extends _{{ fqClass relation.name }}{{ className relation.target.name }}DialogFor{{fqClass page.name}}PageHelperStore with _${{ fqClass relation.name }}{{ className relation.target.name }}DialogFor{{fqClass page.name}}PageHelperStore {}

abstract class _{{ fqClass relation.name }}{{ className relation.target.name }}DialogFor{{fqClass page.name}}PageHelperStore with Store {

    final Map<String, FilterStore> stringFilterStoreMap = {
    {{# each table.filters as |filter|}}
        '{{ variable filter.attributeType.name }}' : FilterStore(attributeName: '{{ variable filter.attributeType.name }}', attributeLabel: '{{ filter.label }}', filterType: FilterType.{{ filterDataType filter.attributeType.dataType }}{{# if (isEnumType filter.attributeType.dataType)}}, enumValues: {{ className filter.attributeType.dataType.name }}.values{{/if}}),
    {{/ each }}
    };

    @computed
    double get getInputWidgetsHeight => availableFilterList.length * JudoComponentCustomizer.get().getLineHeight();

    @computed
    bool get searchButtonEnabled => availableFilterList.isNotEmpty;

    @observable
    ObservableList<FilterStore> availableFilterList = <FilterStore>[].asObservable();

    @action
    void addNewFilter(FilterStore newFilterStore) => availableFilterList.add(FilterStore.clone(newFilterStore));
}

Future<{{# if relation.isCollection }}List<{{ fqClass relation.target.name }}Store>{{ else }}{{ fqClass relation.target.name }}Store{{/ if }}> judoSelect{{ fqClass relation.name }}{{ className relation.target.name }}DialogFor{{fqClass page.name}}Page({@required BuildContext context, {{fqClass page.name}}PageStore pageStore{{# unless (isAccessTablePage page) }}, {{ fqClass relation.owner.name }}Store ownerStore{{/ unless }}, bool dialogTypeAdder = false }) async {
{{# if relation.isRelationBehaviourTypeRangeable }}
{{# unless (isAccessTablePage page) }}
{{# unless relation.isMemberTypeTransient }}
    var addFilterButtonKey = GlobalKey();

    String mask = '{
    {{~# each tableFilters as |filter| ~}}
        {{ variable filter.attributeType.name }}{{# unless @last }},{{/ unless }}
    {{~/ each ~}}
    }';
    int tableQueryLimit = ({{ table.row }}-1).round();

    pageStore.getRangeFor{{ fqClass relation.name }}(ownerStore, queryLimit: tableQueryLimit, mask: mask).catchError((error) => ErrorHandler.showErrorSnack(context, error.message));

    {{# if relation.isCollection }}
    ObservableList<String> selected = ObservableList.of(
        ownerStore.{{ variable relation.name }}
            .map<String>((element) => element.internal__identifier)
            .toList()
            .asObservable()
    );
    {{ else }}
    ObservableList<String> selected = <String>[].asObservable();
    {{/ if }}
    List<String> alreadyAddedItems = List.of(selected);
    var dialogHelperStore = {{ fqClass relation.name }}{{ className relation.target.name }}DialogFor{{fqClass page.name}}PageHelperStore();

    var tableHelperStore = TableHelperStore(selected, ({{ fqClass relation.target.name }}Store value) => value.internal__identifier);

  return await showDialog<{{# if relation.isCollection }}List<{{ fqClass relation.target.name }}Store>{{ else }}{{ fqClass relation.target.name }}Store{{/ if }}>(
    context: context,
    builder: (context) {
      return AlertDialog(
        content: SingleChildScrollView( 
          child: GestureDetector(
            onTap: () => FocusScope.of(context).requestFocus(new FocusNode()),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Row(
                  children: [
                    JudoButton(
                        key: addFilterButtonKey,
                        col: 1,
                        alignment: Alignment.center,
                        icon: Icon(Icons.add),
                        label: 'Add filter',
                        onPressed: () async {
                            FilterStore selectedAttribute = await judoShowMenu<FilterStore>(
                                buttonKey: addFilterButtonKey,
                                items: getPopupMenuAttributeItems(context, dialogHelperStore.stringFilterStoreMap.values.toList()),
                                context: context,
                            );
                            if (selectedAttribute != null) {
                                selectedAttribute.setWidgetLabel(context);
                                dialogHelperStore.addNewFilter(selectedAttribute);
                            }
                        },
                    ),
                    Observer(
                      builder: (_) => dialogHelperStore.searchButtonEnabled ? 
                        JudoButton(
                          col: 1,
                          alignment: Alignment.center,
                          icon: Icon(Icons.search),
                          label: 'Search',
                          onPressed: () async {
                              pageStore.getRangeFor{{ fqClass relation.name }}(
                                  ownerStore,
                                  queryLimit: tableQueryLimit,
                                  filterStoreList: dialogHelperStore.availableFilterList,
                                  mask: mask,
                              ).catchError((error) => ErrorHandler.showErrorSnack(context, error));
                          },
                      ) : JudoSpacer(col: 1),
                    ),
                  ],
                ),
                Observer(
                  builder: (_) => Container(
                    height: dialogHelperStore.getInputWidgetsHeight,
                    width: 400,
                    child: Column(
                      children: getInputFilterWidgetsForDialog(
                        context,
                        dialogHelperStore.availableFilterList,
                        () => pageStore.getRangeFor{{ fqClass relation.name }}(
                            ownerStore,
                            queryLimit: tableQueryLimit,
                            filterStoreList: dialogHelperStore.availableFilterList,
                            mask: mask,
                        ).catchError((error) => ErrorHandler.showErrorSnack(context, error)), 
                      ),
                    ),
                  ),
                ),
                Row(
                  children: [
                    // ignore: missing_return
                    Observer(builder: (_) {
                      switch(pageStore.{{ variable relation.owner.name}}{{ fqClass relation.name }}StoreFuture.status){
                        case FutureStatus.pending:
                          return JudoLoadingProgress();
                        case FutureStatus.rejected:
                          return Container();
                        case FutureStatus.fulfilled:
                          var dataInfo = {{ fqClass table.pageDefinition.name }}{{ fqClass table.name }}DialogTable(context, disabled: false);
                          return JudoSelectorTable(
                            alignment: Alignment.center,
                            disabled: false,
                            collectionSelector: {{ relation.isCollection}},
                            col: 1,
                            row: {{ table.row }} >= 6 ? {{ table.row }} : 6,
                            dataInfo: dataInfo,
                            sortAscending: pageStore.{{ fqVariable relation.name }}SortAsc,
                            sortColumnIndex: pageStore.{{ fqVariable relation.name }}SortColumnIndex,
                            onSort: (int columnIndex, bool asc) {
                                pageStore.{{ fqVariable relation.name }}SetSortRange(
                                  ownerStore,
                                  context,
                                  dataInfo.getColumnFieldByIndex(columnIndex, asc),
                                  columnIndex,
                                  asc,
                                  dataInfo.getSortComparator(columnIndex, asc),
                                  filterStoreList: dialogHelperStore.availableFilterList,
                                  mask: mask,
                              );
                            },
                            rowList: pageStore.{{ fqVariable relation.name }}StoreRangeList,
                            dialogTypeAdder: dialogTypeAdder,
                            {{# if relation.isCollection }}
                            alreadyAddedItemsComparator: ({{ fqClass relation.target.name }}Store element) => alreadyAddedItems.contains(tableHelperStore.getId(element)),
                            {{/ if }}
                            multiSelectAction: ({{ fqClass relation.target.name }}Store element) => tableHelperStore.selectRow(element),
                            singleSelectAction: ({{ fqClass relation.target.name }}Store element) => tableHelperStore.singleSelectRow(element),
                            multiSelectedComparator: ({{ fqClass relation.target.name }}Store element) => tableHelperStore.selected.contains(tableHelperStore.getId(element)),
                            singleSelectedComparator: ({{ fqClass relation.target.name }}Store element) => tableHelperStore.singleSelected == tableHelperStore.getId(element),
                          );
                      }
                    }),
                  ],
                ),
                Row(
                    children: [
                        Padding(
                            padding: JudoComponentCustomizer.get().getDefaultPadding(),
                            child: Observer(
                                builder: (_) => Text(
                                    AppLocalizations.of(context).lookUpValue(context, 'Showed rows: ') + '${pageStore.{{ fqVariable relation.name }}StoreRangeList.length}',
                                    style: JudoComponentCustomizer.get().getRowCounterTextStyle(Theme.of(context)),
                                ),
                            ),
                        ),
                    ],
                )
              ],
            ),
          ),
        ),
        actions: [
          Padding(
            padding: const EdgeInsets.all(10.0),
            child: Observer(
              builder: (_) => ElevatedButton(
                child: Text('Select'),
                onPressed: tableHelperStore.selectButtonEnabled ? () {
                {{# if relation.isCollection }}List<{{ fqClass relation.target.name }}Store>{{ else }}{{ fqClass relation.target.name }}Store{{/ if }} result;
                {{# if relation.isCollection }}
                  if (dialogTypeAdder) {
                    result = pageStore.{{ fqVariable relation.name }}StoreRangeList
                        .where((element) => selected.contains(element.internal__identifier) && !alreadyAddedItems.contains(element.internal__identifier))
                        .toList();
                  } else {
                {{/ if }}
                    result = pageStore.{{ fqVariable relation.name }}StoreRangeList
                          {{# if relation.isCollection }}
                          .where((element) => selected.contains(element.internal__identifier))
                          .toList();
                          {{ else }}
                          .firstWhere((element) => tableHelperStore.singleSelected == element.internal__identifier, orElse: () => null);
                          {{/ if }}
                {{# if relation.isCollection }}
                  }
                {{/ if }}
                  Navigator.of(context).pop(result);
                } : null,
              ),
            ),
          ),
        ],
      );
    },
  );
{{/unless}}
{{/ unless}}
{{/ if }}
}
{{/ with }}
{{/with}}
