{{log 'Dialog generation for' (variable application.name) '-' (fqClass page.name) level='info'}}
//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}
// Page: {{ page.name }}
// Table: {{ table.name }}

part of {{ variable application.name }}.ui.pages.dialogs;

{{# with table.filters as |tableFilters| }}
{{# with table.dataElement as |relation|}}
class {{ fqClass relation.name }}{{ className relation.target.name }}DialogFor{{fqClass page.name}}PageHelperStore extends _{{ fqClass relation.name }}{{ className relation.target.name }}DialogFor{{fqClass page.name}}PageHelperStore with _${{ fqClass relation.name }}{{ className relation.target.name }}DialogFor{{fqClass page.name}}PageHelperStore {}

abstract class _{{ fqClass relation.name }}{{ className relation.target.name }}DialogFor{{fqClass page.name}}PageHelperStore with Store {

    Map<String, FilterStore> stringFilterStoreMap = {
        {{# each tableFilters as |filter|}}
            {{# each filter.attributeType.dataType.operator.members as |filterOperator|}}
                {{# each (likeOperationHelperList filterOperator) as |likeOperator| }}
                    '{{ variable filter.attributeType.name }}{{# if (isFilterOperationLike filterOperator)}}{{ fqClass likeOperator }}{{ else }}{{ className filterOperator.name }}{{/ if }}Filter' : FilterStore(attributeLabel: '{{ filter.label }}', filterOperationLabel: {{# if (isFilterOperationLike filterOperator)}}'{{ labelName likeOperator }}'{{ else }}filterOperationLabels['{{ variable filterOperator.name }}']{{/ if }}, filterOperation: '{{ variable filterOperator.name }}', attributeName: '{{ className filter.attributeType.name }}'),
                {{/each}}
            {{/each}}
        {{/ each }}
    };

    @computed
    bool get searchButtonEnabled {
        var enabledWidget = stringFilterStoreMap.values.firstWhere((element) => element.filterEnabled, orElse: () => null);
        return enabledWidget != null;
    }
}

Future<{{# if relation.isCollection }}List<{{ fqClass relation.target.name }}Store>{{ else }}{{ fqClass relation.target.name }}Store{{/ if }}> judoSelect{{ fqClass relation.name }}{{ className relation.target.name }}DialogFor{{fqClass page.name}}Page({@required BuildContext context, {{fqClass page.name}}PageStore pageStore,{{# unless (isAccessTablePage page) }} {{ fqClass relation.owner.name }}Store ownerStore{{/ unless }} }) async {
{{# if relation.isRelationBehaviourTypeRangeable }}
{{# unless (isAccessTablePage page) }}
{{# unless relation.isMemberTypeTransient }}
    var addFilterButtonKey = GlobalKey();
    int tableQueryLimit = ({{ table.row }}-1).round();
    pageStore.getRangeFor{{ fqClass relation.name }}(ownerStore, queryLimit: tableQueryLimit).catchError((error) => ErrorHandler.showErrorSnack(context, error));

    var dialogHelperStore = {{ fqClass relation.name }}{{ className relation.target.name }}DialogFor{{fqClass page.name}}PageHelperStore();

    Map<FilterStore, Widget> filterStoreWidgetMap = {
    {{# each tableFilters as |filter|}}
            {{# each filter.attributeType.dataType.operator.members as |filterOperator|}}
                {{# each (likeOperationHelperList filterOperator) as |likeOperator| }}
                    dialogHelperStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{# if (isFilterOperationLike filterOperator)}}{{ fqClass likeOperator }}{{ else }}{{ className filterOperator.name }}{{/ if }}Filter'] :
                    {{# if (isStringType filter.attributeType.dataType) }}
            JudoInputText(
                col: 1,
                label: dialogHelperStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{# if (isFilterOperationLike filterOperator)}}{{ fqClass likeOperator }}{{ else }}{{ className filterOperator.name }}{{/ if }}Filter'].getWidgetLabel(context),
                onChanged: (value) => dialogHelperStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{# if (isFilterOperationLike filterOperator)}}{{ fqClass likeOperator }}{{ else }}{{ className filterOperator.name }}{{/ if }}Filter'].setFilterValue({{# if (isFilterOperationLike filterOperator)}}{{# if (isFilterOperationTypeLikeContain likeOperator) }}'%' + {{/ if }}value + '%'{{ else }}value{{/ if }}),
                onSubmitted: (_) => pageStore.getRangeFor{{ fqClass relation.name }}(
                  ownerStore,
                  queryLimit: tableQueryLimit,
                  filterStoreList: dialogHelperStore.stringFilterStoreMap.values.where((element) => element.filterEnabled).toList(),
                ).catchError((error) => ErrorHandler.showErrorSnack(context, error)),
            ),
                    {{/ if }}
                    {{~# if (isNumericType filter.attributeType.dataType) }}
            JudoNumericInput(
                col: 1,
                label: dialogHelperStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].getWidgetLabel(context),
                onChanged: (value) => dialogHelperStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].setFilterValue({{ dartType filter.attributeType.dataType }}.parse(value)),
                onSubmitted: (_) => pageStore.getRangeFor{{ fqClass relation.name }}(
                  ownerStore,
                  queryLimit: tableQueryLimit,
                  filterStoreList: dialogHelperStore.stringFilterStoreMap.values.where((element) => element.filterEnabled).toList(),
                ).catchError((error) => ErrorHandler.showErrorSnack(context, error)),
            ),
                    {{/ if }}
                    {{~# if (isDateType filter.attributeType.dataType) }}
            JudoDateInput(
                col: 1,
                label: dialogHelperStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].getWidgetLabel(context),
                onChanged: (value) => dialogHelperStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].setFilterValue(value),
                onSubmitted: (_) => pageStore.getRangeFor{{ fqClass relation.name }}(
                  ownerStore,
                  queryLimit: tableQueryLimit,
                  filterStoreList: dialogHelperStore.stringFilterStoreMap.values.where((element) => element.filterEnabled).toList(),
                ).catchError((error) => ErrorHandler.showErrorSnack(context, error)),
            ),
                    {{/ if }}
                    {{~# if (isTimestampType filter.attributeType.dataType) }}
            JudoDateTimeInput(
                col: 1,
                label: dialogHelperStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].getWidgetLabel(context),
                onChanged: (value) => dialogHelperStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].setFilterValue(value),
                onSubmitted: (_) => pageStore.getRangeFor{{ fqClass relation.name }}(
                  ownerStore,
                  queryLimit: tableQueryLimit,
                  filterStoreList: dialogHelperStore.stringFilterStoreMap.values.where((element) => element.filterEnabled).toList(),
                ).catchError((error) => ErrorHandler.showErrorSnack(context, error)),
            ),
                    {{/ if }}
                    {{~# if (isBooleanType filter.attributeType.dataType) }}
            Observer(
                builder: (_) => JudoSwitch(
                    col: 1,
                    label: dialogHelperStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].getWidgetLabel(context),
                    initialValue: dialogHelperStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].filterValue,
                    onChanged: (value) {
                        dialogHelperStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].setFilterValue(value);
                        pageStore.getRangeFor{{ fqClass relation.name }}(
                          ownerStore,
                          queryLimit: tableQueryLimit,
                          filterStoreList: dialogHelperStore.stringFilterStoreMap.values.where((element) => element.filterEnabled).toList(),
                        ).catchError((error) => ErrorHandler.showErrorSnack(context, error));
                    },
                )
            ),
                    {{/ if }}
                    {{~# if (isEnumType filter.attributeType.dataType) }}
            Observer(
                builder: (_) => JudoComboBox<{{ className filter.attributeType.dataType.name }}>(
                    col: 1,
                    label: dialogHelperStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].getWidgetLabel(context),
                    onChanged: (value) {
                        dialogHelperStore.stringFilterStoreMap['{{ variable filter.attributeType.name }}{{ className filterOperator.name }}Filter'].setFilterValue(value);
                        pageStore.getRangeFor{{ fqClass relation.name }}(
                          ownerStore,
                          queryLimit: tableQueryLimit,
                          filterStoreList: dialogHelperStore.stringFilterStoreMap.values.where((element) => element.filterEnabled).toList(),
                        ).catchError((error) => ErrorHandler.showErrorSnack(context, error));
                    },
                    items: {{ className attributeType.dataType.name }}.values,
                    dropdownMenuShow: (value) => new DropdownMenuItem<{{ className attributeType.dataType.name }}>(
                        value: value,
                        child: new Text(value.toString().split('.').last)
                    ),
                )
            ),
                    {{/ if }}
                {{/each}}
            {{/each}}
    {{/ each }}
    };

    ObservableList<String> selected = <String>[].asObservable();
    var tableHelperStore = TableHelperStore(selected, ({{ fqClass relation.target.name }}Store value) => value.internal__identifier);

  return await showDialog<{{# if relation.isCollection }}List<{{ fqClass relation.target.name }}Store>{{ else }}{{ fqClass relation.target.name }}Store{{/ if }}>(
    context: context,
    builder: (context) {
      return AlertDialog(
          content: GestureDetector(
            onTap: () => FocusScope.of(context).requestFocus(new FocusNode()),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Column(
                  children: getInputFilterWidgets(
                    filterStoreWidgetMap,
                    () => pageStore.getRangeFor{{ fqClass relation.name }}(
                        ownerStore,
                        queryLimit: tableQueryLimit,
                        filterStoreList: dialogHelperStore.stringFilterStoreMap.values.where((element) => element.filterEnabled).toList(),
                    ).catchError((error) => ErrorHandler.showErrorSnack(context, error)), 
                  ),
                ),
                Row(
                  children: [
                    JudoButton(
                        key: addFilterButtonKey,
                        col: 1,
                        alignment: Alignment.center,
                        icon: Icon(Icons.add),
                        label: 'Add filter',
                        onPressed: () async {
                            FilterStore selectedAttribute = await judoShowMenu(
                                buttonKey: addFilterButtonKey,
                                items: getPopupMenuAttributeItems(context, dialogHelperStore.stringFilterStoreMap.values.toList()),
                                context: context,
                            );
                            if (selectedAttribute != null) {
                                FilterStore result = await judoShowMenu(
                                    buttonKey: addFilterButtonKey,
                                    items: getPopupMenuOperationItemsByAttribute(context, dialogHelperStore.stringFilterStoreMap.values.toList(), selectedAttribute),
                                    context: context,
                                );
                                if (result != null) {
                                    result.changeFilterEnabled();
                                }
                            }
                        },
                    ),
                    Observer(
                      builder: (_) => dialogHelperStore.searchButtonEnabled ? 
                        JudoButton(
                          col: 1,
                          alignment: Alignment.center,
                          icon: Icon(Icons.search),
                          label: 'Search',
                          onPressed: () async {
                              pageStore.getRangeFor{{ fqClass relation.name }}(
                                  ownerStore,
                                  queryLimit: tableQueryLimit,
                                  filterStoreList: dialogHelperStore.stringFilterStoreMap.values.where((element) => element.filterEnabled).toList(),
                              ).catchError((error) => ErrorHandler.showErrorSnack(context, error));
                          },
                      ) : JudoSpacer(col: 1),
                    ),
                  ],
                ),
                Row(
                  children: [
                    // ignore: missing_return
                    Observer(builder: (_) {
                      switch(pageStore.{{ fqVariable relation.name }}StoreFuture.status){
                        case FutureStatus.pending:
                          return JudoLoadingProgress();
                        case FutureStatus.rejected:
                          return Container();
                        case FutureStatus.fulfilled:
                          var dataInfo = {{ fqClass table.pageDefinition.name }}{{ fqClass table.name }}DialogTable(context, disabled: false);
                          return JudoSelectorTable(
                            disabled: false,
                            collectionSelector: {{ relation.isCollection}},
                            col: 1,
                            row: {{ table.row }} >= 6 ? {{ table.row }} : 6,
                            dataInfo: dataInfo,
                            sortAscending: pageStore.{{ fqVariable relation.name }}SortAsc,
                            sortColumnIndex: pageStore.{{ fqVariable relation.name }}SortColumnIndex,
                            onSort: (int columnIndex, bool asc) {
                                pageStore.{{ fqVariable relation.name }}SetSortRange(
                                  ownerStore,
                                  context,
                                  dataInfo.getColumnFieldByIndex(columnIndex, asc),
                                  columnIndex,
                                  asc,
                                  dataInfo.getSortComparator(columnIndex, asc),
                                  filterStoreList: dialogHelperStore.stringFilterStoreMap.values.where((element) => element.filterEnabled).toList(),
                              );
                            },
                            rowList: pageStore.{{ fqVariable relation.name }}StoreRangeList,
                            multiSelectAction: ({{ fqClass relation.target.name }}Store element) => tableHelperStore.selectRow(element),
                            singleSelectAction: ({{ fqClass relation.target.name }}Store element) => tableHelperStore.singleSelectRow(element),
                            multiSelectedComparator: ({{ fqClass relation.target.name }}Store element) => tableHelperStore.selected.contains(tableHelperStore.getId(element)),
                            singleSelectedComparator: ({{ fqClass relation.target.name }}Store element) => tableHelperStore.singleSelected == tableHelperStore.getId(element),
                          );
                      }
                    }),
                  ],
                ),
                Row(
                    children: [
                        Padding(
                            padding: JudoComponentCustomizer.get().getDefaultPadding(),
                            child: Observer(
                                builder: (_) => Text(
                                    AppLocalizations.of(context).lookUpValue(context, 'Showed rows: ') + '${pageStore.{{ fqVariable relation.name }}StoreRangeList.length}',
                                    style: TextStyle(
                                        fontSize: 12,
                                        color: Colors.black54
                                    ),
                                ),
                            ),
                        ),
                    ],
                )
              ],
            ),
          ),
        actions: [
          Padding(
            padding: const EdgeInsets.all(10.0),
            child: Observer(
              builder: (_) => ElevatedButton(
                child: Text('Select'),
                onPressed: tableHelperStore.selectButtonEnabled ? () {
                  var result = pageStore.{{ fqVariable relation.name }}StoreRangeList
                        {{# if relation.isCollection }}
                        .where((element) => selected.contains(element.internal__identifier))
                        .toList();
                        {{ else }}
                        .firstWhere((element) => tableHelperStore.singleSelected == element.internal__identifier, orElse: () => null);
                        {{/ if }}
                  Navigator.of(context).pop(result);
                } : null,
              ),
            ),
          ),
        ],
      );
    },
  );
{{/unless}}
{{/ unless}}
{{/ if }}
}
{{/ with }}
{{/with}}
