{{ log 'Dialog generation for' (variable application.name) '-' (fqClass page.name) level='info' }}
//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}
// Page: {{ page.name }}
// Table: {{ table.name }}

part of {{ pageLibraryName application.name page.name }};

{{# with table.dataElement as |relation| }}
class {{ dialogStoreClassName page relation.name }} extends _{{ dialogStoreClassName page relation.name }} with _${{ dialogStoreClassName page relation.name }} {}

abstract class _{{ dialogStoreClassName page relation.name }} with Store {

    final Map<String, FilterStore> stringFilterStoreMap = {
    {{# each table.filters as |filter| }}
        '{{ variable filter.attributeType.name }}' : FilterStore(attributeName: '{{ variable filter.attributeType.name }}', attributeLabel: '{{ filter.label }}', filterType: FilterType.{{ filterDataType filter.attributeType.dataType }}{{# if (isEnumType filter.attributeType.dataType) }}, enumValues: {{ className filter.attributeType.dataType.name }}.values{{/ if }}),
    {{/ each }}
    };

    // String mask = '{
    {{~# each (getAttributeTypeNamesFromColumnsAndAttributes table.filters relation.target.attributes) as |attributeName| ~}}
        {{ variable attributeName }}{{# unless @last }},{{/ unless }}
    {{~/ each ~}}
    }';

    int tableQueryLimit = ({{ table.row }}-2).round() < 5 ? 5 : ({{ table.row }}-2).round();

    @computed
    double get getInputWidgetsHeight => availableFilterList.length * JudoComponentCustomizer.get().getLineHeight();

    @computed
    bool get searchButtonEnabled => availableFilterList.isNotEmpty;

    @observable
    ObservableList<FilterStore> availableFilterList = <FilterStore>[].asObservable();

    @action
    void addNewFilter(FilterStore newFilterStore) => availableFilterList.add(FilterStore.clone(newFilterStore));
}

Future<{{# if relation.isCollection }}List<{{ storeClassName relation.target.name }}>{{ else }}{{ storeClassName relation.target.name }}{{/ if }}> judoSelect{{ dialogClassName page relation.name }}({@required BuildContext context, {{ pageStoreClassName page.name }} pageStore{{# unless (isAccessTablePage page) }}, {{ storeClassName relation.owner.name }} ownerStore{{/ unless }}, bool dialogTypeAdder = false  }) async {
{{# if relation.isRelationBehaviourTypeRangeable }}
    {{# unless (isAccessTablePage page) }}
        {{# unless relation.isMemberTypeTransient }}
    var addFilterButtonKey = GlobalKey();

    var dialogHelperStore = {{ dialogStoreClassName page relation.name }}();

    pageStore.getRangeFor{{ fqClass relation.name }}(
        ownerStore,
        queryLimit: dialogHelperStore.tableQueryLimit,
        // mask: dialogHelperStore.mask,
    ).catchError((error) => ErrorHandler.showErrorSnack(context, error.message));

    {{# if relation.isCollection }}
    ObservableList<{{ storeClassName relation.target.name }}> selected = ObservableList.of(ownerStore.{{ variable relation.name }});
    List<{{ storeClassName relation.target.name }}> alreadyAddedItems = List.of(selected);
    {{ else }}
    ObservableList<{{ storeClassName relation.target.name }}> selected = <{{ storeClassName relation.target.name }}>[].asObservable();
    {{/ if }}

    var tableHelperStore = TableHelperStore(selected, ({{ storeClassName relation.target.name }} value) => value?.internal__identifier);
    {{# unless relation.isCollection }}
    if (ownerStore.{{ variable relation.name }} != null) {
        tableHelperStore.singleSelected = ownerStore.{{ variable relation.name }};
    }
    {{/ unless }}

  return await showDialog<{{# if relation.isCollection }}List<{{ storeClassName relation.target.name }}>{{ else }}{{ storeClassName relation.target.name }}{{/ if }}>(
    context: context,
    builder: (context) {
      return AlertDialog(
        content: SingleChildScrollView( 
          child: GestureDetector(
            onTap: () => FocusScope.of(context).requestFocus(new FocusNode()),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Row(
                  children: [
                    JudoButton(
                        key: addFilterButtonKey,
                        col: 1,
                        alignment: Alignment.center,
                        icon: Icon(Icons.add),
                        label: 'Add filter',
                        onPressed: () async {
                            FilterStore selectedAttribute = await judoShowMenu<FilterStore>(
                                buttonKey: addFilterButtonKey,
                                items: getPopupMenuAttributeItems(context, dialogHelperStore.stringFilterStoreMap.values.toList()),
                                context: context,
                            );
                            if (selectedAttribute != null) {
                                selectedAttribute.setWidgetLabel(context);
                                dialogHelperStore.addNewFilter(selectedAttribute);
                            }
                        },
                    ),
                    Observer(
                      builder: (_) => dialogHelperStore.searchButtonEnabled ? 
                        JudoButton(
                          col: 1,
                          alignment: Alignment.center,
                          icon: Icon(Icons.search),
                          label: 'Search',
                          onPressed: () async {
                              pageStore.getRangeFor{{ fqClass relation.name }}(
                                  ownerStore,
                                  queryLimit: dialogHelperStore.tableQueryLimit,
                                  filterStoreList: dialogHelperStore.availableFilterList,
                                  // mask: dialogHelperStore.mask,
                              ).catchError((error) => ErrorHandler.showErrorSnack(context, error));
                          },
                      ) : JudoSpacer(col: 1),
                    ),
                  ],
                ),
                Observer(
                  builder: (_) => Container(
                    height: dialogHelperStore.getInputWidgetsHeight,
                    width: 400,
                    child: Column(
                      children: getInputFilterWidgetsForDialog(
                        context,
                        dialogHelperStore.availableFilterList,
                        () => pageStore.getRangeFor{{ fqClass relation.name }}(
                            ownerStore,
                            queryLimit: dialogHelperStore.tableQueryLimit,
                            filterStoreList: dialogHelperStore.availableFilterList,
                            // mask: dialogHelperStore.mask,
                        ).catchError((error) => ErrorHandler.showErrorSnack(context, error)), 
                      ),
                    ),
                  ),
                ),
                Row(
                  children: [
                    // ignore: missing_return
                    Observer(builder: (_) {
                      switch(pageStore.{{ variable relation.owner.name }}{{ fqClass relation.name }}StoreRangeFuture.status){
                        case FutureStatus.pending:
                          return JudoLoadingProgress();
                        case FutureStatus.rejected:
                          return Container();
                        case FutureStatus.fulfilled:
                          var dataInfo = {{ dialogTableClassName table.pageDefinition table.dataElement.name }}(context, disabled: false);
                          return JudoSelectorTable(
                            alignment: Alignment.center,
                            disabled: false,
                            collectionSelector: {{ relation.isCollection }},
                            col: 1,
                            row: {{ table.row }}-1 >= 6 ? {{ table.row }}-1 : 6,
                            dataInfo: dataInfo,
                            sortAscending: pageStore.{{ fqVariable relation.name }}SortAscRange,
                            sortColumnIndex: pageStore.{{ fqVariable relation.name }}SortColumnIndexRange,
                            onSort: (int columnIndex, bool asc) {
                                pageStore.{{ fqVariable relation.name }}SetSortRange(
                                  ownerStore,
                                  context,
                                  dataInfo.getColumnFieldByIndex(columnIndex, asc),
                                  columnIndex,
                                  asc,
                                  dataInfo.getSortComparator(columnIndex, asc),
                                  filterStoreList: dialogHelperStore.availableFilterList,
                                  // mask: dialogHelperStore.mask,
                              );
                            },
                            rowList: pageStore.{{ fqVariable relation.name }}StoreRangeList,
                            dialogTypeAdder: dialogTypeAdder,
                            {{# if relation.isCollection }}
                            alreadyAddedItemsComparator: ({{ storeClassName relation.target.name }} element) => alreadyAddedItems.firstWhere((selected) => tableHelperStore.getId(element) == tableHelperStore.getId(selected), orElse: () => null) != null,
                            {{/ if }}
                            multiSelectAction: ({{ storeClassName relation.target.name }} element) => tableHelperStore.selectRow(element),
                            singleSelectAction: ({{ storeClassName relation.target.name }} element) => tableHelperStore.singleSelectRow(element),
                            multiSelectedComparator: ({{ storeClassName relation.target.name }} element) => tableHelperStore.selected.firstWhere((selected) => tableHelperStore.getId(element) == tableHelperStore.getId(selected), orElse: () => null) != null,
                            singleSelectedComparator: ({{ storeClassName relation.target.name }} element) => tableHelperStore.getId(tableHelperStore.singleSelected) == tableHelperStore.getId(element),
                          );
                      }
                    }),
                  ],
                ),
                Row(
                    children: [
                        Padding(
                            padding: JudoComponentCustomizer.get().getDefaultPadding(),
                            child: Observer(
                                builder: (_) => Text(
                                    '${pageStore.{{ variable relation.name }}TableForRangeItemsRangeStart} - ${pageStore.{{ variable relation.name }}TableForRangeItemsRangeEnd}',
                                    style: JudoComponentCustomizer.get().getRowCounterTextStyle(Theme.of(context)),
                                ),
                            ),
                        ),
                        Observer(
                            builder: (_) => Padding(
                                padding: JudoComponentCustomizer.get().getDefaultPadding(),
                                child: ElevatedButton(
                                    onPressed: pageStore.previousButtonEnableFor{{ fqClass relation.name }}Range ? () async {
                                        await pageStore.getRangeFor{{ fqClass relation.name }}(
                                            ownerStore,
                                            queryLimit: dialogHelperStore.tableQueryLimit,
                                            filterStoreList: dialogHelperStore.availableFilterList,
                                            // mask: dialogHelperStore.mask,
                                            isNext: false,
                                        ).catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
                                    } : null,
                                    child: Text(AppLocalizations.of(context).lookUpValue(context, 'Previous')),
                                ),
                            ),
                        ),
                        Observer(
                            builder: (_) => Padding(
                                padding: JudoComponentCustomizer.get().getDefaultPadding(),
                                child: ElevatedButton(
                                    onPressed: pageStore.nextButtonEnableFor{{ fqClass relation.name }}Range ? () async {
                                        await pageStore.getRangeFor{{ fqClass relation.name }}(
                                            ownerStore,
                                            queryLimit: dialogHelperStore.tableQueryLimit,
                                            filterStoreList: dialogHelperStore.availableFilterList,
                                            // mask: dialogHelperStore.mask,
                                            isNext: true,
                                        ).catchError((error) => ErrorHandler.showErrorSnack(context, error.message));
                                    } : null,
                                    child: Text(AppLocalizations.of(context).lookUpValue(context, 'Next')),
                                ),
                            ),
                        ),
                    ],
                )
              ],
            ),
          ),
        ),
        actions: [
          Padding(
            padding: const EdgeInsets.all(10.0),
            child: Observer(
              builder: (_) => ElevatedButton(
                child: Text('Select'),
                onPressed: tableHelperStore.selectButtonEnabled ? () {
                  {{# if relation.isCollection }}List<{{ storeClassName relation.target.name }}>{{ else }}{{ storeClassName relation.target.name }}{{/ if }} result;
                {{# if relation.isCollection }}
                  if (dialogTypeAdder) {
                    result = selected
                        .where((element) => alreadyAddedItems.firstWhere((selected) => tableHelperStore.getId(element) == tableHelperStore.getId(selected), orElse: () => null) == null)
                        .toList();
                  } else {
                {{/ if }}
                    result = {{# if relation.isCollection }}selected{{ else }}tableHelperStore.singleSelected{{/ if }};
                {{# if relation.isCollection }}
                  }
                {{/ if }}
                  Navigator.of(context).pop(result);
                } : null,
              ),
            ),
          ),
        ],
      );
    },
  );
        {{/ unless }}
    {{/ unless }}
{{/ if }}
}
{{/ with }}
