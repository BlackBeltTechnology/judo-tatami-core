{{~ log 'Text input field generation for' (variable application.name) '-' (fqClass page.name)'page'(variable page.dataElement.target.name) attributeType.name level='debug' ~}}
{{# if addDebugToTemplate }}//START xmi:id="{{ getXMIID this }}" textinput.dart.hbs-----{{ page.dataElement.target.name }}----------------------------------------------------------------------------{{/ if }}
Observer(
    builder: (_) => JudoInputText(
        key: {{# if (isViewTypePage page) }}UniqueKey(){{ else }}inputWidgetKeyMap['{{ name }}']{{/ if }},
        {{# if (isPageValidatable page) }}
        errorMessage: pageStore.validationAttributeErrorMessageMap['{{ variable attributeType.name }}'].message,
        {{/ if }}
        col: {{ col }},
        {{# neq row 1.0 }}row: {{ row }},{{/ neq }}
        maxLength: {{ attributeType.dataType.maxLength }} ?? 250,
        {{# if disabled }}
            disabled: true,
        {{ else if enabledBy }}
            disabled: !((targetStore?.{{ variable enabledBy.name }}) ?? false),
        {{/ if }}
        {{# if this.isLabelVisible }}
        label: AppLocalizations.of(context).lookUpValue(context, '{{ this.label }}'),
        {{/ if }}
        {{# if this.isIconVisible }}
        icon: Icon(getIconByString('{{ this.icon.name }}')),
        {{/ if }}
        {{# if isInCard }}inCard: true,{{/ if }}
        initialValue: targetStore.{{ variable attributeType.name }},
        readOnly: {{# if (isViewTypePage page) }}true{{ else }}{{ attributeType.isReadOnly }}{{/ if }},
        {{# unless (isViewTypePage page) }}
        {{# if attributeType.isRequired }}mandatory: true,{{/ if }}
        onChanged: (value) => targetStore.set{{ className attributeType.name }}(value.toString()),
        {{/ unless }}
    )
),
{{# if addDebugToTemplate }}//END textinput.dart.hbs-----{{ page.dataElement.target.name }}------------------------------------------------------------------------------{{/ if }}
