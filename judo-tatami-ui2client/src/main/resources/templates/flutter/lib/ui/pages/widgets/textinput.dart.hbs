{{~ log 'Text input field generation for' (variable application.name) '-' (fqClass page.name)'page'(variable page.dataElement.target.name) attributeType.name level='debug' ~}}
//START xmi:id="{{ getXMIID this }}" textinput.dart.hbs-----{{ page.dataElement.target.name }}----------------------------------------------------------------------------
Observer(
    builder: (_) => JudoInputText(
        key: {{# if (isViewTypePage page) }}UniqueKey(){{ else }}inputWidgetKeyMap['{{ name }}']{{/ if }},
        {{# if (isPageValidatable page) }}
        errorMessage: pageStore.validationAttributeErrorMessageMap['{{ variable attributeType.name }}'].message,
        {{/ if }}
        col: {{ col }},
        row: {{ row }},
        maxLength: {{ attributeType.dataType.maxLength }} ?? 250,
        disabled: {{ disabled }}{{# if enabledBy }} || !((targetStore?.{{ variable enabledBy.name }}) ?? false){{/ if }},
        {{# if this.isLabelVisible }}
        label: AppLocalizations.of(context).lookUpValue(context, '{{ this.label }}'),
        {{/ if }}
        {{# if this.isIconVisible }}
        icon: Icon(getIconByString('{{ this.icon.name }}')),
        {{/ if }}
        inCard: {{ isInCard }},
        initialValue: targetStore.{{ variable attributeType.name }},
        readOnly: {{# if (isViewTypePage page) }}true{{ else }}{{ attributeType.isReadOnly }}{{/ if }},
        {{# unless (isViewTypePage page) }}
        mandatory: {{ attributeType.isRequired }},
        onChanged: (value) => targetStore.set{{ className attributeType.name }}(value.toString()),
        {{/ unless }}
    )
),
//END textinput.dart.hbs-----{{ page.dataElement.target.name }}------------------------------------------------------------------------------
