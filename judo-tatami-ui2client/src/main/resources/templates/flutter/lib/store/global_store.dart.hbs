//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}

part of {{ variable ap.name }}.store;

class {{ fqClass ap.name }}GlobalStore extends _{{ fqClass ap.name }}GlobalStore
    with _${{ fqClass ap.name }}GlobalStore {}

abstract class _{{ fqClass ap.name }}GlobalStore with Store {

    {{ fqClass ap.name }}Repository
      _{{ fqVariable ap.name }}Repository =
        {{ fqClass ap.name }}Repository();

    {{# each ap.relations}}
    ///////////////////////////////////////////////////////////
    // {{ name }}
    ///////////////////////////////////////////////////////////
    {{ fqClass ap.name }}{{ className name }}DefaultRepository
      _{{ variable name }}Repository =
        {{ fqClass ap.name }}{{ className name }}DefaultRepository();

    @observable
    List<{{ fqClass target.name }}Store>
      {{ variable name }}StoreList =
        ObservableList<{{ fqClass target.name }}Store>();

    @observable
    {{ fqClass target.name }}Store current{{ className name }};

    @observable
    {{ fqClass target.name }}Store edit{{ className name }};

    @observable
    {{ fqClass target.name }}Store new{{ className name }};

    @action
    void select{{ className name }}({{ fqClass target.name }}Store {{ variable target.name }}Store) {
      current{{ className name }} = {{ variable target.name }}Store;

      edit{{ className name }} = {{ fqClass target.name }}Store.clone(current{{ className name }});
    }

    @action
    Future create{{ className name }}() async {
      current{{ className name }} =
        {{fqClass target.name }}Store.clone(edit{{ className name }});

      await _{{ variable name }}Repository.create{{ className name }}(
        current{{ className name }});

      {{ variable name }}StoreList.add(current{{ className name }});
    }

    @action
    Future update{{ className name }}() async {
      current{{ className name }} =
        {{ fqClass target.name }}Store.clone(edit{{ className name }});

      await _{{ variable name }}Repository.update{{ className name }}(current{{ className name }});
    }

    @action
    Future remove{{ className name }}() async {
      await _{{ fqVariable name }}Repository.remove{{ className name }}(current{{ className name }});
      {{ variable name }}StoreList.remove(current{{ className name }});
    }

    @action
    Future get{{ className name }}() async {
      {{ variable name }}StoreList.clear();
      await _{{ variable name }}Repository.get{{ className name }}({{ variable name }}StoreList);
    }

        {{# each target.relations}}
    ///////////////////////////////////////////////////////////
    // {{../name}} -> {{ ../target.name}}.{{ name }}
    ///////////////////////////////////////////////////////////
    {{ fqClass ap.name }}{{ fqClass ../name }}{{ fqClass ../target.name }}{{ className name }}Repository
      _{{ variable ../name }}{{ fqClass ../target.name }}{{ className name }}Repository =
        {{ fqClass ap.name }}{{ fqClass ../name }}{{ fqClass ../target.name }}{{ className name }}Repository();

    {{# if isCollection }}
    @observable
    List<{{ fqClass target.name }}Store>
      {{ variable ../name }}{{ fqClass ../target.name }}{{ className name }}StoreList =
        ObservableList<{{ fqClass target.name }}Store>();
    {{/ if}}

    @observable
    List<{{ fqClass target.name }}Store>
      {{ variable ../name }}{{ fqClass ../target.name }}{{ className name }}StoreRangeForCreateList =
        ObservableList<{{ fqClass target.name }}Store>();

    @observable
    List<{{ fqClass target.name }}Store>
      {{ variable ../name }}{{ fqClass ../target.name }}{{ className name }}StoreRangeForUpdateList =
        ObservableList<{{ fqClass target.name }}Store>();

    @observable
    {{ fqClass target.name }}Store current{{ className ../name }}{{ fqClass ../target.name }}{{ className name }};

    @observable
    {{ fqClass target.name }}Store edit{{ className ../name }}{{ fqClass ../target.name }}{{ className name }};

    @observable
    {{ fqClass target.name }}Store new{{ className ../name }}{{ fqClass ../target.name }}{{ className name }};

    @action
    void select{{ className ../name }}{{ fqClass ../target.name }}{{ className name }}({{ fqClass target.name }}Store {{ variable target.name }}Store) {
      current{{ className ../name }}{{ fqClass ../target.name }}{{ className name }} = {{ variable target.name }}Store;

      edit{{ className ../name }}{{ fqClass ../target.name }}{{ className name }} = {{ fqClass target.name }}Store.clone(
        current{{ className ../name }}{{ fqClass ../target.name }}{{ className name }});
    }

    @action
    Future create{{ className ../name }}{{ fqClass ../target.name }}{{ className name }}() async {
      current{{ className ../name }}{{ fqClass ../target.name }}{{ className name }} =
        {{fqClass target.name }}Store.clone(edit{{ className ../name }}{{ fqClass ../target.name }}{{ className name }});
            {{# if isCollection }}
      await _{{ variable ../name }}{{ fqClass ../target.name }}{{ className name }}Repository.create{{ className name }}(
        current{{ className ../name }},
        current{{ className ../name }}{{ fqClass ../target.name }}{{ className name }});
      {{ variable ../name }}{{ fqClass ../target.name }}{{ className name }}StoreList.add(current{{ className ../name }}{{ fqClass ../target.name }}{{ className name }});
            {{ else }}
      await _{{ variable ../name }}{{ fqClass ../target.name }}{{ className name }}Repository.create{{ className name }}(
        current{{ className ../name }},
        current{{ className ../name }}{{ fqClass ../target.name }}{{ className name }});
            {{/ if}}
    }

    @action
    Future update{{ className ../name }}{{ fqClass ../target.name }}{{ className name }}() async {
      current{{ className ../name }}{{ fqClass ../target.name }}{{ className name }} =
        {{ fqClass target.name }}Store.clone(edit{{ className ../name }}{{ fqClass ../target.name }}{{ className name }});

      await _{{ variable ../name }}{{ fqClass ../target.name }}{{ className name }}Repository.update{{ className name }}(
        current{{ className ../name }},
        current{{ className ../name }}{{ fqClass ../target.name }}{{ className name }});
    }

    {{# if isCollection }}
    @action
    Future remove{{ className ../name }}{{ fqClass ../target.name }}{{ className name }}() async {
      await _{{ variable ../name }}{{ fqClass ../target.name }}{{ className name }}Repository.remove{{ className name }}(
        current{{ className ../name }},
        current{{ className ../name }}{{ fqClass ../target.name }}{{ className name }});
      {{ variable ../name }}{{ fqClass ../target.name }}{{ className name }}StoreList.remove(current{{ className ../name }}{{ fqClass ../target.name }}{{ className name }});
    }
    {{/ if }}

    @action
    Future get{{ className ../name }}{{ fqClass ../target.name }}{{ className name }}() async {
      {{# if isCollection }}
      {{ variable ../name }}{{ fqClass ../target.name }}{{ className name }}StoreList.clear();
      await _{{ variable ../name }}{{ fqClass ../target.name }}{{ className name }}Repository.get{{ className name }}(
        current{{ className ../name }},
      {{ variable ../name }}{{ fqClass ../target.name }}{{ className name }}StoreList);
      {{ else }}
      await _{{ variable ../name }}{{ fqClass ../target.name }}{{ className name }}Repository.get{{ className name }}(
        current{{ className ../name }},
        current{{ className ../name }}{{ fqClass ../target.name }}{{ className name }});
      {{/ if }}
    }



    @action
    Future getRangeForCreate{{ className ../name }}{{ fqClass ../target.name }}{{ className name }}() async{
      {{ variable ../name }}{{ fqClass ../target.name }}{{ className name }}StoreRangeForCreateList.clear();
      await _{{ fqVariable ../name }}Repository.get{{ className name }}RangeForCreate{{ className ../name }}(
        current{{ className ../name }},
        {{ variable ../name }}{{ fqClass ../target.name }}{{ className name }}StoreRangeForCreateList);
    }


    @action
    Future getRangeForUpdate{{ className ../name }}{{ fqClass ../target.name }}{{ className name }}() async{
    {{ variable ../name }}{{ fqClass ../target.name }}{{ className name }}StoreRangeForUpdateList.clear();
       await _{{ fqVariable ../name }}Repository.get{{ className name }}RangeForUpdate{{ className ../name }}(
         current{{ className ../name }},
         {{ variable ../name }}{{ fqClass ../target.name }}{{ className name }}StoreRangeForUpdateList);
    }

        {{/ each}}
    {{/ each }}

}
