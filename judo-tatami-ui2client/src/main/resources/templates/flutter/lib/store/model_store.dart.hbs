//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}

part of {{ variable application.actor.name }}.store;

class {{ storeClassName self }} extends _{{ storeClassName self }}
    with _${{ storeClassName self }} {

    {{ storeClassName self }}() : super();

    {{ storeClassName self }}.clone({{ storeClassName self }} storeToClone) : super.clone(storeToClone);

}

abstract class _{{ storeClassName self }} with Store {
  _{{ storeClassName self }}();

  _{{ storeClassName self }}.clone({{ storeClassName self }} storeToClone) {
    internal__identifier = storeToClone.internal__identifier;
    internal__signedIdentifier = storeToClone.internal__signedIdentifier;
    internal__referenceIdentifier = storeToClone.internal__referenceIdentifier;
    internal__updatable = storeToClone.internal__updatable ?? true;
    internal__deletable = storeToClone.internal__deletable ?? true;

    //Attributes
    {{# each attributes }}
    {{ variable name }} = storeToClone.{{ variable name }};
    {{/ each }}

    // Relations
    {{# each relations }}
      {{# if isCollection }}
    if (storeToClone.{{ variable name }} != null) {
      {{ variable name }} = ObservableList.of(storeToClone.{{ variable name }});
    } else {
      {{ variable name }} = ObservableList.of([]);
    }
      {{ else }}
    if (storeToClone.{{ variable name }} != null) {
      {{ variable name }} = {{ storeClassName target }}.clone(storeToClone.{{ variable name }});
    } else {
      {{ variable name }} = null;
    }
      {{/ if }}
    {{/ each }}
  }

  // ignore: non_constant_identifier_names
  String internal__identifier;

  // ignore: non_constant_identifier_names
  String internal__signedIdentifier;

  // ignore: non_constant_identifier_names
  String internal__referenceIdentifier = Uuid().v1();

  // ignore: non_constant_identifier_names
  bool internal__updatable = true;

  // ignore: non_constant_identifier_names
  bool internal__deletable = true;

  // Attributes
  {{# each attributes }}

  @observable
  {{# if (isBooleanDataType dataType) }}
  {{ dartType dataType }} {{ variable name }} = false;
  {{ else }}
  {{ dartType dataType }} {{ variable name }};
  {{/ if }}
  {{/ each }}

  // Relations
  {{# each relations }}
    {{# if isCollection }}

  @observable
  var {{ variable name }} = ObservableList<{{ storeClassName target }}>();
    {{ else }}

  @observable
  {{ storeClassName target }} {{ variable name }};
    {{/ if }}
  {{/ each }}


  // Attributes
  {{# each attributes }}
  @action
  void set{{ className name }}({{ dartType dataType }} {{ variable name }}) {
    this.{{ variable name }} = {{ variable name }};
  }
  {{/ each }}

  // Relations
  {{# each relations }}
    {{# if isCollection }}
  @action
  void set{{ className name }}(List<{{ storeClassName target }}> {{ variable name }}) {
    this.{{ variable name }}.clear();
    this.{{ variable name }}.addAll({{ variable name }});
  }
    {{ else }}
  @action
  void set{{ className name }}({{ storeClassName target }} {{ variable name }}) {
    this.{{ variable name }} = {{ variable name }};
  }
    {{/ if }}

{{/ each }}


  @override
  bool operator ==(Object other) =>
    identical(this, other) ||
    other is _{{ storeClassName self }} &&
        runtimeType == other.runtimeType &&
        (
          (
            internal__signedIdentifier == other.internal__signedIdentifier &&
            internal__signedIdentifier != null &&
            other.internal__signedIdentifier != null
          ) || (
            internal__identifier == other.internal__identifier &&
            internal__identifier != null &&
            other.internal__identifier != null
          ) || (
            internal__referenceIdentifier == other.internal__referenceIdentifier &&
            internal__referenceIdentifier != null &&
            other.internal__referenceIdentifier != null
          )
        );

  @override
  int get hashCode => hash3(internal__signedIdentifier, internal__identifier, internal__referenceIdentifier);

  @action
  void updateWith({{ storeClassName self }} storeToClone) {
    internal__identifier = storeToClone.internal__identifier;
    internal__signedIdentifier = storeToClone.internal__signedIdentifier;
    internal__referenceIdentifier = storeToClone.internal__referenceIdentifier;
    internal__updatable = storeToClone.internal__updatable ?? true;
    internal__deletable = storeToClone.internal__deletable ?? true;

    {{# each attributes }}
      {{ variable name }} = storeToClone.{{ variable name }};
    {{/ each }}

    // Relations
    {{# each relations }}
      {{# if isCollection }}
    if (storeToClone.{{ variable name }} != null) {
      {{ variable name }} = ObservableList.of(storeToClone.{{ variable name }});
    } else {
      {{ variable name }} = ObservableList.of([]);
    }
      {{ else }}
    if (storeToClone.{{ variable name }} != null) {
      {{ variable name }} = {{ storeClassName target }}.clone(storeToClone.{{ variable name }});
    } else {
      {{ variable name }} = null;
    }
      {{/ if }}
    {{/ each }}
  }

    ////

    /*
    @observable
    ObservableFuture<NorthwindServicesProductInfoStore> _northwindServicesProductInfoStoreFuture;

    @computed
    StoreState get store__state {
      if (_northwindServicesProductInfoStoreFuture == null ||
       _northwindServicesProductInfoStoreFuture.status == FutureStatus.rejected) {
        return StoreState.initial;
      }
      return _northwindServicesProductInfoStoreFuture.status == FutureStatus.pending
        ? StoreState.loading
        : StoreState.loaded;
    }
    */

}
