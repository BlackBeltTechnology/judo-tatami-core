//////////////////////////////////////////////////////////////////////////////
// G E N E R A T E D    C L A S S
// ------------------------------
// Factory expression: {{{ cleanup template.factoryExpression }}}
// Path expression: {{{ cleanup template.pathExpression }}}
// Overwrite: {{{ cleanup template.overwriteExpression }}}
// Template name: {{ template.templateName }}
// Application: {{ application.name }}

part of {{ variable application.dataElement.name }}.store;

class {{ fqClass name }}Store extends _{{ fqClass name }}Store
    with _${{ fqClass name }}Store {

    {{ fqClass name }}Store() : super();

    {{ fqClass name }}Store.clone({{ fqClass name }}Store {{ fqVariable name }}) : super.clone({{ fqVariable name }});

}

abstract class _{{ fqClass name }}Store with Store {
  _{{ fqClass name }}Store();

  _{{ fqClass name }}Store.clone({{ fqClass name }}Store {{ variable name }}Store) {
    identifier = {{ variable name }}Store.identifier;

    {{# each attributes }}
    {{ variable name }} = {{ variable ../name }}Store.{{ variable name }};
    {{/ each }}

    // Relations
    {{# each relations }}
      {{#  if isCollection }}
    if ({{ variable ../name }}Store.{{ variable name }} != null) {
      {{ variable name }} = ObservableList.of({{ variable ../name }}Store.{{ variable name }});
    } else {
      {{ variable name }} = ObservableList.of([]);
    }
      {{ else }}
    {{ variable name }} = {{ fqClass target.name }}Store.clone({{ variable name }});
      {{/ if }}
    {{/ each }}
  }

  String identifier;

  // Attributes
  {{# each attributes }}

  @observable
  {{ dartType dataType }} {{ variable name }};

  {{/ each }}

  // Relations
  {{# each relations }}
    {{#  if isCollection }}

  @observable
  var {{ variable name }} = ObservableList<{{ fqClass target.name }}Store>();
    {{ else }}

  @observable
  {{ fqClass target.name }}Store {{ variable name }};
    {{/ if }}
  {{/ each }}


  // Attributes
  {{# each attributes }}
  @action
  void set{{ className name }}({{ dartType dataType }} {{ variable name }}) {
    this.{{ variable name }} = {{ variable name }};
  }
  {{/ each}}

  // Relations
  {{#each relations }}
    {{# if isCollection }}
  @action
  void set{{ className name }}(List<{{ fqClass target.name }}Store> {{ variable name }}) {
    this.{{ variable name }}.clear();
    this.{{ variable name }}.addAll({{ variable name }});
  }
    {{ else }}
  @action
  void set{{ className name }}({{ fqClass target.name }}Store {{ variable name }}) {
    this.{{ variable name }} = {{ variable name }};
  }
    {{/ if }}

{{/ each }}


  @override
  bool operator ==(Object other) =>
    identical(this, other) ||
    other is _{{ fqClass name }}Store &&
        runtimeType == other.runtimeType &&
        identifier == other.identifier &&
        identifier != null &&
        other.identifier != null;

  @override
  int get hashCode => identifier.hashCode;
}
