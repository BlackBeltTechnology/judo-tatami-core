import 'package:mobx/mobx.dart';

{{#each relations ~}}
import 'package:{{ dartFileName application.dataElement.name }}/store/{{ dartFileName application.dataElement.name }}/{{ dartFileName target.name }}_store.dart';
{{/each}}

part '{{dartFileName name}}_store.g.dart';

class {{ dartClassName name }}Store extends _{{ dartClassName name }}Store
    with _${{ dartClassName name }}Store {

    {{ dartClassName name }}Store() : super();

    {{ dartClassName name }}Store.clone({{ dartClassName name }}Store {{ dartVariableName name }}) : super.clone({{ dartVariableName name }});
}

abstract class _{{ dartClassName name }}Store with Store {
  _{{ dartClassName name }}Store();

  _{{ dartClassName name }}Store.clone({{ dartClassName name }}Store {{ dartVariableName name }}Store) {
    identifier = {{ dartVariableName name }}.identifier;

    {{#each attributes ~}}
    {{ dartVariableName name }} = {{ dartVariableName ../name }}Store.{{ dartVariableName name }};
    {{/each}}

    // Relations
    {{#each relations ~}}
    {{ dartVariableName name }} = ObservableList.of({{ dartVariableName ../name }}Store.{{ dartVariableName name }});
    {{/each}}
  }

  String identifier;

  // Attributes
  {{#each attributes ~}}
  @observable
  String {{ dartVariableName name }};

  {{/each}}

  // Relations
  {{#each relations ~}}
  @observable
  var {{ dartVariableName name }} = ObservableList<{{ dartClassName target.name }}Store>();

  {{/each}}

  @override
  bool operator ==(Object other) =>
    identical(this, other) ||
    other is _NorthwindExternalAPProductInfoStore &&
        runtimeType == other.runtimeType &&
        identifier == other.identifier &&
        identifier != null &&
        other.identifier != null;

  @override
  int get hashCode => identifier.hashCode;
}
