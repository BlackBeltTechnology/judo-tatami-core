import "model.eol";
import "table.eol";
import "field.eol";

pre {
	var previousModel = PREVIOUS!RdbmsModel.all.first();
	var newModel = NEW!RdbmsModel.all.first();
}

// flattening is not needed, as we don't have separate fieldtypes any more

rule OperationModel
	transform s : NEW!RdbmsModel
	to t : INCREMENTAL!RdbmsModel {
	    t.version = previousModel.version + "_" + newModel.version;
	    t.configuration = new INCREMENTAL!RdbmsConfiguration();
   		t.configuration.dialect = "hsqldb";
		("Created operation model: " + t.version).println();
	}

rule CreateOperationMeta
	transform s : NEW!RdbmsModel
	to t : INCREMENTAL!RdbmsOperationMeta {
		t.previousModel = previousModel;
		t.currentModel = newModel;
		("Created operation meta for " + s.version).println();
}

rule CreateNewTable
	transform s : NEW!RdbmsTable
	to t : INCREMENTAL!RdbmsCreateTableOperation {
	// create table only if not yet exists and has at least one field
	guard : not previousModel.tableExists(s) and s.fields.size() > 0
	    newModel.equivalent("OperationModel").tableOperations.add(t);
		t.name = "Create " + s.name;
	    t.uuid =  s.uuid + "-CreateTable";
	    t.table = s;
		s.uuid.println("Created table: ");
}

rule CreateNewJunctionTable
	transform s : NEW!RdbmsJunctionTable
	to t : INCREMENTAL!RdbmsCreateTableOperation {
	guard : not previousModel.tableExists(s) and s.fields.size() > 0
	    newModel.equivalent("OperationModel").tableOperations.add(t);
		t.name = "Create " + s.name;
	    t.uuid =  s.uuid + "-CreateTable";
	    t.table = s;
		s.uuid.println("Created table: ");
}

rule DeletePreviousTable
	transform s : PREVIOUS!RdbmsTable
	to t : INCREMENTAL!RdbmsDeleteTableOperation {
	guard : not newModel.tableExists(s) or newModel.tableOf(s).fields.size() == 0
	    newModel.equivalent("OperationModel").tableOperations.add(t);
		t.name = "Delete " + s.name;
	    t.uuid =  s.uuid + "-DeleteTable";
	    t.table = s;
		s.uuid.println("Deleted table: ");
}

rule DeletePreviousJunctionTable
	transform s : PREVIOUS!RdbmsJunctionTable
	to t : INCREMENTAL!RdbmsDeleteTableOperation {
	guard : not newModel.tableExists(s) or newModel.tableOf(s).fields.size() == 0
	    newModel.equivalent("OperationModel").tableOperations.add(t);
		t.name = "Delete " + s.name;
	    t.uuid =  s.uuid + "-DeleteTable";
	    t.table = s;
		s.uuid.println("Deleted table: ");
}

@lazy
rule ModifyTableOperationForExistingTable
	transform s : RDBMS!RdbmsTable
	to t : INCREMENTAL!RdbmsModifyTableOperation {
	guard : s.fields.size() > 0
	    newModel.equivalent("OperationModel").tableOperations.add(t);
		t.name = "Modify " + s.name;
	    t.uuid =  s.uuid + "-ModifyTable";
	    t.table = s;
	    t.previousTable = previousModel.tableOf(s);
		s.uuid.println("Modified table: ");
}

@lazy
rule ModifyJunctionTableOperationForExistingTable
	transform s : RDBMS!RdbmsJunctionTable
	to t : INCREMENTAL!RdbmsModifyTableOperation {
	guard : s.fields.size() > 0
	    newModel.equivalent("OperationModel").tableOperations.add(t);
		t.name = "Modify " + s.name;
	    t.uuid =  s.uuid + "-ModifyTable";
	    t.table = s;
	    t.previousTable = previousModel.tableOf(s);
		s.uuid.println("Modified table: ");
}

rule CreateNewValueFieldOnNewTable
	transform f : NEW!RdbmsValueField
	to t : INCREMENTAL!RdbmsCreateFieldOperation {
		guard : not previousModel.tableExists(f.eContainer)
        newModel.tableOf(f.eContainer).equivalent("CreateNewTable").createFieldOperations.add(t);
	    t.uuid =  f.uuid + "-CreateValueField";
	    t.name = "Create " + f.name;
	    t.field = f;
		f.uuid.println("Create new value field on new table: ");
}

rule CreateNewValueFieldOnExistingTable
	transform f : NEW!RdbmsValueField
	to t : INCREMENTAL!RdbmsCreateFieldOperation {
		guard : previousModel.tableExists(f.eContainer) and not previousModel.tableOf(f.eContainer).fieldExists(f)
	    newModel.tableOf(f.eContainer).equivalent("ModifyTableOperationForExistingTable").createFieldOperations.add(t);
	    t.uuid =  f.uuid + "-CreateValueField";
	    t.name = "Create " + f.name;
	    t.field = f;
		f.uuid.println("Create new value field on existing table: ");
}

rule DeletePreviousValueFieldOnExistingTable
	transform f : PREVIOUS!RdbmsValueField
	to t : INCREMENTAL!RdbmsDeleteFieldOperation {
		guard : newModel.tableExists(f.eContainer) and (newModel.tableOf(f.eContainer).fields.size() > 0 and not newModel.tableOf(f.eContainer).fieldExists(f))
	    newModel.tableOf(f.eContainer).equivalent("ModifyTableOperationForExistingTable").deleteFieldOperations.add(t);
	    t.uuid =  f.uuid + "-DeleteValueField";
	    t.name = "Delete " + f.name;

	    t.field = f;
		f.uuid.println("Delete value field on existing table: ");
}

rule CreateNewForeignKeyOnNewTable
	transform f : NEW!RdbmsForeignKey
	to t : INCREMENTAL!RdbmsCreateFieldOperation {
		guard : not previousModel.tableExists(f.eContainer)
        newModel.tableOf(f.eContainer).equivalent("CreateNewTable").createFieldOperations.add(t);
	    t.uuid =  f.uuid + "-CreateForeignKey";
	    t.name = "Create " + f.name;
	    t.field = f;
	    t.isForeignKey = true;
		f.uuid.println("Create new foreign key on new table: ");
}

rule CreateNewForeignKeyOnExistingTable
	transform f : NEW!RdbmsForeignKey
	to t : INCREMENTAL!RdbmsCreateFieldOperation {
		guard : previousModel.tableExists(f.eContainer) and not previousModel.tableOf(f.eContainer).fieldExists(f)
	    newModel.tableOf(f.eContainer).equivalent("ModifyTableOperationForExistingTable").createFieldOperations.add(t);
	    t.uuid =  f.uuid + "-CreateForeignKey";
	    t.name = "Create " + f.name;
	    t.field = f;
	    t.isForeignKey = true;
		f.uuid.println("Create new foreign key on existing table: ");
}

rule DeletePreviousForeignKeyOnExistingTable
	transform f : PREVIOUS!RdbmsForeignKey
	to t : INCREMENTAL!RdbmsDeleteFieldOperation {
		guard : newModel.tableExists(f.eContainer) and not newModel.tableOf(f.eContainer).fieldExists(f)
	    newModel.tableOf(f.eContainer).equivalent("ModifyTableOperationForExistingTable").deleteFieldOperations.add(t);
	    t.uuid =  f.uuid + "-DeleteForeignKey";
	    t.field = f;
	    t.name = "Delete " + f.name;

		f.uuid.println("Delete foreign key on existing table: ");
}

rule CreateNewIdentifierFieldOnNewTable
	transform f : NEW!RdbmsIdentifierField
	to t : INCREMENTAL!RdbmsCreateFieldOperation {
		guard : not previousModel.tableExists(f.eContainer)
        newModel.tableOf(f.eContainer).equivalent("CreateNewTable").createFieldOperations.add(t);
	    t.uuid =  f.uuid + "-CreateIdentifierField";
	    t.name = "Create " + f.name;
	    t.field = f;
	    t.isIdentifierField = true;
		f.uuid.println("Create new identifier field on new table: ");
}

rule CreateNewIdentifierFieldOnExistingTable
	transform f : NEW!RdbmsIdentifierField
	to t : INCREMENTAL!RdbmsCreateFieldOperation {
		guard : previousModel.tableExists(f.eContainer) and not previousModel.tableOf(f.eContainer).fieldExists(f)
	    newModel.tableOf(f.eContainer).equivalent("ModifyTableOperationForExistingTable").createFieldOperations.add(t);
	    t.uuid =  f.uuid + "-CreateIdentifierField";
	    t.name = "Create " + f.name;
	    t.field = f;
	    t.isIdentifierField = true;
		f.uuid.println("Create new identifier field on existing table: ");
}

rule DeletePreviousIdentifierFieldOnExistingTable
	transform f : PREVIOUS!RdbmsIdentifierField
	to t : INCREMENTAL!RdbmsDeleteFieldOperation {
		guard : newModel.tableExists(f.eContainer) and not newModel.tableOf(f.eContainer).fieldExists(f)
	    newModel.tableOf(f.eContainer).equivalent("ModifyTableOperationForExistingTable").deleteFieldOperations.add(t);
	    t.uuid =  f.uuid + "-DeleteIdentifierField";
	    t.field = f;
	    t.name = "Delete " + f.name;

		f.uuid.println("Delete identifier field on existing table: ");
}

rule ModifyExistingValueField
	transform f : PREVIOUS!RdbmsValueField
	to t : INCREMENTAL!RdbmsModifyFieldOperation {
		guard : newModel.tableExists(f.eContainer) and newModel.tableOf(f.eContainer).fieldExists(f) and (f.isAnyChanged(newModel.tableOf(f.eContainer).fieldOf(f)) or not newModel.tableOf(f.eContainer).fieldOf(f).isTypeOf(NEW!RdbmsValueField))
		var n : RDBMS!RdbmsField = newModel.tableOf(f.eContainer).fieldOf(f);

	    newModel.tableOf(f.eContainer).equivalent("ModifyTableOperationForExistingTable").modifyFieldOperations.add(t);
	    t.uuid =  f.uuid + "-ModifyField";
	    t.field = n;
	    t.previousField = f;
	    t.name = "Modify " + f.name;

		f.uuid.println("Modify field: ");

	    if (not n.isTypeOf(NEW!RdbmsValueField)) {
	    	t.changedValueFieldToForeignKey = true;
			"".println("    Value field changed to foreign key");
	    }

        if (f.isSqlTypeChanged(n)) {
            t.typeChanged = true;
            (f.rdbmsTypeName + " -> " + n.rdbmsTypeName).println("    Type changed: ");
        } else if (f.isSizeChanged(n) or f.isPrecisionChanged(n) or f.isScaleChanged(n) or f.isStorageByteChanged(n)) {
            t.sizeChanged = true;
            ("Size: " + f.size  + " -> " + n.size + " Precision: " + f.precision  + " -> " + n.precision + " Scale: " + f.scale  + " -> " + n.scale + " StorageByte: " + f.storageByte  + " -> " + n.storageByte).println("    Type changed: ");
        }

        if (f.isSqlNameChanged(n)) {
            t.sqlNameChanged = true;
            (f.sqlName + " -> " + n.sqlName).println("    Sql name changed: ");
        }

        if (f.isMandatoryChanged(n)) {
            t.mandatoryChanged = true;
        }

}

rule ModifyExistingIdentifierField
	transform f : PREVIOUS!RdbmsIdentifierField
	to t : INCREMENTAL!RdbmsModifyFieldOperation {
		guard : newModel.tableExists(f.eContainer) and newModel.tableOf(f.eContainer).fieldExists(f) and (f.isAnyChanged(newModel.tableOf(f.eContainer).fieldOf(f)) or not newModel.tableOf(f.eContainer).fieldOf(f).isTypeOf(NEW!RdbmsIdentifierField))
		var n : RDBMS!RdbmsField = newModel.tableOf(f.eContainer).fieldOf(f);

	    newModel.tableOf(f.eContainer).equivalent("ModifyTableOperationForExistingTable").modifyFieldOperations.add(t);
	    t.uuid =  f.uuid + "-ModifyField";
	    t.field = n;
	    t.previousField = f;
	    t.name = "Modify " + f.name;

		f.uuid.println("Modify field: ");

        if (f.isSqlTypeChanged(n)) {
            t.typeChanged = true;
            (f.rdbmsTypeName + " -> " + n.rdbmsTypeName).println("    Type changed: ");
        } else if (f.isSizeChanged(n) or f.isPrecisionChanged(n) or f.isScaleChanged(n) or f.isStorageByteChanged(n)) {
            t.sizeChanged = true;
            ("Size: " + f.size  + " -> " + n.size + " Precision: " + f.precision  + " -> " + n.precision + " Scale: " + f.scale  + " -> " + n.scale + " StorageByte: " + f.storageByte  + " -> " + n.storageByte).println("    Type changed: ");
        }

        if (f.isSqlNameChanged(n)) {
            t.sqlNameChanged = true;
            (f.sqlName + " -> " + n.sqlName).println("    Sql name changed: ");
        }

        if (f.isMandatoryChanged(n)) {
            t.mandatoryChanged = true;
        }

}

rule ModifyExistingForeignKey
	transform f : PREVIOUS!RdbmsForeignKey
	to t : INCREMENTAL!RdbmsModifyFieldOperation {
		guard : newModel.tableExists(f.eContainer) and newModel.tableOf(f.eContainer).fieldExists(f) and (f.isAnyChanged(newModel.tableOf(f.eContainer).fieldOf(f)) or not newModel.tableOf(f.eContainer).fieldOf(f).isTypeOf(NEW!RdbmsForeignKey))
		var n : RDBMS!RdbmsField = newModel.tableOf(f.eContainer).fieldOf(f);

		var ee = newModel.tableOf(f.eContainer);

		if (ee.isTypeOf(RDBMS!RdbmsTable)) {
	    	ee.equivalent("ModifyTableOperationForExistingTable").modifyFieldOperations.add(t);
		} else {
			ee.equivalent("ModifyJunctionTableOperationForExistingTable").modifyFieldOperations.add(t);
		}
	    t.uuid =  f.uuid + "-ModifyField";
	    t.field = n;
	    t.previousField = f;
	    t.name = "Modify " + f.name;

		f.uuid.println("Modify field: ");

	    if (not n.isTypeOf(NEW!RdbmsForeignKey)) {
	       	t.changedForeignKeyToValueField = true;
			"".println("    Foreign key changed to Value field");
	    }

        if (f.isSqlTypeChanged(n)) {
            t.typeChanged = true;
            (f.rdbmsTypeName + " -> " + n.rdbmsTypeName).println("    Type changed: ");
        } else if (f.isSizeChanged(n) or f.isPrecisionChanged(n) or f.isScaleChanged(n) or f.isStorageByteChanged(n)) {
            t.sizeChanged = true;
            ("Size: " + f.size  + " -> " + n.size + " Precision: " + f.precision  + " -> " + n.precision + " Scale: " + f.scale  + " -> " + n.scale + " StorageByte: " + f.storageByte  + " -> " + n.storageByte).println("    Type changed: ");
        }

        if (f.isSqlNameChanged(n)) {
            t.sqlNameChanged = true;
            (f.sqlName + " -> " + n.sqlName).println("    Sql name changed: ");
        }

        if (f.isMandatoryChanged(n)) {
            t.mandatoryChanged = true;
        }
}

rule RenameExistingTable
	transform s : NEW!RdbmsTable
	to t : INCREMENTAL!RdbmsModifyTableOperation
	extends ModifyTableOperationForExistingTable {
    	guard : previousModel.tableExists(s) and previousModel.tableOf(s).isSqlNameChanged(s)
        t.sqlNameChanged = true;
        (previousModel.tableOf(s).sqlName + " -> " + s.sqlName).println("    Sql name changed: ");
}
