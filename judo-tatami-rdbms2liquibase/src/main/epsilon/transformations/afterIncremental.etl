import "liquibase/utils/changeset.eol";

/////////////////////////////////////////
// FOREIGN KEY

rule AddAllForeignKeysChangeSet
    transform s : RDBMS!RdbmsForeignKey
    to t : AFTER_INCREMENTAL!ChangeSet {
        guard: newModel.contains(s.eContainer)
        t.id = "add-foreign-keys-to-" + s.eContainer.sqlName;
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "add-foreign-keys";

        if (not afterIncrementalModel.changeSetExists(t.id)) {
            afterIncrementalModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule AddAllForeignKeys
    transform s : RDBMS!RdbmsForeignKey
    to t : AFTER_INCREMENTAL!AddForeignKeyConstraint {
        guard: newModel.contains(s.eContainer)
        t.baseTableName = s.eContainer.sqlName;
        t.baseColumnNames = s.sqlName;
        t.constraintName = s.foreignKeySqlName;
        t.referencedTableName = s.referenceKey.eContainer.sqlName;
        t.referencedColumnNames = s.referenceKey.sqlName;

        afterIncrementalModel.changeSetOf("add-foreign-keys-to-" + s.eContainer.sqlName).addForeignKeyConstraint.add(t);
        ("AddForeignKeyConstraint added: " + t.constraintName + "(" + t.baseTableName + ")").println();
}

// FOREIGN KEY
/////////////////////////////////////////
// UNIQUE CONSTRAINT

rule AddAllUniqueConstraintsChangeSet
    transform s : RDBMS!RdbmsUniqueConstraint
    to t : AFTER_INCREMENTAL!ChangeSet {
        guard: newModel.contains(s.eContainer)
        t.id = "add-unique-constraint-to-" + s.eContainer.sqlName;
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "add-unique-constraint";

        if (not afterIncrementalModel.changeSetExists(t.id)) {
            afterIncrementalModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule AddAllUniqueConstraints
    transform s : RDBMS!RdbmsUniqueConstraint
    to t : AFTER_INCREMENTAL!AddUniqueConstraint {
        guard: newModel.contains(s.eContainer)
        t.tableName = s.eContainer.sqlName;
        t.columnNames = s.fields[0].sqlName;
        if (s.fields.size() > 1) {
            var i = 1;
            while (i < s.fields.size()) {
                t.columnNames += "," + s.fields[i].sqlName;
                i++;
            }
        }

        afterIncrementalModel.changeSetOf("add-unique-constraint-to-" + s.eContainer.sqlName).addUniqueConstraint.add(t);
        ("AddUniqueConstraint added: " + t.columnNames + "(" + t.tableName + ")").println();
}

// UNIQUE CONSTRAINT
/////////////////////////////////////////
// INDEX

rule CreateAllIndexesChangeSet
    transform s : RDBMS!RdbmsIndex
    to t : AFTER_INCREMENTAL!ChangeSet {
        guard: newModel.contains(s.eContainer)
        t.id = "create-indexes-for-" + s.eContainer.sqlName;
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "create-indexes";

        if (not afterIncrementalModel.changeSetExists(t.id)) {
            afterIncrementalModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule CreateAllIndexes
    transform s : RDBMS!RdbmsIndex
    to t : AFTER_INCREMENTAL!CreateIndex {
        guard: newModel.contains(s.eContainer)
        t.tableName = s.eContainer.sqlName;
        t.indexName = s.sqlName;
        t.column = s.fields.collect(f | new AFTER_INCREMENTAL!Column(name = f.sqlName));

        afterIncrementalModel.changeSetOf("create-indexes-for-" + s.eContainer.sqlName).createIndex.add(t);
        ("CreateIndex added: " + t.indexName + "(" + t.tableName + ")").println();
}
