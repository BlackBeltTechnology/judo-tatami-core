/////////////////////////////////////////
// INDEX

rule DropIndexes
    transform s : RDBMS!RdbmsIndex
    to t : BEFORE_INCREMENTAL!DropIndex {
        guard: previousModel.contains(s.eContainer)
        t.tableName = s.eContainer.sqlName;
        t.indexName = s.sqlName;

        beforeIncrementalModel.createChangeSetIfNotExists("drop-indexes-from-" + s.eContainer.sqlName, "drop-indexes", dialect, context)
            .dropIndex.add(t);
        log.info("DropIndex added: " + t.indexName + " (" + t.tableName + ")");
}

// INDEX
/////////////////////////////////////////
// UNIQUE CONSTRAINT

rule DropUniqueConstraints
    transform s : RDBMS!RdbmsUniqueConstraint
    to t : BEFORE_INCREMENTAL!DropUniqueConstraint {
        guard: previousModel.contains(s.eContainer)
        t.tableName = s.eContainer.sqlName;
        t.uniqueColumns = s.fields[0].sqlName;
        if (s.fields.size() > 1) {
            var i = 1;
            while (i < s.fields.size()) {
                t.uniqueColumns += "," + s.fields[i].sqlName;
                i++;
            }
        }

        beforeIncrementalModel.createChangeSetIfNotExists("drop-unique-constraints-from-" + s.eContainer.sqlName, "drop-unique-constraints", dialect, context)
            .dropUniqueConstraint.add(t);
        log.info("DropUniqueConstraint added: " + t.uniqueColumns + " (" + t.tableName + ")");
}

// UNIQUE CONSTRAINT
/////////////////////////////////////////
// NOT NULL CONSTRAINT

@abstract
rule DropNotNullConstraints
    transform s : RDBMS!RdbmsField
    to t : BEFORE_INCREMENTAL!DropNotNullConstraint {
        guard: previousModel.contains(s.eContainer) and s.mandatory
        t.tableName = s.eContainer.sqlName;
        t.columnName = s.sqlName;

        beforeIncrementalModel.createChangeSetIfNotExists("drop-not-null-constraints-from-" + s.eContainer.sqlName, "drop-not-null-constraints", dialect, context)
            .dropNotNullConstraint.add(t);
        log.info("DropNotNullConstraint added: " + t.columnName + " (" + t.tableName + ")");
}

rule DropNotNullConstraintsFromValueFields
    transform s : RDBMS!RdbmsValueField
    to t : BEFORE_INCREMENTAL!DropNotNullConstraint
    extends DropNotNullConstraints {
}

rule DropNotNullConstraintsFromIdentifierFields
    transform s : RDBMS!RdbmsIdentifierField
    to t : BEFORE_INCREMENTAL!DropNotNullConstraint
    extends DropNotNullConstraints {
}

rule DropNotNullConstraintsFromForeignKeys
    transform s : RDBMS!RdbmsForeignKey
    to t : BEFORE_INCREMENTAL!DropNotNullConstraint
    extends DropNotNullConstraints {
}


// NOT NULL CONSTRAINT
/////////////////////////////////////////
// FOREIGN KEY

rule DropForeignKeyConstraints
    transform s : RDBMS!RdbmsForeignKey
    to t : BEFORE_INCREMENTAL!DropForeignKeyConstraint {
        guard: previousModel.contains(s.eContainer)
        t.baseTableName = s.eContainer.sqlName;
        t.constraintName = s.foreignKeySqlName;

        beforeIncrementalModel.createChangeSetIfNotExists("drop-foreign-keys-from-" + s.eContainer.sqlName, "drop-foreign-keys", dialect, context)
            .dropForeignKeyConstraint.add(t);
        log.info("DropForeignKeyConstraint added: " + t.constraintName + " (" + t.baseTableName + ")");
}

// FOREIGN KEY
/////////////////////////////////////////
