/////////////////////////////////////////
// FOREIGN KEY

rule AddForeignKeyConstraints
    transform s : RDBMS!RdbmsForeignKey
    to t : AFTER_INCREMENTAL!AddForeignKeyConstraint {
        guard: newModel.contains(s.eContainer)
        t.baseTableName = s.eContainer.sqlName;
        t.baseColumnNames = s.sqlName;
        t.constraintName = s.foreignKeySqlName;
        t.referencedTableName = s.referenceKey.eContainer.sqlName;
        t.referencedColumnNames = s.referenceKey.sqlName;

        afterIncrementalModel.createChangeSetIfNotExists("add-foreign-keys-to-" + s.eContainer.sqlName, "add-foreign-keys", dialect, context)
            .addForeignKeyConstraint.add(t);
        log.info("AddForeignKeyConstraint added: " + t.constraintName);
}

// FOREIGN KEY
/////////////////////////////////////////
// NOT NULL CONSTRAINT

@abstract
rule AddNotNullConstraints
    transform s : RDBMS!RdbmsField
    to t : AFTER_INCREMENTAL!AddNotNullConstraint {
        guard: newModel.contains(s.eContainer) and s.mandatory and newModel.tableOf(s.eContainer).isDefined() and newModel.tableOf(s.eContainer).fieldOf(s).isDefined()
        t.tableName = s.eContainer.sqlName;
        t.columnName = s.sqlName;

        afterIncrementalModel.createChangeSetIfNotExists("add-not-null-constraints-to-" + s.eContainer.sqlName, "add-not-null-constraints", dialect, context)
            .addNotNullConstraint.add(t);
        log.info("AddNotNullConstraint added: " + t.columnName + " (" + t.tableName + ")");
}

rule AddNotNullConstraintsToValueFields
    transform s : RDBMS!RdbmsValueField
    to t : AFTER_INCREMENTAL!AddNotNullConstraint
    extends AddNotNullConstraints {
}

rule AddNotNullConstraintsToIdentifierFields
    transform s : RDBMS!RdbmsIdentifierField
    to t : AFTER_INCREMENTAL!AddNotNullConstraint
    extends AddNotNullConstraints {
}

rule AddNotNullConstraintsToForeignKeys
    transform s : RDBMS!RdbmsForeignKey
    to t : AFTER_INCREMENTAL!AddNotNullConstraint
    extends AddNotNullConstraints {
}

// NOT NULL CONSTRAINT
/////////////////////////////////////////
// UNIQUE CONSTRAINT

rule AddUniqueConstraints
    transform s : RDBMS!RdbmsUniqueConstraint
    to t : AFTER_INCREMENTAL!AddUniqueConstraint {
        guard: newModel.contains(s.eContainer)
        t.tableName = s.eContainer.sqlName;
        t.columnNames = s.fields[0].sqlName;
        if (s.fields.size() > 1) {
            var i = 1;
            while (i < s.fields.size()) {
                t.columnNames += "," + s.fields[i].sqlName;
                i++;
            }
        }

        afterIncrementalModel.createChangeSetIfNotExists("add-unique-constraints-to-" + s.eContainer.sqlName, "add-unique-constraints", dialect, context)
            .addUniqueConstraint.add(t);
        log.info("AddUniqueConstraint added: " + t.columnNames + " (" + t.tableName + ")");
}

// UNIQUE CONSTRAINT
/////////////////////////////////////////
// INDEX

rule AddIndexes
    transform s : RDBMS!RdbmsIndex
    to t : AFTER_INCREMENTAL!CreateIndex {
        guard: newModel.contains(s.eContainer)
        t.tableName = s.eContainer.sqlName;
        t.indexName = s.sqlName;
        t.column = s.fields.collect(f | new AFTER_INCREMENTAL!Column(name = f.sqlName));

        afterIncrementalModel.createChangeSetIfNotExists("create-indexes-for-" + s.eContainer.sqlName, "create-indexes", dialect, context)
            .createIndex.add(t);
        log.info("CreateIndex added: " + t.indexName + " (" + t.tableName + ")");
}

// INDEX
/////////////////////////////////////////
// BACKUP TABLES

@abstract
rule DeleteBackupTables
    transform s : RDBMS!RdbmsTableOperation
    to t : AFTER_INCREMENTAL!DropTable {
        var useTable;
        if (s.isTypeOf(RDBMS!RdbmsModifyTableOperation)) useTable = s.previousTable;
        else useTable = s.table;

        t.tableName = backupPrefix + "_" + useTable.sqlName;

        afterIncrementalModel.createChangeSetIfNotExists("drop-backup-tables", "drop-backup-tables", dialect, context).dropTable.add(t);
        log.info("DropTable added: " + backupPrefix + "_" + useTable.sqlName);
}

rule DeleteBackupDeletedTables
    transform s : RDBMS!RdbmsDeleteTableOperation
    to t : AFTER_INCREMENTAL!DropTable
    extends DeleteBackupTables {
}

rule DeleteBackupModifiedTables
    transform s : RDBMS!RdbmsModifyTableOperation
    to t : AFTER_INCREMENTAL!DropTable
    extends DeleteBackupTables {
}

// BACKUP TABLES
/////////////////////////////////////////
