/////////////////////////////////////////
// FOREIGN KEY

rule AddAllForeignKeys
    transform s : RDBMS!RdbmsForeignKey
    to t : AFTER_INCREMENTAL!AddForeignKeyConstraint {
        guard: newModel.contains(s.eContainer)
        t.baseTableName = s.eContainer.sqlName;
        t.baseColumnNames = s.sqlName;
        t.constraintName = s.foreignKeySqlName;
        t.referencedTableName = s.referenceKey.eContainer.sqlName;
        t.referencedColumnNames = s.referenceKey.sqlName;

        afterIncrementalModel.createChangeSetIfNotExists("add-foreign-keys-to-" + s.eContainer.sqlName, "add-foreign-keys", dialect, context);
        afterIncrementalModel.getChangeSet("add-foreign-keys-to-" + s.eContainer.sqlName).addForeignKeyConstraint.add(t);
        log.info("AddForeignKeyConstraint added to " + t.baseColumnNames + "(" + t.baseTableName + "): " + t.constraintName + "(" + t.baseTableName + ")");
}

// FOREIGN KEY
/////////////////////////////////////////
// NOT NULL CONSTRAINT

@abstract
rule AddAllNotNullConstraints
    transform s : RDBMS!RdbmsField
    to t : AFTER_INCREMENTAL!AddNotNullConstraint {
        guard: newModel.contains(s.eContainer) and s.mandatory and newModel.tableOf(s.eContainer).isDefined() and newModel.tableOf(s.eContainer).fieldOf(s).isDefined()
        t.tableName = s.eContainer.sqlName;
        t.columnName = s.sqlName;

        afterIncrementalModel.createChangeSetIfNotExists("add-not-null-constraints-to-" + s.eContainer.sqlName, "add-not-null-constraints", dialect, context);
        afterIncrementalModel.getChangeSet("add-not-null-constraints-to-" + s.eContainer.sqlName).addNotNullConstraint.add(t);
        log.info("AddNotNullConstraint added to " + t.columnName + "(" + t.tableName + ")");
}

rule AddAllNotNullConstraintsToValueField
    transform s : RDBMS!RdbmsValueField
    to t : AFTER_INCREMENTAL!AddNotNullConstraint
    extends AddAllNotNullConstraints {
}

rule AddAllNotNullConstraintsToIdentifierField
    transform s : RDBMS!RdbmsIdentifierField
    to t : AFTER_INCREMENTAL!AddNotNullConstraint
    extends AddAllNotNullConstraints {
}

rule AddAllNotNullConstraintsToForeignKey
    transform s : RDBMS!RdbmsForeignKey
    to t : AFTER_INCREMENTAL!AddNotNullConstraint
    extends AddAllNotNullConstraints {
}

// NOT NULL CONSTRAINT
/////////////////////////////////////////
// UNIQUE CONSTRAINT

rule AddAllUniqueConstraints
    transform s : RDBMS!RdbmsUniqueConstraint
    to t : AFTER_INCREMENTAL!AddUniqueConstraint {
        guard: newModel.contains(s.eContainer)
        t.tableName = s.eContainer.sqlName;
        t.columnNames = s.fields[0].sqlName;
        if (s.fields.size() > 1) {
            var i = 1;
            while (i < s.fields.size()) {
                t.columnNames += "," + s.fields[i].sqlName;
                i++;
            }
        }

        afterIncrementalModel.createChangeSetIfNotExists("add-unique-constraint-to-" + s.eContainer.sqlName, "add-unique-constraint", dialect, context);
        afterIncrementalModel.getChangeSet("add-unique-constraint-to-" + s.eContainer.sqlName).addUniqueConstraint.add(t);
        log.info("AddUniqueConstraint added: " + t.columnNames + "(" + t.tableName + ")");
}

// UNIQUE CONSTRAINT
/////////////////////////////////////////
// INDEX

rule CreateAllIndexes
    transform s : RDBMS!RdbmsIndex
    to t : AFTER_INCREMENTAL!CreateIndex {
        guard: newModel.contains(s.eContainer)
        t.tableName = s.eContainer.sqlName;
        t.indexName = s.sqlName;
        t.column = s.fields.collect(f | new AFTER_INCREMENTAL!Column(name = f.sqlName));

        afterIncrementalModel.createChangeSetIfNotExists("create-indexes-for-" + s.eContainer.sqlName, "create-indexes", dialect, context);
        afterIncrementalModel.getChangeSet("create-indexes-for-" + s.eContainer.sqlName).createIndex.add(t);
        log.info("CreateIndex added: " + t.indexName + "(" + t.tableName + ")");
}

// INDEX
/////////////////////////////////////////
// BACKUP TABLES

@abstract
rule DeleteBackupTables
    transform s : RDBMS!RdbmsTableOperation
    to t : AFTER_INCREMENTAL!DropTable {
        var useTable;
        if (s.isTypeOf(RDBMS!RdbmsModifyTableOperation)) useTable = s.previousTable;
        else useTable = s.table;

        t.tableName = backupPrefix + "_" + useTable.sqlName;

        afterIncrementalModel.createChangeSetIfNotExists("drop-backup-tables", "drop-backup-tables", dialect, context);
        afterIncrementalModel.getChangeSet("drop-backup-tables").dropTable.add(t);
}

rule DeleteBackupDeletedTables
    transform s : RDBMS!RdbmsDeleteTableOperation
    to t : AFTER_INCREMENTAL!DropTable
    extends DeleteBackupTables {
        log.info("(Backup deleted table) DropTable: " + backupPrefix + "_" + s.table.sqlName + " created");
}

rule DeleteBackupModifiedTables
    transform s : RDBMS!RdbmsModifyTableOperation
    to t : AFTER_INCREMENTAL!DropTable
    extends DeleteBackupTables {
        log.info("(Backup modified table) DropTable: " + backupPrefix + "_" + s.previousTable.sqlName + " created");
}

// BACKUP TABLES
/////////////////////////////////////////
