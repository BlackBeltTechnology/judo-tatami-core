/////////////////////////////////////////
// CREATE TABLES

rule CreateTables
    transform s : RDBMS!RdbmsCreateTableOperation
    to t : LIQUIBASE!CreateTable {
        t.tableName = s.table.sqlName;
        t.remarks = s.table.uuid;

        for(field in s.table.fields) {
            var column = new LIQUIBASE!Column;
            column.name = field.sqlName;
            column.remarks = field.uuid;
            column.type = field.toFieldDefinition();
            if (field == field.eContainer.primaryKey or field.mandatory) {
                var constraint = new LIQUIBASE!Constraints;
                if (field == field.eContainer.primaryKey) {
                    constraint.primaryKey = true;
                    constraint.primaryKeyName = "PK_" + field.sqlName;
                }
                if (field.mandatory) {
                    constraint.nullable = false;
                }
                column.constraints = constraint;
            }
            t.column.add(column);
        }

        targetModel.getOrCreateChangeSet("create-table-" + s.table.sqlName + "-" + context, "create-tables", dialect, context).createTable.add(t);
        log.info("CreateTable added: " + t.tableName);
}

// CREATE TABLES
/////////////////////////////////////////
// RENAME TABLES

rule RanameTables
    transform s : RDBMS!RdbmsModifyTableOperation
    to t : LIQUIBASE!RenameTable {
        guard: s.nameChanged
        t.oldTableName = s.previousTable.sqlName;
        t.newTableName = s.table.sqlName;

        targetModel.getOrCreateChangeSet("rename-tables-" + context, "rename-tables", dialect, context).renameTable.add(t);
        log.info("RenameTable added: " + t.oldTableName + " -> " + t.newTableName);
}

// RENAME TABLES
/////////////////////////////////////////
// RENAME FIELDS

rule RenameColumns
    transform s : RDBMS!RdbmsModifyFieldOperation
    to t : LIQUIBASE!RenameColumn {
        guard: s.nameChanged
        t.newColumnName = s.field.sqlName;
        t.oldColumnName = s.previousField.sqlName;
        t.tableName = s.eContainer.table.sqlName;
        t.remarks = s.field.uuid;

        targetModel.getOrCreateChangeSet("rename-fields-in-" + s.eContainer.table.sqlName + "-" + context, "rename-fields", dialect, context)
            .renameColumn.add(t);
        log.info("RenameColumn added: " + t.oldColumnName + " -> " + t.newColumnName + " (" + t.tableName + ")");
}

// RENAME FIELDS
/////////////////////////////////////////
// DROP FIELDS

rule DropColumns
    transform s : RDBMS!RdbmsDeleteFieldOperation
    to t : LIQUIBASE!DropColumn {
        t.tableName = s.eContainer.table.sqlName;
        t.columnName = s.field.sqlName;

        targetModel.getOrCreateChangeSet("drop-fields-in-" + s.eContainer.table.sqlName + "-" + context, "drop-fields", dialect, context)
            .dropColumn.add(t);
        log.info("DropColumn added: " + t.columnName + " (" + t.tableName + ")");
}

// DROP FIELDS
/////////////////////////////////////////
// CREATE FIELDS

rule AddColumnDefs
    transform s : RDBMS!RdbmsCreateFieldOperation
    to t : LIQUIBASE!AddColumnDef {
        t.name = s.field.sqlName;
        t.type = s.field.toFieldDefinition();
        t.remarks = s.field.uuid;
        if (s.field == s.field.eContainer.primaryKey or s.field.mandatory) {
            var constraint = new LIQUIBASE!Constraints;
            if (s.field == s.field.eContainer.primaryKey) {
                constraint.primaryKey = true;
                constraint.primaryKeyName = "PK_" + s.field.sqlName;
            }
            if (s.field.mandatory) {
                constraint.nullable = false;

                var changeSet = targetModel.getOrCreateChangeSet("create-fields-in-" + s.eContainer.table.sqlName + "-" + context, "create-fields", dialect, context);
                var sqlFilePath = sqlScriptPath + "/" + dialect + "_" + s.eContainer.table.sqlName.toLowerCase() + "_" + t.name.toLowerCase() + "_create.sql";
                log.info(sqlFilePath);
                var file = new Native("java.io.File")(sqlFilePath);
                if (file.exists()) {
                    var sqlFile = new LIQUIBASE!SqlFile(path = file.getAbsolutePath(), dbms = dialect);
                    changeSet.sqlFile.add(sqlFile);
                } else {
                    missingReviewScripts.put(sqlFilePath, "Sql script not found for new mandatory field [" + t.name + "] of [" + s.eContainer.table.sqlName + "]");
                }
            }
            t.constraints = constraint;
        }

        var changeSet = targetModel.getOrCreateChangeSet("create-fields-in-" + s.eContainer.table.sqlName + "-" + context, "create-fields", dialect, context);
        if (changeSet.addColumn.size == 0) {
            changeSet.addColumn.add(new LIQUIBASE!AddColumn(tableName = s.eContainer.table.sqlName));
            log.info("AddColumn added: " + s.eContainer.table.sqlName);
        }
        changeSet.addColumn[0].column.add(t);
        log.info("AddColumnDef added: " + t.name + " (" + s.eContainer.table.sqlName + ")");
}

// CREATE FIELDS
/////////////////////////////////////////
// MODIFY FIELD

rule ModifyFieldTypes
    transform s : RDBMS!RdbmsModifyFieldOperation
    to t : LIQUIBASE!ModifyDataType {
        guard: s.typeChanged or s.sizeChanged
        t.tableName = s.eContainer.table.sqlName;
        t.columnName = s.field.sqlName;
        t.newDataType = s.field.toFieldDefinition();

        if (s.reviewRequired and s.typeChanged) {
            var changeSet = targetModel.getOrCreateChangeSet("modify-data-types-in-" + t.tableName + "-" + context, "modify-data-types", dialect, context);
            changeSet.modifyDataType.add(t);
            var sqlFilePath = sqlScriptPath + "/" + dialect + "_" + t.tableName.toLowerCase() + "_" + t.columnName.toLowerCase() + "_type.sql";
            log.info(sqlFilePath);
            var file = new Native("java.io.File")(sqlFilePath);
            if (file.exists()) {
                var sqlFile = new LIQUIBASE!SqlFile(path = file.getAbsolutePath(), dbms = dialect);
                changeSet.sqlFile.add(sqlFile);
            } else {
                missingReviewScripts.put(sqlFilePath, "Sql script not found for changed type of field [" + t.columnName + "] of [" + t.tableName + "]");
            }
        }

        if (s.reviewRequired and s.sizeChanged) {
            var changeSet = targetModel.getOrCreateChangeSet("modify-data-types-in-" + t.tableName + "-" + context, "modify-data-types", dialect, context);
            changeSet.modifyDataType.add(t);
            var sqlFilePath = sqlScriptPath + "/" + dialect + "_" + t.tableName.toLowerCase() + "_" + t.columnName.toLowerCase() + "_size.sql";
            log.info(sqlFilePath);
            var file = new Native("java.io.File")(sqlFilePath);
            if (file.exists()) {
                var sqlFile = new LIQUIBASE!SqlFile(path = file.getAbsolutePath(), dbms = dialect);
                changeSet.sqlFile.add(sqlFile);
            } else {
                missingReviewScripts.put(sqlFilePath, "Sql script not found for changed size of field [" + columnName + "] of [" + tableName + "]");
            }
        }

        log.info("ModifyDataType added: " + t.columnName + " (" + t.tableName + ") ==> " + s.previousField.toFieldDefinition() + " -> " + s.field.toFieldDefinition());
}

rule ModifyMandatory
    transform s : RDBMS!RdbmsModifyFieldOperation
    to t : LIQUIBASE!SqlFile {
        guard: s.reviewRequired and s.mandatoryChanged
        var tableName = s.eContainer.table.sqlName;
        var columnName = s.field.sqlName;
        var changeSet = targetModel.getOrCreateChangeSet("modify-mandatory-" + tableName + "-" + context, "modify-mandatory", dialect, context);

        var sqlFilePath = sqlScriptPath + "/" + dialect + "_" + tableName.toLowerCase() + "_" + columnName.toLowerCase() + "_mandatory.sql";
        var file = new Native("java.io.File")(sqlFilePath);
        log.info(sqlFilePath);
        if (file.exists()) {
            t.path = file.getAbsolutePath();
            t.dbms = dialect;
            changeSet.sqlFile.add(t);
        } else {
            missingReviewScripts.put(sqlFilePath, "Sql script not found for mandatory field [" + columnName + "] of [" + tableName + "]");
        }
}

rule ChangedValueFieldToForeignKey
    transform s : RDBMS!RdbmsModifyFieldOperation
    to t : LIQUIBASE!SqlFile {
        guard: s.changedValueFieldToForeignKey
        var tableName = s.eContainer.table.sqlName;
        var columnName = s.field.sqlName;
        var changeSet = targetModel.getOrCreateChangeSet("change-to-foreign-key-" + tableName + "-" + context, "change-to-foreign-key", dialect, context);

        var sqlFilePath = sqlScriptPath + "/" + dialect + "_" + tableName.toLowerCase() + "_" + columnName.toLowerCase() + "_to_foreign_key.sql";
        var file = new Native("java.io.File")(sqlFilePath);
        log.info(sqlFilePath);
        if (file.exists()) {
            t.path = file.getAbsolutePath();
            t.dbms = dialect;
            changeSet.sqlFile.add(t);
        } else {
            missingReviewScripts.put(sqlFilePath, "Sql script not found for value field changed to foreign key [" + columnName + "] of [" + tableName + "]");
        }
}

rule ChangedForeignKeyToValueField
    transform s : RDBMS!RdbmsModifyFieldOperation
    to t : LIQUIBASE!SqlFile {
        guard: s.changedForeignKeyToValueField
        var tableName = s.eContainer.table.sqlName;
        var columnName = s.field.sqlName;
        var changeSet = targetModel.getOrCreateChangeSet("change-to-value-field-" + tableName + "-" + context, "change-to-value-field", dialect, context);

        var sqlFilePath = sqlScriptPath + "/" + dialect + "_" + tableName.toLowerCase() + "_" + columnName.toLowerCase() + "_to_value_field.sql";
        var file = new Native("java.io.File")(sqlFilePath);
        log.info(sqlFilePath);
        if (file.exists()) {
            t.path = file.getAbsolutePath();
            t.dbms = dialect;
            changeSet.sqlFile.add(t);
        } else {
            missingReviewScripts.put(sqlFilePath, "Sql script not found for foreign key changed to value field [" + columnName + "] of [" + tableName + "]");
        }
}

// MODIFY FIELD
/////////////////////////////////////////
// DROP TABLES

rule DropTables
    transform s : RDBMS!RdbmsDeleteTableOperation
    to t : LIQUIBASE!DropTable {
        t.tableName = s.table.sqlName;

        targetModel.getOrCreateChangeSet("drop-tables-" + context, "drop-tables", dialect, context).dropTable.add(t);
        log.info("DropTable added: " + t.tableName);
}

// DROP TABLES
/////////////////////////////////////////