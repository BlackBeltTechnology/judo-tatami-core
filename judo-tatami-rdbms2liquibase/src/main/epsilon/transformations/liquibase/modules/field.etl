@abstract
@greedy
rule FieldToColumn
	transform s : RDBMS!RdbmsField
	to t : LIQUIBASE!Column {
		t.name = s.sqlName;
		t.type = s.toFieldDefinition();
		t.remarks = s.uuid;	
}

@abstract
rule ForeignKeyFieldToAddForeignKeyConstraint
	transform s : RDBMS!RdbmsForeignKey
	to t : LIQUIBASE!AddForeignKeyConstraint {
		t.baseTableName = s.table().sqlName;
		t.baseColumnNames = s.sqlName;		
		t.constraintName = s.foreignKeySqlName;
		t.referencedColumnNames = s.referenceKey.table().primaryKey.sqlName;
		t.referencedTableName = s.referenceKey.table().sqlName;
}

@abstract
@greedy
rule FieldToAddNotNullConstraint
	transform s : RDBMS!RdbmsField
	to t : LIQUIBASE!AddNotNullConstraint {
		t.columnDataType = s.toFieldDefinition();
		t.columnName = s.sqlName;
		t.tableName = s.table().sqlName;
}

@greedy
rule IdentifierFieldToCreateTableColumn
	transform s : RDBMS!RdbmsIdentifierField
	to t : LIQUIBASE!Column 
	extends FieldToColumn {
		s.table().equivalent("TableToCreateTable").column.add(t);
}

rule IdentifierFieldToCreateTableColumnAddPrimaryKeyConstraint
	transform s : RDBMS!RdbmsIdentifierField
	to t : LIQUIBASE!Constraints {
	    t.primaryKey = true;
	    t.nullable = false;
		s.equivalent("IdentifierFieldToCreateTableColumn").setConstraints(t);
}

rule ValueFieldToCreateTableColumn
	transform s : RDBMS!RdbmsValueField
	to t : LIQUIBASE!Column 
	extends FieldToColumn {
		s.table().equivalent("TableToCreateTable").column.add(t);
}

rule ForeignKeyFieldToCreateTableAddForeignKeyConstraint
	transform s : RDBMS!RdbmsForeignKey
	to t : LIQUIBASE!AddForeignKeyConstraint 
	extends ForeignKeyFieldToAddForeignKeyConstraint {
		s.table().equivalent("TableToCreateForeignKeysChangeSet").addForeignKeyConstraint.add(t);
}

@greedy
rule FieldToCreateTableAddNotNullConstraint
	transform s : RDBMS!RdbmsField
	to t : LIQUIBASE!AddNotNullConstraint 
	extends FieldToAddNotNullConstraint {
	    guard: s.mandatory
		s.table().equivalent("TableToAddNotNullChangeSet").addNotNullConstraint.add(t);
}


@cached
operation RDBMS!RdbmsField table() : RDBMS!RdbmsTable {
    return RDBMS!RdbmsTable.all.selectOne(ta | ta.fields.contains(self));
}

@cached
operation RDBMS!RdbmsField toFieldDefinition () : String {
	if (self.rdbmsTypeName.isDefined()) {
		var typedef = self.rdbmsTypeName.toUpperCase();
		if (self.precision > 0) {
			typedef += "(" + self.precision;
			if (self.scale > 0) {
				typedef += ", " + self.scale;
			}
			typedef += ")";	
		} else if (self.size > 0) {
			typedef += "(" + self.size + ")";
		}
		return typedef;
	} else if (self.type.isDefined()) {
		return self.type.toString();
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Rdbms Operations

rule CreateFieldOperationToColumnOnNewTable
    transform s : RDBMS!RdbmsCreateFieldOperation
    to t : LIQUIBASE!Column {
        guard: not s.isForeignKey and s.eContainer.isTypeOf(RDBMS!RdbmsCreateTableOperation)
        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "create-table-" + s.eContainer.table.sqlName) i++;

        t.name = s.field.sqlName;
        t.type = s.field.toFieldDefinition();
        if (i < size) {
            targetModel.changeSet[i].createTable[0].column.add(t);
            if (s.isIdentifierField) {
                t.constraints = new LIQUIBASE!Constraints(primaryKey = true, nullable = not s.field.mandatory);
            }
            ("Column " + t.name + " created in " + targetModel.changeSet[i].createTable[0].tableName + "").println();
        }
}

rule CreateFieldOperationToChangeSetOnExistingTable
    transform s : RDBMS!RdbmsCreateFieldOperation
    to t : LIQUIBASE!ChangeSet {
        guard: not s.isForeignKey and s.eContainer.isTypeOf(RDBMS!RdbmsModifyTableOperation)
        t.id = "create-field-for-" + s.eContainer.table.sqlName;
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "create-field";

        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "create-field-for-" + s.eContainer.table.sqlName) i++;
        if (i == size) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule CreateFieldOperationToAddColumnDefOnExistingTable
    transform s : RDBMS!RdbmsCreateFieldOperation
    to t : LIQUIBASE!AddColumnDef {
        guard: not s.isForeignKey and s.eContainer.isTypeOf(RDBMS!RdbmsModifyTableOperation)

        t.name = s.field.sqlName;
        t.type = s.field.toFieldDefinition();
        if (s.isIdentifierField) {
            t.constraints = new LIQUIBASE!Constraints(primaryKey = true, nullable = not s.field.mandatory);
        }
        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "create-field-for-" + s.eContainer.table.sqlName) i++;
        if (i < size) {
            if (targetModel.changeSet[i].addColumn.size == 0) {
                targetModel.changeSet[i].addColumn.add(new LIQUIBASE!AddColumn(tableName = s.eContainer.table.sqlName));
                ("AddColumn created in " + targetModel.changeSet[i].id).println();
            }
            targetModel.changeSet[i].addColumn[0].column.add(t);
            ("AddColumnDef created in " + targetModel.changeSet[i].id).println();
        }
}

// CREATE FIELDS (NO FOREIGN KEY)
/////////////////////////////////////////
// TODO MODIFY
/////////////////////////////////////////
// CREATE FIELDS: FOREIGN KEY

rule CreateFieldOperationWithForeignKeyToChangeSet
    transform s : RDBMS!RdbmsCreateFieldOperation
    to t : LIQUIBASE!ChangeSet {
        guard: s.isForeignKey
        t.id = "create-foreign-key-for-" + s.eContainer.table.sqlName;
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "create-foreign-key";

        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "create-foreign-key-for-" + s.eContainer.table.sqlName) i++;
        if (i == size) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule CreateFieldOperationWithForeignKeyToAddColumnDef
    transform s : RDBMS!RdbmsCreateFieldOperation
    to t : LIQUIBASE!AddColumnDef {
        guard: s.isForeignKey

        t.name = s.field.sqlName;
        t.type = s.field.toFieldDefinition();
        t.constraints = new LIQUIBASE!Constraints(referencedTableName = s.field.referenceKey.eContainer.sqlName,
                                                  referencedColumnNames = s.field.referenceKey.sqlName);
        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "create-foreign-key-for-" + s.eContainer.table.sqlName) i++;
        if (i < size) {
            if (targetModel.changeSet[i].addColumn.size == 0) {
                targetModel.changeSet[i].addColumn.add(new LIQUIBASE!AddColumn(tableName = s.eContainer.table.sqlName));
                ("AddColumn created in " + targetModel.changeSet[i].id).println();
            }
            targetModel.changeSet[i].addColumn[0].column.add(t);
            ("AddColumnDef created in " + targetModel.changeSet[i].id).println();
        }
}

// CREATE FIELDS: FOREIGN KEY
/////////////////////////////////////////
// DELETE

rule DeleteFieldOperationToChangeSet
    transform s : RDBMS!RdbmsDeleteFieldOperation
    to t : LIQUIBASE!ChangeSet {
        t.id = "drop-fields";
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "drop-fields";

        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "drop-fields") i++;
        if (i == size) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule DeleteFieldOperationToDropColumn
    transform s : RDBMS!RdbmsDeleteFieldOperation
    to t : LIQUIBASE!DropColumn {
        t.tableName = s.eContainer.table.sqlName;
        t.columnName = s.field.sqlName;

        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "drop-fields") i++;
        if (i < size) {
            targetModel.changeSet[i].dropColumn.add(t);
        }
}

// delete table operations are located here in order to guarantee that this part is
// executed last
rule DeleteTableOperationToChangeSet
    transform s : RDBMS!RdbmsDeleteTableOperation
    to t : LIQUIBASE!ChangeSet {
        t.id = "drop-tables";
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "drop-tables";

        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "drop-tables") i++;
        if (i == size) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule DeleteTableOperationToDropTable
    transform s : RDBMS!RdbmsDeleteTableOperation
    to t : LIQUIBASE!DropTable {
        t.tableName = s.table.sqlName;

        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "drop-tables") i++;
        if (i < size) {
            targetModel.changeSet[i].dropTable.add(t);
        }
}

// Rdbms Operations
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
