@abstract
@greedy
rule FieldToColumn
	transform s : RDBMS!RdbmsField
	to t : LIQUIBASE!Column {
		t.name = s.sqlName;
		t.type = s.toFieldDefinition();
		t.remarks = s.uuid;	
}

@abstract
rule ForeignKeyFieldToAddForeignKeyConstraint
	transform s : RDBMS!RdbmsForeignKey
	to t : LIQUIBASE!AddForeignKeyConstraint {
		t.baseTableName = s.table().sqlName;
		t.baseColumnNames = s.sqlName;		
		t.constraintName = s.foreignKeySqlName;
		t.referencedColumnNames = s.referenceKey.table().primaryKey.sqlName;
		t.referencedTableName = s.referenceKey.table().sqlName;
}

@abstract
@greedy
rule FieldToAddNotNullConstraint
	transform s : RDBMS!RdbmsField
	to t : LIQUIBASE!AddNotNullConstraint {
		t.columnDataType = s.toFieldDefinition();
		t.columnName = s.sqlName;
		t.tableName = s.table().sqlName;
}

@greedy
rule IdentifierFieldToCreateTableColumn
	transform s : RDBMS!RdbmsIdentifierField
	to t : LIQUIBASE!Column 
	extends FieldToColumn {
		s.table().equivalent("TableToCreateTable").column.add(t);
}

rule IdentifierFieldToCreateTableColumnAddPrimaryKeyConstraint
	transform s : RDBMS!RdbmsIdentifierField
	to t : LIQUIBASE!Constraints {
	    t.primaryKey = true;
	    t.nullable = false;
		s.equivalent("IdentifierFieldToCreateTableColumn").setConstraints(t);
}

rule ValueFieldToCreateTableColumn
	transform s : RDBMS!RdbmsValueField
	to t : LIQUIBASE!Column 
	extends FieldToColumn {
		s.table().equivalent("TableToCreateTable").column.add(t);
}

rule ForeignKeyFieldToCreateTableAddForeignKeyConstraint
	transform s : RDBMS!RdbmsForeignKey
	to t : LIQUIBASE!AddForeignKeyConstraint 
	extends ForeignKeyFieldToAddForeignKeyConstraint {
		s.table().equivalent("TableToCreateForeignKeysChangeSet").addForeignKeyConstraint.add(t);
}

@greedy
rule FieldToCreateTableAddNotNullConstraint
	transform s : RDBMS!RdbmsField
	to t : LIQUIBASE!AddNotNullConstraint 
	extends FieldToAddNotNullConstraint {
	    guard: s.mandatory
		s.table().equivalent("TableToAddNotNullChangeSet").addNotNullConstraint.add(t);
}


@cached
operation RDBMS!RdbmsField table() : RDBMS!RdbmsTable {
    return RDBMS!RdbmsTable.all.selectOne(ta | ta.fields.contains(self));
}

@cached
operation RDBMS!RdbmsField toFieldDefinition () : String {
	if (self.rdbmsTypeName.isDefined()) {
		var typedef = self.rdbmsTypeName.toUpperCase();
		if (self.precision > 0) {
			typedef += "(" + self.precision;
			if (self.scale > 0) {
				typedef += ", " + self.scale;
			}
			typedef += ")";	
		} else if (self.size > 0) {
			typedef += "(" + self.size + ")";
		}
		return typedef;
	} else if (self.type.isDefined()) {
		return self.type.toString();
	}

	return "";
}
