import "../utils/changeset.eol";

/////////////////////////////////////////
// CREATE TABLES

@lazy
rule CreateTableOperationToChangeSet
    transform s : RDBMS!RdbmsCreateTableOperation
    to t : LIQUIBASE!ChangeSet {
        t.id = "create-table-" + s.table.sqlName;
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "create-tables";
        targetModel.changeSet.add(t);
        ("ChangeSet " + t.id + " created").println();
}

rule CreateTableOperationToCreateTable
    transform s : RDBMS!RdbmsCreateTableOperation
    to t : LIQUIBASE!CreateTable {
        t.tableName = s.table.sqlName;
        t.remarks = s.table.uuid;

        for(field in s.table.fields) {
            var column : new LIQUIBASE!Column;
            var constraint : new LIQUIBASE!Constraints;
            column.name = field.sqlName;
            column.remarks = field.uuid;
            // TODO:Develop
            // column.type = field.toFieldDefinition();
            if (field == field.eContainer.primaryKey or field.mandatory) {
                constraint.primaryKey = field == field.eContainer.primaryKey;
                constraint.nullable = not field.mandatory;
                column.constraints = constraint;
            }
            t.column.add(column);
        }

        s.equivalent("CreateTableOperationToChangeSet").createTable.add(t);
        ("CreateTable " + t.tableName + " created").println();
}

// CREATE TABLES
/////////////////////////////////////////
// RENAME TABLES

rule ModifyTableOperationToChangeSet
    transform s : RDBMS!RdbmsModifyTableOperation
    to t : LIQUIBASE!ChangeSet {
        guard: s.nameChanged
        t.id = "rename-tables";
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "rename-tables";

        if (not targetModel.changeSetExists(t.id)) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule ModifyTableOperationToRanameTable
    transform s : RDBMS!RdbmsModifyTableOperation
    to t : LIQUIBASE!RenameTable {
        guard: s.nameChanged
        t.oldTableName = s.previousTable.sqlName;
        t.newTableName = s.table.sqlName;

        targetModel.changeSetOf("rename-tables").renameTable.add(t);
        ("RenameTable (" + t.oldTableName + " -> " + t.newTableName + ") added to " + targetModel.changeSetOf("rename-tables").id).println();
}

// RENAME TABLES
/////////////////////////////////////////
// RENAME FIELDS

rule RenameToChangeSet
    transform s : RDBMS!RdbmsModifyFieldOperation
    to t : LIQUIBASE!ChangeSet {
        guard: s.nameChanged
        t.id = "rename-fields-for-" + s.eContainer.table.sqlName;
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "rename-fields";

        if (not targetModel.changeSetExists(t.id)) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule RenameToRenameColumn
    transform s : RDBMS!RdbmsModifyFieldOperation
    to t : LIQUIBASE!RenameColumn {
        guard: s.nameChanged
        t.newColumnName = s.field.sqlName;
        t.oldColumnName = s.previousField.sqlName;
        t.tableName = s.eContainer.table.sqlName;
        t.remarks = s.field.uuid;

        targetModel.changeSetOf("rename-fields-for-" + s.eContainer.table.sqlName).renameColumn.add(t);
        ("Rename column added in table " + t.tableName + ": " + t.oldColumnName + " -> " + t.newColumnName).println();
}

// RENAME FIELDS
/////////////////////////////////////////
// DROP FIELDS

rule DeleteFieldOperationToChangeSet
    transform s : RDBMS!RdbmsDeleteFieldOperation
    to t : LIQUIBASE!ChangeSet {
        t.id = "drop-fields-from-" + s.eContainer.table.sqlName;
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "drop-fields";

        if (not targetModel.changeSetExists(t.id)) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule DeleteFieldOperationToDropColumn
    transform s : RDBMS!RdbmsDeleteFieldOperation
    to t : LIQUIBASE!DropColumn {
        t.tableName = s.eContainer.table.sqlName;
        t.columnName = s.field.sqlName;

        targetModel.changeSetOf("drop-fields-from-" + s.eContainer.table.sqlName).dropColumn.add(t);
        ("Drop field added: " + t.columnName).println();
}

// DROP FIELDS
/////////////////////////////////////////
// CREATE FIELDS

rule CreateFieldOperationToChangeSetOnExistingTable
    transform s : RDBMS!RdbmsCreateFieldOperation
    to t : LIQUIBASE!ChangeSet {
        t.id = "create-fields-for-" + s.eContainer.table.sqlName;
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "create-fields";

        if (not targetModel.changeSetExists(t.id)) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule CreateFieldOperationToAddColumnDefOnExistingTable
    transform s : RDBMS!RdbmsCreateFieldOperation
    to t : LIQUIBASE!AddColumnDef {
        t.name = s.field.sqlName;
        // TODO:Develop
        // t.type = s.field.toFieldDefinition();
        t.remarks = s.field.uuid;
        if (s.field == s.field.eContainer.primaryKey) {
            t.constraints = new LIQUIBASE!Constraints(primaryKey = true, nullable = not s.field.mandatory);
        }

        var changeSet = targetModel.changeSetOf("create-fields-for-" + s.eContainer.table.sqlName);
        if (changeSet.addColumn.size == 0) {
            changeSet.addColumn.add(new LIQUIBASE!AddColumn(tableName = s.eContainer.table.sqlName));
            ("AddColumn created in " + changeSet.id).println();
        }
        changeSet.addColumn[0].column.add(t);
        ("AddColumnDef created in " + changeSet.id).println();
}

// CREATE FIELDS
/////////////////////////////////////////
// MODIFY TYPE/SIZE

rule RdbmsModifyFieldOperationToModifyDataTypeChangeSet
    transform s : RDBMS!RdbmsModifyFieldOperation
    to t : LIQUIBASE!ChangeSet {
        guard: s.typeChanged or s.sizeChanged
        t.id = "modify-data-types-in-" + s.eContainer.table.sqlName;
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "modify-data-types";

        if (not targetModel.changeSetExists(t.id)) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule RdbmsModifyFieldOperationToModifyDataType
    transform s : RDBMS!RdbmsModifyFieldOperation
    to t : LIQUIBASE!ModifyDataType {
        guard: s.typeChanged or s.sizeChanged
        t.tableName = s.eContainer.table.sqlName;
        t.columnName = s.field.sqlName;
        // TODO:Develop
        // t.newDataType = s.field.toFieldDefinition();

        targetModel.changeSetOf("modify-data-types-in-" + s.eContainer.table.sqlName).modifyDataType.add(t);
        ("ModifyDataType added: " + s.previousField.toFieldDefinition() + " -> " + s.field.toFieldDefinition()).println();
}

// MODIFY TYPE/SIZE
/////////////////////////////////////////
// CHANGE NOT NULL CONSTRAINT

rule RdbmsModifyFieldOperationToModifyNotNullConstraintsChangeSet
    transform s : RDBMS!RdbmsModifyFieldOperation
    to t : LIQUIBASE!ChangeSet {
        guard: s.mandatoryChanged
        t.id = "modify-not-null-constraints-for-" + s.eContainer.table.sqlName;
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "modify-not-null-constraints";

        if (not targetModel.changeSetExists(t.id)) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule RdbmsModifyFieldOperationToAddNotNullConstraint
    transform s : RDBMS!RdbmsModifyFieldOperation
    to t : LIQUIBASE!AddNotNullConstraint {
        guard: s.mandatoryChanged and s.field.mandatory
        t.tableName = s.eContainer.table.sqlName;
        t.columnName = s.field.sqlName;

        targetModel.changeSetOf("modify-not-null-constraints-for-" + s.eContainer.table.sqlName).addNotNullConstraint.add(t);
}

rule RdbmsModifyFieldOperationToDropNotNullConstraint
    transform s : RDBMS!RdbmsModifyFieldOperation
    to t : LIQUIBASE!DropNotNullConstraint {
        guard: s.mandatoryChanged and not s.field.mandatory
        t.tableName = s.eContainer.table.sqlName;
        t.columnName = s.field.sqlName;

        targetModel.changeSetOf("modify-not-null-constraints-for-" + s.eContainer.table.sqlName).dropNotNullConstraint.add(t);
}

// CHANGE NOT NULL CONSTRAINT
/////////////////////////////////////////
// DROP TABLES

rule DeleteTableOperationToChangeSet
    transform s : RDBMS!RdbmsDeleteTableOperation
    to t : LIQUIBASE!ChangeSet {
        t.id = "drop-tables";
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "drop-tables";

        if (not targetModel.changeSetExists(t.id)) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule DeleteTableOperationToDropTable
    transform s : RDBMS!RdbmsDeleteTableOperation
    to t : LIQUIBASE!DropTable {
        t.tableName = s.table.sqlName;

        targetModel.changeSetOf("drop-tables").dropTable.add(t);
        ("Drop table added: " + t.tableName).println();
}

// DROP TABLES
/////////////////////////////////////////
