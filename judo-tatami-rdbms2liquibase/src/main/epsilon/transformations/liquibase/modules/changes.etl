/////////////////////////////////////////
// CREATE TABLES

@lazy
rule CreateTableOperationToChangeSet
    transform s : RDBMS!RdbmsCreateTableOperation
    to t : LIQUIBASE!ChangeSet {
        t.id = "create-table-" + s.table.sqlName;
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "create-table";
        targetModel.changeSet.add(t);
        ("ChangeSet " + t.id + " created").println();
}

rule CreateTableOperationToCreateTable
    transform s : RDBMS!RdbmsCreateTableOperation
    to t : LIQUIBASE!CreateTable {
        t.tableName = s.table.sqlName;
        s.equivalent("CreateTableOperationToChangeSet").createTable.add(t);
        ("CreateTable " + t.tableName + " created").println();
}

// CREATE TABLES
/////////////////////////////////////////
// CREATE FIELDS

rule CreateFieldOperationToColumnOnNewTable
    transform s : RDBMS!RdbmsCreateFieldOperation
    to t : LIQUIBASE!Column {
        guard: not s.isForeignKey and s.eContainer.isTypeOf(RDBMS!RdbmsCreateTableOperation)
        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "create-table-" + s.eContainer.table.sqlName) i++;

        t.name = s.field.sqlName;
        t.type = s.field.toFieldDefinition();
        if (i < size) {
            targetModel.changeSet[i].createTable[0].column.add(t);
            if (s.isIdentifierField) {
                t.constraints = new LIQUIBASE!Constraints(primaryKey = true, nullable = not s.field.mandatory);
            }
            ("Column " + t.name + " created in " + targetModel.changeSet[i].createTable[0].tableName + "").println();
        }
}

rule CreateFieldOperationToChangeSetOnExistingTable
    transform s : RDBMS!RdbmsCreateFieldOperation
    to t : LIQUIBASE!ChangeSet {
        guard: not s.isForeignKey and s.eContainer.isTypeOf(RDBMS!RdbmsModifyTableOperation)
        t.id = "create-field-for-" + s.eContainer.table.sqlName;
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "create-field";

        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "create-field-for-" + s.eContainer.table.sqlName) i++;
        if (i == size) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule CreateFieldOperationToAddColumnDefOnExistingTable
    transform s : RDBMS!RdbmsCreateFieldOperation
    to t : LIQUIBASE!AddColumnDef {
        guard: not s.isForeignKey and s.eContainer.isTypeOf(RDBMS!RdbmsModifyTableOperation)

        t.name = s.field.sqlName;
        t.type = s.field.toFieldDefinition();
        if (s.isIdentifierField) {
            t.constraints = new LIQUIBASE!Constraints(primaryKey = true, nullable = not s.field.mandatory);
        }
        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "create-field-for-" + s.eContainer.table.sqlName) i++;
        if (i < size) {
            if (targetModel.changeSet[i].addColumn.size == 0) {
                targetModel.changeSet[i].addColumn.add(new LIQUIBASE!AddColumn(tableName = s.eContainer.table.sqlName));
                ("AddColumn created in " + targetModel.changeSet[i].id).println();
            }
            targetModel.changeSet[i].addColumn[0].column.add(t);
            ("AddColumnDef created in " + targetModel.changeSet[i].id).println();
        }
}

// CREATE FIELDS (NO FOREIGN KEY)
/////////////////////////////////////////
// TODO MODIFY FIELDS
/////////////////////////////////////////
// CREATE FIELDS: FOREIGN KEY

rule CreateFieldOperationWithForeignKeyToChangeSet
    transform s : RDBMS!RdbmsCreateFieldOperation
    to t : LIQUIBASE!ChangeSet {
        guard: s.isForeignKey
        t.id = "create-foreign-key-for-" + s.eContainer.table.sqlName;
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "create-foreign-key";

        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "create-foreign-key-for-" + s.eContainer.table.sqlName) i++;
        if (i == size) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule CreateFieldOperationWithForeignKeyToAddColumnDef
    transform s : RDBMS!RdbmsCreateFieldOperation
    to t : LIQUIBASE!AddColumnDef {
        guard: s.isForeignKey

        t.name = s.field.sqlName;
        t.type = s.field.toFieldDefinition();
        t.constraints = new LIQUIBASE!Constraints(referencedTableName = s.field.referenceKey.eContainer.sqlName,
                                                  referencedColumnNames = s.field.referenceKey.sqlName);
        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "create-foreign-key-for-" + s.eContainer.table.sqlName) i++;
        if (i < size) {
            if (targetModel.changeSet[i].addColumn.size == 0) {
                targetModel.changeSet[i].addColumn.add(new LIQUIBASE!AddColumn(tableName = s.eContainer.table.sqlName));
                ("AddColumn created in " + targetModel.changeSet[i].id).println();
            }
            targetModel.changeSet[i].addColumn[0].column.add(t);
            ("AddColumnDef created in " + targetModel.changeSet[i].id).println();
        }
}

// CREATE FIELDS: FOREIGN KEY
/////////////////////////////////////////
// RENAME TABLES

rule ModifyTableOperationToChangeSet
    transform s : RDBMS!RdbmsModifyTableOperation
    to t : LIQUIBASE!ChangeSet {
        guard: s.sqlNameChanged
        t.id = "rename-tables";
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "rename-tables";

        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> t.id) i++;
        if (i == size) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule ModifyTableOperationToRanameTable
    transform s : RDBMS!RdbmsModifyTableOperation
    to t : LIQUIBASE!RenameTable {
        guard: s.sqlNameChanged
        t.oldTableName = s.previousTable.sqlName;
        t.newTableName = s.table.sqlName;

        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "rename-tables") i++;
        if (i < size) {
            targetModel.changeSet[i].renameTable.add(t);
            ("RenameTable (" + t.oldTableName + " -> " + t.newTableName + ") added to " + targetModel.changeSet[i].id).println();
        }
}

// RENAME TABLES
/////////////////////////////////////////
// TODO MODIFY TABLES
/////////////////////////////////////////
// DELETE FIELDS

rule DeleteFieldOperationToChangeSet
    transform s : RDBMS!RdbmsDeleteFieldOperation
    to t : LIQUIBASE!ChangeSet {
        t.id = "drop-fields";
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "drop-fields";

        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "drop-fields") i++;
        if (i == size) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule DeleteFieldOperationToDropColumn
    transform s : RDBMS!RdbmsDeleteFieldOperation
    to t : LIQUIBASE!DropColumn {
        t.tableName = s.eContainer.table.sqlName;
        t.columnName = s.field.sqlName;

        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "drop-fields") i++;
        if (i < size) {
            targetModel.changeSet[i].dropColumn.add(t);
        }
}

// DELETE FIELDS
/////////////////////////////////////////
// DELETE TABLES

rule DeleteTableOperationToChangeSet
    transform s : RDBMS!RdbmsDeleteTableOperation
    to t : LIQUIBASE!ChangeSet {
        t.id = "drop-tables";
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "drop-tables";

        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "drop-tables") i++;
        if (i == size) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule DeleteTableOperationToDropTable
    transform s : RDBMS!RdbmsDeleteTableOperation
    to t : LIQUIBASE!DropTable {
        t.tableName = s.table.sqlName;

        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "drop-tables") i++;
        if (i < size) {
            targetModel.changeSet[i].dropTable.add(t);
        }
}
