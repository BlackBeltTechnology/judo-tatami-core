import "changes.eol";

/////////////////////////////////////////
// RENAME FIELDS
rule RenameToChangeSet
    transform s : RDBMS!RdbmsModifyFieldOperation
    to t : LIQUIBASE!ChangeSet {
        guard: s.sqlNameChanged
        t.id = "rename-fields";
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "rename-fields";

        if (not targetModel.changeSetExists(t.id)) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule RenameToRenameColumn
    transform s : RDBMS!RdbmsModifyFieldOperation
    to t : LIQUIBASE!RenameColumn {
        guard: s.sqlNameChanged
        t.newColumnName = s.field.sqlName;
        t.oldColumnName = s.previousField.sqlName;
        t.tableName = s.eContainer.table.sqlName;
        t.remarks = s.field.uuid;

        targetModel.changeSetOf("rename-fields").renameColumn.add(t);
        ("Rename column added in table " + t.tableName + ": " + t.oldColumnName + " -> " + t.newColumnName).println();
}

// RENAME FIELDS
/////////////////////////////////////////
// RENAME TABLES

rule ModifyTableOperationToChangeSet
    transform s : RDBMS!RdbmsModifyTableOperation
    to t : LIQUIBASE!ChangeSet {
        guard: s.sqlNameChanged
        t.id = "rename-tables";
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "rename-tables";

        if (not targetModel.changeSetExists(t.id)) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule ModifyTableOperationToRanameTable
    transform s : RDBMS!RdbmsModifyTableOperation
    to t : LIQUIBASE!RenameTable {
        guard: s.sqlNameChanged
        t.oldTableName = s.previousTable.sqlName;
        t.newTableName = s.table.sqlName;

        targetModel.changeSetOf("rename-tables").renameTable.add(t);
        ("RenameTable (" + t.oldTableName + " -> " + t.newTableName + ") added to " + targetModel.changeSetOf("rename-tables").id).println();
}

// RENAME TABLES
/////////////////////////////////////////
// CREATE TABLES

@lazy
rule CreateTableOperationToChangeSet
    transform s : RDBMS!RdbmsCreateTableOperation
    to t : LIQUIBASE!ChangeSet {
        t.id = "create-table-" + s.table.sqlName;
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "create-table";
        targetModel.changeSet.add(t);
        ("ChangeSet " + t.id + " created").println();
}

rule CreateTableOperationToCreateTable
    transform s : RDBMS!RdbmsCreateTableOperation
    to t : LIQUIBASE!CreateTable {
        t.tableName = s.table.sqlName;
        t.remarks = s.table.uuid;
        s.equivalent("CreateTableOperationToChangeSet").createTable.add(t);
        ("CreateTable " + t.tableName + " created").println();
}

// CREATE TABLES
/////////////////////////////////////////
// CREATE FIELDS (NEW, NO FOREIGN KEY)

rule CreateFieldOperationToColumnOnNewTable
    transform s : RDBMS!RdbmsCreateFieldOperation
    to t : LIQUIBASE!Column {
        guard: not s.isForeignKey and s.eContainer.isTypeOf(RDBMS!RdbmsCreateTableOperation)

        t.name = s.field.sqlName;
        t.type = s.field.toFieldDefinition();
        t.remarks = s.field.uuid;

        var createTable = targetModel.changeSetOf("create-table-" + s.eContainer.table.sqlName).createTable[0];

        createTable.column.add(t);
        if (s.isIdentifierField) {
            t.constraints = new LIQUIBASE!Constraints(primaryKey = true, nullable = not s.field.mandatory);
        }
        ("Column " + t.name + " created in " + createTable.tableName + "").println();
}

// CREATE FIELDS (NEW, NO FOREIGN KEY)
/////////////////////////////////////////
// CREATE FIELDS (EXISTING, NO FOREIGN KEY)

rule CreateFieldOperationToChangeSetOnExistingTable
    transform s : RDBMS!RdbmsCreateFieldOperation
    to t : LIQUIBASE!ChangeSet {
        guard: not s.isForeignKey and s.eContainer.isTypeOf(RDBMS!RdbmsModifyTableOperation)
        t.id = "create-field-for-" + s.eContainer.table.sqlName;
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "create-field";

        if (not targetModel.changeSetExists("create-field-for-" + s.eContainer.table.sqlName)) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule CreateFieldOperationToAddColumnDefOnExistingTable
    transform s : RDBMS!RdbmsCreateFieldOperation
    to t : LIQUIBASE!AddColumnDef {
        guard: not s.isForeignKey and s.eContainer.isTypeOf(RDBMS!RdbmsModifyTableOperation)

        t.name = s.field.sqlName;
        t.type = s.field.toFieldDefinition();
        t.remarks = s.field.uuid;
        if (s.isIdentifierField) {
            t.constraints = new LIQUIBASE!Constraints(primaryKey = true, nullable = not s.field.mandatory);
        }

        var changeSet = targetModel.changeSetOf("create-field-for-" + s.eContainer.table.sqlName);
        if (changeSet.addColumn.size == 0) {
            changeSet.addColumn.add(new LIQUIBASE!AddColumn(tableName = s.eContainer.table.sqlName));
            ("AddColumn created in " + changeSet.id).println();
        }
        changeSet.addColumn[0].column.add(t);
        ("AddColumnDef created in " + changeSet.id).println();
}

// CREATE FIELDS (EXISTING, NO FOREIGN KEY)
/////////////////////////////////////////
// TODO change type of fields
// TODO change size of fields
// TODO change not null constraint
// TODO change foreign key constraint
/////////////////////////////////////////
// CREATE FIELDS (FOREIGN KEY)

rule CreateFieldOperationWithForeignKeyToChangeSet
    transform s : RDBMS!RdbmsCreateFieldOperation
    to t : LIQUIBASE!ChangeSet {
        guard: s.isForeignKey
        t.id = "create-foreign-key-for-" + s.eContainer.table.sqlName;
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "create-foreign-key";

        if (not targetModel.changeSetExists("create-foreign-key-for-" + s.eContainer.table.sqlName)) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule CreateFieldOperationWithForeignKeyToAddColumnDef
    transform s : RDBMS!RdbmsCreateFieldOperation
    to t : LIQUIBASE!AddColumnDef {
        guard: s.isForeignKey

        t.name = s.field.sqlName;
        t.type = s.field.toFieldDefinition();
        t.remarks = s.field.uuid;
        t.constraints = new LIQUIBASE!Constraints(referencedTableName = s.field.referenceKey.eContainer.sqlName,
                                                  referencedColumnNames = s.field.referenceKey.sqlName);

        var changeSet = targetModel.changeSetOf("create-foreign-key-for-" + s.eContainer.table.sqlName);

        if (changeSet.addColumn.size == 0) {
            changeSet.addColumn.add(new LIQUIBASE!AddColumn(tableName = s.eContainer.table.sqlName));
            ("AddColumn created in " + changeSet.id).println();
        }
        changeSet.addColumn[0].column.add(t);
        ("AddColumnDef created in " + changeSet.id).println();
}

// CREATE FIELDS (FOREIGN KEY)
/////////////////////////////////////////
// DROP FIELDS

rule DeleteFieldOperationToChangeSet
    transform s : RDBMS!RdbmsDeleteFieldOperation
    to t : LIQUIBASE!ChangeSet {
        t.id = "drop-fields";
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "drop-fields";

        if (not targetModel.changeSetExists("drop-fields")) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule DeleteFieldOperationToDropColumn
    transform s : RDBMS!RdbmsDeleteFieldOperation
    to t : LIQUIBASE!DropColumn {
        t.tableName = s.eContainer.table.sqlName;
        t.columnName = s.field.sqlName;

        targetModel.changeSetOf("drop-fields").dropColumn.add(t);
        ("Drop field added: " + t.columnName).println();
}

// DROP FIELDS
/////////////////////////////////////////
// DROP TABLES

rule DeleteTableOperationToChangeSet
    transform s : RDBMS!RdbmsDeleteTableOperation
    to t : LIQUIBASE!ChangeSet {
        t.id = "drop-tables";
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "drop-tables";

        if (not targetModel.changeSetExists("drop-tables")) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule DeleteTableOperationToDropTable
    transform s : RDBMS!RdbmsDeleteTableOperation
    to t : LIQUIBASE!DropTable {
        t.tableName = s.table.sqlName;

        targetModel.changeSetOf("drop-tables").dropTable.add(t);
        ("Drop table added: " + t.tableName).println();
}
