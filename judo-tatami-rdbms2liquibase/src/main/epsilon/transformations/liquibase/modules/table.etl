@lazy
@greedy
rule TableToCreateTable
	transform s : RDBMS!RdbmsTable
	to t : LIQUIBASE!CreateTable {
		t.tableName = s.sqlName;
		t.remarks = s.uuid;	
}

@greedy
rule TableToCreateTableChangeSet
	transform s : RDBMS!RdbmsTable
	to t : LIQUIBASE!ChangeSet {
		targetModel.changeSet.add(t);
	    t.id = "create-table-" + s.sqlName;
	    t.author = "tatami-rdbms2liquibase";
	    t.dbms = dialect;
	    t.context = "full and " + RDBMS!RdbmsModel.all.first.version;
		t.createTable.add(s.equivalent("TableToCreateTable"));
		t.logicalFilePath = "create-tables";
}

@greedy
rule TableToCreateForeignKeysChangeSet
	transform s : RDBMS!RdbmsTable
	to t : LIQUIBASE!ChangeSet {
	    guard: s.fields.select(f | f.isTypeOf(RDBMS!RdbmsForeignKey)).size() > 0
		targetModel.changeSet.add(t);
	    t.id = "create-foreignkeys-" + s.sqlName;
	    t.author = "tatami-rdbms2liquibase";
	    t.dbms = dialect;
	    t.context = RDBMS!RdbmsModel.all.first.version;
		t.logicalFilePath = "create-foreignkeys";
}

@greedy
rule TableToAddNotNullChangeSet
	transform s : RDBMS!RdbmsTable
	to t : LIQUIBASE!ChangeSet {
	    guard: s.fields.select(f | f.mandatory).size() > 0
		targetModel.changeSet.add(t);
	    t.id = "add-not-null-" + s.sqlName;
	    t.author = "tatami-rdbms2liquibase";
	    t.dbms = dialect;
	    t.context = RDBMS!RdbmsModel.all.first.version;
		t.logicalFilePath = "add-not-null";
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Rdbms Operations

@lazy
rule CreateTableOperationToChangeSet
    transform s : RDBMS!RdbmsCreateTableOperation
    to t : LIQUIBASE!ChangeSet {
        t.id = "create-table-" + s.table.sqlName;
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "create-table";
        targetModel.changeSet.add(t);
        ("ChangeSet " + t.id + " created").println();
}

rule CreateTableOperationToCreateTable
    transform s : RDBMS!RdbmsCreateTableOperation
    to t : LIQUIBASE!CreateTable {
        t.tableName = s.table.sqlName;
        s.equivalent("CreateTableOperationToChangeSet").createTable.add(t);
        ("CreateTable " + t.tableName + " created").println();
}

// CREATE
/////////////////////////////////////////
// MODIFY

rule ModifyTableOperationToChangeSet // rename
    transform s : RDBMS!RdbmsModifyTableOperation
    to t : LIQUIBASE!ChangeSet {
        guard: s.sqlNameChanged
        t.id = "rename-tables";
        t.author = "tatami-rdbms2liquibase";
        t.dbms = dialect;
        t.context = RDBMS!RdbmsModel.all.first.version;
        t.logicalFilePath = "rename-tables";

        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> t.id) i++;
        if (i == size) {
            targetModel.changeSet.add(t);
            ("ChangeSet " + t.id + " created").println();
        }
}

rule ModifyTableOperationToRanameTable
    transform s : RDBMS!RdbmsModifyTableOperation
    to t : LIQUIBASE!RenameTable {
        guard: s.sqlNameChanged
        t.oldTableName = s.previousTable.sqlName;
        t.newTableName = s.table.sqlName;

        var i = 0;
        var size = targetModel.changeSet.size();
        while (i < size and targetModel.changeSet[i].id <> "rename-tables") i++;
        if (i < size) {
            targetModel.changeSet[i].renameTable.add(t);
            ("RenameTable (" + t.oldTableName + " -> " + t.newTableName + ") added to " + targetModel.changeSet[i].id).println();
        }
}

// Rdbms Operations
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
