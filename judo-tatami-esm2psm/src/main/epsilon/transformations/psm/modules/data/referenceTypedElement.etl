import "../namespace/namespace.etl";
import "../../../../operations/_importAll.eol";

@lazy
@greedy
rule CreateCardinalityForReferenceTypedElement
    transform s: ESM!ReferenceTypedElement
    to t: JUDOPSM!Cardinality {
      t.upper = s.upper;
      t.lower = s.lower;
}

rule CreateContainment
	transform s: ESM!OneWayRelationMember
	to t: JUDOPSM!Containment
	extends CreateNamedElement {
	  guard: s.eContainer.isKindOf(ESM!EntityType)
	       and s.relationMemberType = ESM!RelationMemberType#RELATION
           and s.containment
	  
	  t.cardinality = s.equivalent("CreateCardinalityForReferenceTypedElement");
	  s.eContainer.getPSMEquivalent().getRelations().add(t);
	  t.target = s.target.getPSMEquivalent();
	  
	  log.debug("Created Containment: " + t.name);
}

rule CreateAssociationEndWithoutPartner
	transform s: ESM!OneWayRelationMember
	to t: JUDOPSM!AssociationEnd
	extends CreateNamedElement {
	  guard: s.eContainer.isKindOf(ESM!EntityType) 
           and s.relationMemberType = ESM!RelationMemberType#RELATION
           and not s.containment
	  
	  t.cardinality = s.equivalent("CreateCardinalityForReferenceTypedElement");
	  t.reverseCascadeDelete = s.reverseCascadeDelete;
	  s.eContainer.getPSMEquivalent().relations.add(t);
	  t.target = s.target.getPSMEquivalent();
	  
	  log.debug("Created AssociationEnd: " + t.name);
}

rule CreateAssociationEndWithPartner
	transform s: ESM!TwoWayRelationMember
	to t: JUDOPSM!AssociationEnd
	extends CreateNamedElement {
	  
	  t.cardinality = s.equivalent("CreateCardinalityForReferenceTypedElement");
	  t.reverseCascadeDelete = s.reverseCascadeDelete;
	  t.partner = s.partner.getPSMEquivalent();
	  s.eContainer.getPSMEquivalent().relations.add(t);
	  t.target = s.target.getPSMEquivalent();
	  
	  log.debug("Created AssociationEnd: " + t.name);
}
