import "../data/referenceTypedElement.etl";
import "expressionType.etl";
import "../../../../operations/_importAll.eol";

@lazy
@greedy
rule CreateCardinalityForTransferObjectRelationBinding
    transform s: ESM!ReferenceTypedElement
    to t: JUDOPSM!Cardinality {
      t.upper = s.upper;
      t.lower = s.lower;
}

@lazy
@greedy
rule CreateCardinalityForTransferObjectRelationDefault
    transform s: ESM!ReferenceTypedElement
    to t: JUDOPSM!Cardinality {
      t.upper = s.upper;
      t.lower = s.lower;
}

@lazy
@greedy
rule CreateCardinalityForTransferObjectRelationRange
    transform s: ESM!ReferenceTypedElement
    to t: JUDOPSM!Cardinality {
	    t.lower = 0;
	    t.upper = -1;
}

rule CreateNavigationProperty
    transform s : ESM!OneWayRelationMember
    to t : JUDOPSM!NavigationProperty
    extends CreateNamedElement {
      guard: s.eContainer.isKindOf(ESM!EntityType)
            and s.memberType == ESM!MemberType#DERIVED
      
       t.cardinality = s.equivalent("CreateCardinalityForReferenceTypedElement");
       s.eContainer.getPSMEquivalent().navigationProperties.add(t);
       t.getterExpression = s.equivalent("CreateGetterExpressionForNavigationProperty");
       t.target = s.target.getPSMEquivalent();
       
       log.debug("Created Navigation Property: " + t.name);
}

rule CreateStaticNavigation
    transform s : ESM!StaticNavigation
    to t : JUDOPSM!StaticNavigation
    extends CreateNamedElement {

        t.cardinality = s.equivalent("CreateCardinalityForReferenceTypedElement");
        t.getterExpression = s.equivalent("CreateGetterExpressionForStaticNavigation");
        s.eContainer.getPSMEquivalent().elements.add(t);
        t.target = s.target.getPSMEquivalent();
        
        log.debug("Created Static Navigation: " + t.name);
}

//owner is transfer object type
@lazy
rule CreateNavigationPropertyForTransferObjectRelationBinding
    transform s : ESM!OneWayRelationMember
    to t : JUDOPSM!NavigationProperty
    extends CreateNamedElement {
        guard:  s.eContainer.mapping.isDefined()
                and s.target.mapping.isDefined()
                and s.getterExpression.isDefined() and
                    s.getterExpression.trim().length() > 0

        t.target = s.target.mapping.target.getPSMEquivalent();
        t.cardinality = s.equivalent("CreateCardinalityForTransferObjectRelationBinding");
        t.getterExpression = s.equivalent("CreateGetterExpressionForTransferObjectRelationBinding");
        t.name = "_" + s.name + "_" + esmUtils.getNamespaceElementFQName(s.eContainer).replace("::","_");
        s.eContainer.mapping.target.getPSMEquivalent().navigationProperties.add(t);
        
        log.debug("Created Navigation Property for transfer object relation binding: " + t.name);
}

@lazy
rule CreateStaticNavigationForTransferObjectRelationDefaultValue 
    transform s : ESM!OneWayRelationMember
    to t : JUDOPSM!StaticNavigation
    extends CreateNamedElement {
        guard:  s.defaultExpression.isDefined()
                and s.defaultExpression.trim().length() > 0
                and s.target.mapping.isDefined()
                
            t.target = s.target.mapping.target.getPSMEquivalent();
            t.cardinality = s.equivalent("CreateCardinalityForTransferObjectRelationDefault");
            t.getterExpression = s.equivalent("CreateGetterExpressionForTransferObjectRelationDefault");
            t.name = "_" + s.name + "_default_" + s.eContainer.name;
            (s.eContainer).eContainer.getPSMEquivalent().elements.add(t);
            
            log.debug("Created Static Navigation for transfer object relation default: " + t.name);
}

@lazy
@greedy
rule CreateNavigationPropertyForTransferObjectRelationRange 
    transform s : ESM!RelationFeature
    to t : JUDOPSM!NavigationProperty
    extends CreateNamedElement {
        guard: s.eContainer.mapping.isDefined()
                and s.target.mapping.isDefined()
                and s.rangeExpression.isDefined() and
                    s.rangeExpression.trim().length() > 0
            
            t.target = s.target.mapping.target.getPSMEquivalent();
            t.cardinality = s.equivalent("CreateCardinalityForTransferObjectRelationRange");
            t.getterExpression = s.equivalent("CreateGetterExpressionForTransferObjectRelationRange");
            t.name = "_" + s.name + "_range_" + esmUtils.getNamespaceElementFQName(s.eContainer).replace("::","_");
            s.eContainer.mapping.target.getPSMEquivalent().navigationProperties.add(t);
            
            log.debug("Created Navigation Property for transfer object relation range: " + t.name);
}

@lazy
@greedy
rule CreateCardinalityForExposedGraphSelector
    transform s: ESM!ReferenceTypedElement
    to t: JUDOPSM!Cardinality {
      t.upper = s.upper;
      t.lower = s.lower;
}

rule CreateStaticNavigationForExposedGraph
	transform s : ESM!OneWayRelationMember
	to t : JUDOPSM!StaticNavigation
	extends CreateNamedElement {
	  guard: not s.eContainer.isMapped() and s.target.mapping.isDefined() and s.getterExpression.isDefined() and s.getterExpression.trim() <> ''

	  var ecoreUtil = new Native("org.eclipse.emf.ecore.util.EcoreUtil");
	  ecoreUtil.getRootContainer(s).equivalent("CreateGeneratedNavigationRootPackage").elements.add(t);
	  t.name = "_" + s.name + "_selector_" + s.eContainer.name;
	  t.cardinality = s.equivalent("CreateCardinalityForExposedGraphSelector");
	  t.getterExpression = s.equivalent("CreateGetterExpressionForExposedGraphSelector");
	  t.target = s.target.mapping.target.equivalent("CreateEntityType");

	  log.debug("Created StaticNavigation for ExposedGraph: " + t.name);
}

//optional references
rule CreateOptionalNavigationProperty
    transform s : ESM!OneWayRelationMember
    to t : JUDOPSM!NavigationProperty {
      guard: s.eContainer.isKindOf(ESM!EntityType)
            and s.memberType == ESM!MemberType#DERIVED
            and s.isAggregation()
            
       t.name = "_Optional_" + s.name.firstToUpperCase();
       t.cardinality = s.equivalent("CreateCardinalityForOptionalReferenceTypedElement");
       s.eContainer.equivalent("CreateOptionalEntityType").navigationProperties.add(t);
       t.getterExpression = s.equivalent("CreateGetterExpressionForOptionalNavigationProperty");
       t.target = s.target.equivalent("CreateOptionalEntityType");
       
       log.debug("Created Optional Navigation Property: " + t.name);
}

@lazy
@greedy
rule CreateCardinalityForOptionalTransferObjectRelationBinding
    transform s: ESM!ReferenceTypedElement
    to t: JUDOPSM!Cardinality {
      t.upper = s.upper;
      t.lower = 0;
}

@lazy
rule CreateNavigationPropertyForOptionalTransferObjectRelationBinding
    transform s : ESM!OneWayRelationMember
    to t : JUDOPSM!NavigationProperty
    extends CreateNamedElement {
        guard:  s.eContainer.mapping.isDefined()
                and s.target.mapping.isDefined()
                and s.getterExpression.isDefined() and
                    s.getterExpression.trim().length() > 0
		t.name = "_Optional_" + s.name.firstToUpperCase();
        t.target = s.target.mapping.target.equivalent("CreateOptionalEntityType");
        t.cardinality = s.equivalent("CreateCardinalityForOptionalTransferObjectRelationBinding");
        t.getterExpression = s.equivalent("CreateGetterExpressionForOptionalTransferObjectRelationBinding");
        t.name = "_" + s.name + "_" + esmUtils.getNamespaceElementFQName(s.eContainer).replace("::","_");
        s.eContainer.mapping.target.equivalent("CreateOptionalEntityType").navigationProperties.add(t);
        
        log.debug("Created Navigation Property for optional transfer object relation binding: " + t.name);
}

@lazy
@greedy
rule CreateCardinalityForOptionalTransferObjectRelationRange
    transform s: ESM!ReferenceTypedElement
    to t: JUDOPSM!Cardinality {
	    t.lower = 0;
	    t.upper = -1;
}

@lazy
@greedy
rule CreateNavigationPropertyForOptionalTransferObjectRelationRange 
    transform s : ESM!RelationFeature
    to t : JUDOPSM!NavigationProperty
    extends CreateNamedElement {
        guard: s.eContainer.mapping.isDefined()
                and s.target.mapping.isDefined()
                and s.rangeExpression.isDefined() and
                    s.rangeExpression.trim().length() > 0
            t.name = "_Optional" + s.name.firstToUpperCase();
            t.target = s.target.mapping.target.equivalent("CreateOptionalEntityType");
            t.cardinality = s.equivalent("CreateCardinalityForOptionalTransferObjectRelationRange");
            t.getterExpression = s.equivalent("CreateGetterExpressionForOptionalTransferObjectRelationRange");
            t.name = "_" + s.name + "_optional_range_" + esmUtils.getNamespaceElementFQName(s.eContainer).replace("::","_");
            s.eContainer.mapping.target.equivalent("CreateOptionalEntityType").navigationProperties.add(t);
            
            log.debug("Created Navigation Property for optional transfer object relation range: " + t.name);
}

@lazy
@greedy
rule CreateCardinalityForOptionalExposedGraphSelector
    transform s: ESM!ReferenceTypedElement
    to t: JUDOPSM!Cardinality {
      t.upper = s.upper;
      t.lower = 0;
}

@lazy
rule CreateOptionalStaticNavigationForExposedGraph
	transform s : ESM!OneWayRelationMember
	to t : JUDOPSM!StaticNavigation
	extends CreateNamedElement {
	  guard: not s.eContainer.isMapped() and
	  	s.target.mapping.isDefined() and
	  	s.getterExpression.isDefined() and
	  	s.getterExpression.trim() <> '' and
	  	s.isAggregation()
	  t.name = "_Optional" + s.name.firstToUpperCase();
	  (s.eContainer).eContainer.getPSMGeneratedOptionalTransferObjectNamespaceEquivalent().elements.add(t);
	  t.name = "_" + s.name + "_optional_selector_" + s.eContainer.name;
	  t.cardinality = s.equivalent("CreateCardinalityForOptionalExposedGraphSelector");
	  t.getterExpression = s.equivalent("CreateGetterExpressionForOptionalExposedGraphSelector");
	  t.target = s.target.mapping.target.equivalent("CreateOptionalEntityType");

	  log.debug("Created StaticNavigation for ExposedGraph: " + t.name + " with target: " + t.target.eContainer.name + "." + t.target.name);
}

@lazy
@greedy
rule CreateCardinalityForStaticNavigationForOptionalDefault
    transform s: ESM!ReferenceTypedElement
    to t: JUDOPSM!Cardinality {
      t.upper = s.upper;
      t.lower = 0;
}

@lazy
rule CreateStaticNavigationForOptionalTransferObjectRelationDefaultValue 
    transform s : ESM!OneWayRelationMember
    to t : JUDOPSM!StaticNavigation
    extends CreateNamedElement {
        guard:  s.defaultExpression.isDefined()
                and s.defaultExpression.trim().length() > 0
                and s.target.mapping.isDefined()
                
            t.target = s.target.mapping.target.equivalent("CreateOptionalEntityType");
            t.cardinality = s.equivalent("CreateCardinalityForStaticNavigationForOptionalDefault");
            t.getterExpression = s.equivalent("CreateGetterExpressionForOptionalTransferObjectRelationDefault");
            t.name = "_" + s.name + "_optional_default_" + s.eContainer.name;
            (s.eContainer).eContainer.getPSMGeneratedOptionalTransferObjectNamespaceEquivalent().elements.add(t);
            
            log.debug("Created Static Navigation for optional transfer object relation default: " + t.name);
}
