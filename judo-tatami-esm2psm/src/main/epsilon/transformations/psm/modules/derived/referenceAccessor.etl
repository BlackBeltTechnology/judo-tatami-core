import "../data/referenceTypedElement.etl";
import "expressionType.etl";
import "../../../../operations/esm/derived/expressionType.eol";

@abstract
rule CreateReferenceAccessor
	transform s : ESM!ReferenceAccessor
	to t : JUDOPSM!ReferenceAccessor
	extends CreateReferenceTypedElement {
	   if (s.getterExpression.expression <> "") {
	       t.getterExpression = s.getterExpression.getPSMEquivalent();
	   }
	   if (s.setterExpression.expression <> "") {
	       t.setterExpression = s.setterExpression.getPSMEquivalent();
	   }
}

rule CreateNavigationProperty
    transform s : ESM!OneWayRelationMember
    to t : JUDOPSM!NavigationProperty
    extends CreateReferenceAccessor {
      guard: not s.containment and s.property and s.eContainer.isKindOf(ESM!EntityType)
      s.eContainer.getPSMEquivalent().navigationProperties.add(t);
      log.debug("Created NavigationProperty: " + t.name);
}

rule CreateStaticNavigation
	transform s : ESM!StaticNavigation
	to t : JUDOPSM!StaticNavigation
	extends CreateReferenceAccessor {
	  if (s.eContainer.isKindOf(ESM!Model)) {
          s.eContainer.equivalent("CreateModel").elements.add(t);
      } else if (s.eContainer.isKindOf(ESM!Package)) {
          s.eContainer.equivalent("CreatePackage").elements.add(t);
      }
	  log.debug("Created Static Navigation: " + t.name);
}