import "../data/entityType.etl";
import "expressionType.etl";
import "../../../../operations/esm/derived/expressionType.eol";

@abstract
rule CreatePrimitiveAccessor
	transform s : ESM!PrimitiveAccessor
	to t : JUDOPSM!PrimitiveAccessor
	extends CreatePrimitiveTypedElement {
	  t.getterExpression = s.getterExpression.getPSMEquivalent();
	  if (s.setterExpression.isDefined()) {
	  	t.setterExpression = s.setterExpression.getPSMEquivalent();
	  }
}

rule CreateDataProperty
	transform s : ESM!DataProperty
	to t : JUDOPSM!DataProperty
	extends CreatePrimitiveAccessor {
	  var entity : ESM!EntityType = s.getEntityType();
	  entity.equivalent("CreateEntityType").dataProperties.add(t);
	  var transferAttributes : Sequence = ESM!TransferAttribute.all.select(ta | ta.primitiveTypedElement = s);
	  for(transferAttribute in transferAttributes) {
	  	transferAttribute.equivalent("CreateTransferAttribute").binding = t;
	  }
	  log.debug("Created DataProperty: " + t.name);
}

rule CreateStaticData
	transform s : ESM!StaticData
	to t : JUDOPSM!StaticData
	extends CreatePrimitiveAccessor {
	  log.debug("Created StaticData: " + t.name);
}