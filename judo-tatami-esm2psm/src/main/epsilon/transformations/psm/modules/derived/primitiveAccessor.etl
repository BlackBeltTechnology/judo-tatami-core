import "expressionType.etl";
import "../data/primitiveTypedElement.etl";
import "../namespace/namespace.etl";
import "../derived/expressionType.etl";
import "../../../../operations/_importAll.eol";

//owner is entity type

rule CreateDataProperty
	transform s : ESM!DataMember
	to t : JUDOPSM!DataProperty
	extends CreatePrimitiveTypedElement {
	  guard: s.eContainer.isKindOf(ESM!EntityType)
	           and s.memberType == ESM!MemberType#DERIVED
	            
	  t.getterExpression = s.equivalent("CreateGetterExpressionForDataProperty");
	  
	  s.eContainer.getPSMEquivalent().dataProperties.add(t);
	  
	  log.debug("Created Data Property: " + t.name);
}

@greedy
rule CreateStaticData
    transform s : ESM!StaticData
    to t : JUDOPSM!StaticData
    extends CreatePrimitiveTypedElement {
       
       t.getterExpression = s.equivalent("CreateGetterExpressionForStaticData");
       
       s.eContainer.getPSMEquivalent().elements.add(t);
       log.debug("Created Static Data: " + t.name);
}

//owner is transfer object type and not entity type

@lazy
rule CreateStaticDataForTransferAttributeDefaultValue 
    transform s : ESM!DataMember
    to t : JUDOPSM!StaticData
    extends CreatePrimitiveTypedElement {
        guard: s.defaultExpression.isDefined() and
               s.defaultExpression.trim().length() > 0
            
            t.getterExpression = s.equivalent("CreateGetterExpressionForStaticDataAsTransferAttributeDefaultValue");
            t.name = "_" + s.name + "_default_" + s.eContainer.name;
            (s.eContainer).eContainer.getPSMEquivalent().elements.add(t);
            
            log.debug("Created Static Data for transfer attribute default value: " + t.name);
}

@lazy
rule CreateDataPropertyForTransferAttributeBinding
    transform s : ESM!DataMember
    to t : JUDOPSM!DataProperty
    extends CreatePrimitiveTypedElement {
        guard: s.eContainer.isKindOf(ESM!TransferObjectType)
            and not s.eContainer.isKindOf(ESM!EntityType) 
            and s.memberType == ESM!MemberType#DERIVED
            and s.getterExpression.isDefined() and s.getterExpression.trim().length() > 0
       
       t.getterExpression = s.equivalent("CreateGetterExpressionForDataProperty");
       t.name = "_" + s.name + "_" + esmUtils.getNamespaceElementFQName(s.eContainer).replace("::","_");
       s.eContainer.mapping.target.getPSMEquivalent().dataProperties.add(t);
       
       log.debug("Created Data Property for transfer attribute binding: " + t.name); 
}

@lazy
rule CreateStaticDataForTransferAttributeBinding 
    transform s : ESM!DataMember
    to t : JUDOPSM!StaticData
    extends CreatePrimitiveTypedElement {
        guard: s.eContainer.isKindOf(ESM!TransferObjectType)
            and not s.eContainer.isKindOf(ESM!EntityType) 
            and s.memberType == ESM!MemberType#DERIVED
            and s.getterExpression.isDefined() and s.getterExpression.trim().length() > 0
            
            t.getterExpression = s.equivalent("CreateGetterExpressionForStaticDataAsTransferAttributeBinding");
            t.name = "_" + s.name + "_binding_" + s.eContainer.name;
            (s.eContainer).eContainer.getPSMEquivalent().elements.add(t);
            
            log.debug("Created Static Data for transfer attribute binding: " + t.name);
}

//optional

rule CreateOptionalDataProperty
	transform s : ESM!DataMember
	to t : JUDOPSM!DataProperty {
	  guard: s.eContainer.isKindOf(ESM!EntityType)
	           and s.memberType == ESM!MemberType#DERIVED
	  
	  t.name = "_Optional" + s.name.firstToUpperCase();
	  t.dataType = s.dataType.getPSMEquivalent();
	  t.required = false;
	    
	  t.getterExpression = s.equivalent("CreateGetterExpressionForOptionalDataProperty");
	  
	  s.eContainer.equivalent("CreateOptionalEntityType").dataProperties.add(t);
	  
	  log.debug("Created Optional Data Property: " + t.name);
}

@lazy
rule CreateDataPropertyForOptionalTransferAttributeBinding
    transform s : ESM!DataMember
    to t : JUDOPSM!DataProperty {
        guard: s.eContainer.isKindOf(ESM!TransferObjectType)
            and not s.eContainer.isKindOf(ESM!EntityType) 
            and s.memberType == ESM!MemberType#DERIVED
            and s.getterExpression.isDefined() and s.getterExpression.trim().length() > 0
       t.name = "_Optional" + s.name.firstToUpperCase();
       t.required = false;
       t.dataType = s.dataType.getPSMEquivalent();
       t.getterExpression = s.equivalent("CreateGetterExpressionForStaticDataAsTransferAttributeBinding");
       t.name = "_" + s.name + "_" + esmUtils.getNamespaceElementFQName(s.eContainer).replace("::","_");
       s.eContainer.mapping.target.equivalent("CreateOptionalEntityType").dataProperties.add(t);
       
       log.debug("Created Optional Data Property for optional transfer attribute binding: " + t.name); 
}

