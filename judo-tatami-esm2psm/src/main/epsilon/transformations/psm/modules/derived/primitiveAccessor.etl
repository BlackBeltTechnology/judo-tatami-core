import "../data/primitiveTypedElement.etl";
import "../../../../operations/esm/data/entityType.eol";
import "expressionType.etl";
import "../../../../operations/esm/derived/expressionType.eol";

@abstract
rule CreatePrimitiveAccessor
	transform s : ESM!PrimitiveAccessor
	to t : JUDOPSM!PrimitiveAccessor
	extends CreatePrimitiveTypedElement {
	  t.getterExpression = s.getterExpression.getPSMEquivalent();
	  t.setterExpression = s.setterExpression.getPSMEquivalent();
}

rule CreateDataProperty
	transform s : ESM!DataMember
	to t : JUDOPSM!DataProperty
	extends CreatePrimitiveAccessor {
	  guard: s.property and s.eContainer.isKindOf(ESM!EntityType)
	  s.eContainer.getPSMEquivalent().dataProperties.add(t);
	  log.debug("Created DataProperty: " + t.name);
}

rule CreateStaticData
	transform s : ESM!StaticData
	to t : JUDOPSM!StaticData
	extends CreatePrimitiveAccessor {
	   var namespace : ESM!Namespace = s.eContainer;
       if (namespace.isKindOf(ESM!Model)) {
            namespace.equivalent("CreateModel").elements.add(t);
       } else if (namespace.isKindOf(ESM!Package)) {
            namespace.equivalent("CreatePackage").elements.add(t);
       }
	  log.debug("Created StaticData: " + t.name);
}