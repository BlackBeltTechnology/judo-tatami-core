import "../namespace.etl";
import "../type/type.etl";

rule CreateMeasure
	transform s: ESM!Measure
	to t: JUDOPSM!Measure
	extends CreateNamespaceElement {
	  for (unit in s.units) {
	    t.units.add(unit.equivalent("CreateUnit"));
	  }
	  t.`symbol` = s.`symbol`;
	  
	  log.debug("Created Measure: " + t.name);
}

rule CreateMeasuredType
	transform s: ESM!MeasuredType
	to t: JUDOPSM!MeasuredType
	extends CreateNumericType {
	  t.`storeUnit` = s.`storeUnit`.equivalent("CreateUnit");
}

rule CreateUnit
	transform s: ESM!Measure
	to t: JUDOPSM!Measure
	extends CreateNamedElement {
	  t.`rateDividend` = s.`rateDividend`;
	  t.`rateDivisor` = s.`rateDivisor`;
	  t.`symbol` = s.`symbol`;
	  
	  log.debug("Created Unit: " + t.name);
}

//TODO
rule CreateDurationUnit
	transform s: ESM!DurationUnit
	to t: JUDOPSM!DurationUnit
	extends CreateUnit {
	  t.`unitType` = JUDOPSM!DurationType#year; //TODO: yes.
	  
	  log.debug("Created DurationUnit: " + t.name);
}

rule CreateMeasureDefinitionTerm
	transform s: ESM!MeasureDefinitionTerm
	to t: JUDOPSM!MeasureDefinitionTerm {
	  t.`exponent` = s.`exponent`;
	  t.`unit` = s.`unit`.equivalent("CreateUnit");
	  
	  log.debug("Created MeasureDefinitionTerm: " + t.name);
}

rule CreateDerivedMeasure
	transform s: ESM!Measure
	to t: JUDOPSM!DerivedMeasure
	extends CreateMeasure {
	  for(term in s.terms) {
	    t.terms.add(term.equivalent("CreateMeasureDefinitionTerm"));
	  }
	  
	  log.debug("Created DerivedMeasure: " + t.name);
}
