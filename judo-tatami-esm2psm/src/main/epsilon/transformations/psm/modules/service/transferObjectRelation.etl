import "../namespace/namespace.etl";
import "../data/primitiveTypedElement.etl";
import "../data/referenceTypedElement.etl";
import "../derived/expressionType.etl";
import "../../../../operations/_importAll.eol";

@abstract
rule CreateTransferObjectRelation
    transform s: ESM!RelationFeature
    to t: JUDOPSM!TransferObjectRelation
    extends CreateNamedElement {
      t.cardinality = s.equivalent("CreateCardinalityForReferenceTypedElement");
      t.target = s.target.getPSMTransferObjectTypeEquivalent();
      t.embedded = s.isAggregation();
      
      if (s.isCreateAllowed()) {
          t.embeddedCreate = true;
      }
      if (s.isUpdateAllowed()) {
          t.embeddedUpdate = true;
      }
      if (s.isDeleteAllowed()) {
          t.embeddedDelete = true;
      }
      if (esmUtils.isGetRangeSupported(s) and s.target.isMapped()) {
        t.range = s.getPSMRangeEquivalent();
      }
      if (s.isDefaultExpressionSupported()) {
        t.defaultValue = s.getPSMDefaultEquivalent();
      }

      s.eContainer.getPSMEquivalent().relations.add(t);
//      t.get = s.equivalent("CreateGetOperationForTransferObjectRelation");
//      t.create = s.equivalent("CreateCreateOperationForTransferObjectRelation");
//      t.update = s.equivalent("CreateUpdateOperationForTransferObjectRelation");
//      t.`delete` = s.equivalent("CreateDeleteOperationForTransferObjectRelation");
}

@greedy
rule CreateRangeTransferObjectRelation
    transform s : ESM!RelationFeature
    to t : JUDOPSM!TransferObjectRelation {
        guard: s.eContainer.isKindOf(ESM!TransferObjectType) and esmUtils.isGetRangeSupported(s) and s.target.isMapped()

        t.name = s.getPSMRangeEquivalent().name;
        t.cardinality = new JUDOPSM!Cardinality;
        t.cardinality.lower = 0;
        t.cardinality.upper = -1;
        t.target = s.target.getPSMTransferObjectTypeEquivalent();
        t.binding = s.getPSMRangeEquivalent();

        s.eContainer.getPSMTransferObjectTypeEquivalent().relations.add(t);
}

@greedy
rule CreateDefaultTransferObjectRelation
    transform s : ESM!RelationFeature
    to t : JUDOPSM!TransferObjectRelation {
        guard: s.isDefaultExpressionSupported() and s.eContainer.isMapped()

        t.name = s.getPSMDefaultEquivalent().name;
        t.cardinality = new JUDOPSM!Cardinality;
        t.cardinality.lower = 0;
        t.cardinality.upper = s.upper;
        t.target = s.target.getPSMTransferObjectTypeEquivalent();
        t.binding = s.getPSMDefaultEquivalent();

        s.eContainer.getPSMTransferObjectTypeEquivalent().relations.add(t);
}

rule CreateTransferObjectRelationFromRelationOrProperty
    transform s: ESM!OneWayRelationMember
    to t: JUDOPSM!TransferObjectRelation
    extends CreateTransferObjectRelation {
      guard: s.eContainer.isKindOf(ESM!TransferObjectType) 
            and not s.eContainer.isTypeOf(ESM!EntityType)
            and s.memberType <> ESM!MemberType#MAPPED

      if(s.eContainer.isMapped()) {
      	t.binding = s.equivalent("CreateNavigationPropertyForTransferObjectRelationBinding");
      } else {
      	t.binding = s.equivalent("CreateStaticNavigationForExposedGraph");
      }
        
      log.debug("Created TransferObjectRelation (from OneWayRelationMember): [" + t.name + "] into [" + t.eContainer.name + "]");
}

rule CreateTransferObjectRelationFromBoundToStoredOneWayRelationMember
    transform s: ESM!OneWayRelationMember
    to t: JUDOPSM!TransferObjectRelation
    extends CreateTransferObjectRelation {
      guard: s.memberType == ESM!MemberType#MAPPED
            and s.binding.memberType == ESM!MemberType#STORED
            and s.binding.isKindOf(ESM!OneWayRelationMember)

      if (s.binding.isComposition()) {
        t.binding = s.binding.equivalent("CreateContainment");
      } else {
        t.binding = s.binding.equivalent("CreateAssociationEndWithoutPartner");
      }
      log.debug("Created TransferObjectRelation (from mapped OneWayRelationMember): [" + t.name + "] into [" + t.eContainer.name + "]");
}

rule CreateTransferObjectRelationFromBoundToDerivedOneWayRelationMember
    transform s: ESM!OneWayRelationMember
    to t: JUDOPSM!TransferObjectRelation
    extends CreateTransferObjectRelation {
      guard: s.memberType == ESM!MemberType#MAPPED
            and s.binding.memberType == ESM!MemberType#DERIVED
            and s.binding.isKindOf(ESM!OneWayRelationMember)

      t.binding = s.binding.equivalent("CreateNavigationProperty");

      log.debug("Created TransferObjectRelation (from mapped OneWayRelationMember): [" + t.name + "] into [" + t.eContainer.name + "]");
}

rule CreateTransferObjectRelationFromBoundToTwoWayRelationMember
    transform s: ESM!OneWayRelationMember
    to t: JUDOPSM!TransferObjectRelation
    extends CreateTransferObjectRelation {
      guard: s.memberType == ESM!MemberType#MAPPED
            and s.binding.isKindOf(ESM!TwoWayRelationMember)

        t.binding = s.binding.equivalent("CreateAssociationEndWithPartner");

        log.debug("Created TransferObjectRelation (from OneWayRelationMember): [" + t.name + "] into [" + t.eContainer.name + "]");
}

@lazy
@greedy
rule CreateCardinalityOfTransferObjectRelationForDefaultTransferObjectType
    transform s: ESM!ReferenceTypedElement
    to t: JUDOPSM!Cardinality {
      t.upper = s.upper;
      t.lower = s.lower;
}

@abstract
rule CreateTransferObjectRelationForDefaultTransferObjectType
    transform s: ESM!ReferenceTypedElement
    to t: JUDOPSM!TransferObjectRelation
    extends CreateNamedElement {
      t.cardinality = s.equivalent("CreateCardinalityOfTransferObjectRelationForDefaultTransferObjectType");
      t.target = s.target.equivalent("CreateDefaultMappedTransferObjectTypeForEntity");
      t.embedded = s.isAggregation();
      
      if (s.isCreateAllowed()) {
          t.embeddedCreate = true;
      }
      if (s.isUpdateAllowed()) {
          t.embeddedUpdate = true;
      }
      if (s.isDeleteAllowed()) {
          t.embeddedDelete = true;
      }
      if (esmUtils.isGetRangeSupported(s) and s.target.isMapped()) {
          t.range = s.getPSMRangeEquivalent();
      }
      if (s.isDefaultExpressionSupported()) {
        t.defaultValue = s.getPSMDefaultEquivalent();
      }

      s.eContainer.equivalent("CreateDefaultMappedTransferObjectTypeForEntity").relations.add(t);
//      t.get = s.equivalent("CreateGetOperationForTransferObjectRelation");
//      t.create = s.equivalent("CreateCreateOperationForTransferObjectRelation");
//      t.update = s.equivalent("CreateUpdateOperationForTransferObjectRelation");
//      t.`delete` = s.equivalent("CreateDeleteOperationForTransferObjectRelation");
      
      log.debug("Created TransferObjectRelation for DefaultTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
}

rule CreateTransferObjectRelationForDefaultTransferObjectTypeFromOneWayRelationMemberContainment
    transform s: ESM!OneWayRelationMember
    to t: JUDOPSM!TransferObjectRelation
    extends CreateTransferObjectRelationForDefaultTransferObjectType {
      guard: s.memberType == ESM!MemberType#STORED
           and s.isComposition()

      t.embedded = s.isComposition();
      t.binding = s.equivalent("CreateContainment");
      
      log.debug("Created TransferObjectRelation for DefaultTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
}

rule CreateTransferObjectRelationForDefaultTransferObjectTypeFromOneWayRelationMemberNotContainment
    transform s: ESM!OneWayRelationMember
    to t: JUDOPSM!TransferObjectRelation
    extends CreateTransferObjectRelationForDefaultTransferObjectType {
      guard: s.memberType == ESM!MemberType#STORED
           and not s.isComposition()

      t.binding = s.equivalent("CreateAssociationEndWithoutPartner");

      log.debug("Created TransferObjectRelation for DefaultTransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
}

rule CreateTransferObjectRelationForDefaultTransferObjectTypeFromOneWayRelationMemberProperty
    transform s: ESM!OneWayRelationMember
    to t: JUDOPSM!TransferObjectRelation
    extends CreateTransferObjectRelationForDefaultTransferObjectType {
      guard: s.eContainer.isKindOf(ESM!EntityType)
           and s.memberType == ESM!MemberType#DERIVED
           
      t.binding = s.equivalent("CreateNavigationProperty");
      
      log.debug("Created TransferObjectRelationFromTwoWayRelationMember: [" + t.name + "] into [" + t.eContainer.name + "]");
}

rule CreateTransferObjectRelationForDefaultTransferObjectTypeFromTwoWayRelationMember
    transform s: ESM!TwoWayRelationMember
    to t: JUDOPSM!TransferObjectRelation
    extends CreateTransferObjectRelationForDefaultTransferObjectType {

      t.binding = s.equivalent("CreateAssociationEndWithPartner");
      
      log.debug("Created TransferObjectRelationFromTwoWayRelationMember: [" + t.name + "] into [" + t.eContainer.name + "]");
}

@lazy
@greedy
rule CreateCardinalityForOptionalReferenceTypedElement
    transform s: ESM!ReferenceTypedElement
    to t: JUDOPSM!Cardinality {
      t.upper = s.upper;
      t.lower = 0;
}

@abstract
rule CreateOptionalTransferObjectRelation
    transform s: ESM!RelationFeature
    to t: JUDOPSM!TransferObjectRelation
    extends CreateNamedElement {
      t.cardinality = s.equivalent("CreateCardinalityForOptionalReferenceTypedElement");
      t.target = s.target.getPSMOptionalEquivalent();
      t.embedded = s.isAggregation();
      
      if (s.isCreateAllowed()) {
          t.embeddedCreate = true;
      }
      if (s.isUpdateAllowed()) {
          t.embeddedUpdate = true;
      }
      if (s.isDeleteAllowed()) {
          t.embeddedDelete = true;
      }

      s.eContainer.getPSMOptionalEquivalent().relations.add(t);
}

rule CreateOptionalTransferObjectRelationFromRelationOrProperty
    transform s: ESM!OneWayRelationMember
    to t: JUDOPSM!TransferObjectRelation
    extends CreateOptionalTransferObjectRelation {
      guard: s.memberType == ESM!MemberType#TRANSIENT

      if(s.eContainer.isMapped()) {
        t.binding = s.equivalent("CreateNavigationPropertyForTransferObjectRelationBinding");
      } else {
        t.binding = s.equivalent("CreateStaticNavigationForExposedGraph");
      }
        
      log.debug("Created Optional TransferObjectRelation (from OneWayRelationMember): [" + t.name + "] into [" + t.eContainer.name + "]");
}

rule CreateOptionalTransferObjectRelationFromBoundToOneWayRelationMember
    transform s: ESM!OneWayRelationMember
    to t: JUDOPSM!TransferObjectRelation
    extends CreateOptionalTransferObjectRelation {
      guard: s.eContainer.isKindOf(ESM!TransferObjectType) 
            and not s.eContainer.isTypeOf(ESM!EntityType)
            and s.memberType == ESM!MemberType#MAPPED
            and s.binding.isKindOf(ESM!OneWayRelationMember)
            and s.binding.memberType == ESM!MemberType#STORED
            
      if (s.binding.isComposition()) {
        t.binding = s.binding.equivalent("CreateContainment");
      } else if (not s.binding.isComposition()) {
        t.binding = s.binding.equivalent("CreateAssociationEndWithoutPartner");
      } 
      
      log.debug("Created Optional TransferObjectRelation (from OneWayRelationMember): [" + t.name + "] into [" + t.eContainer.name + "]");
}

rule CreateOptionalTransferObjectRelationFromBoundToTwoWayRelationMember
    transform s: ESM!OneWayRelationMember
    to t: JUDOPSM!TransferObjectRelation
    extends CreateOptionalTransferObjectRelation {
      guard: s.eContainer.isKindOf(ESM!TransferObjectType) 
            and not s.eContainer.isTypeOf(ESM!EntityType)
            and s.memberType == ESM!MemberType#MAPPED
            and s.binding.isKindOf(ESM!TwoWayRelationMember)
            
      t.binding = s.binding.equivalent("CreateAssociationEndWithPartner");

      log.debug("Created Optional TransferObjectRelation (from OneWayRelationMember): [" + t.name + "] into [" + t.eContainer.name + "]");
}

rule CreateOptionalTransferObjectRelationForOptionalEntityTypeFromContainment
    transform s: ESM!OneWayRelationMember
    to t: JUDOPSM!TransferObjectRelation
    extends CreateOptionalTransferObjectRelation {
      guard: s.memberType == ESM!MemberType#STORED
      
      if (s.isComposition()) {
          t.binding = s.equivalent("CreateContainment");
      } else {
          t.binding = s.equivalent("CreateAssociationEndWithoutPartner");
      }
      t.embedded = s.isComposition();
      
      log.debug("Created Optional TransferObjectRelation for Optional TransferObjectType: [" + t.name + "] into [" + t.eContainer.name + "]");
}

rule CreateOptionalTransferObjectRelationForForOptionalEntityTypeFromTwoWayRelationMember
    transform s: ESM!TwoWayRelationMember
    to t: JUDOPSM!TransferObjectRelation
    extends CreateOptionalTransferObjectRelation {
      
      t.binding = s.equivalent("CreateAssociationEndWithPartner");
      
      log.debug("Created Optional TransferObjectRelation From TwoWayRelationMember: [" + t.name + "] into [" + t.eContainer.name + "]");
}
