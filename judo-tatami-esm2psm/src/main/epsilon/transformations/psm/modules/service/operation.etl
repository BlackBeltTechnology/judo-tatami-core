import "../namespace/namespace.etl";
import "../../../../operations/_importAll.eol";

@lazy
@greedy
rule CreateOperationBody
    transform s: ESM!Operation
    to t: JUDOPSM!OperationBody {
      t.body = s.body;
      t.stateful = s.stateful;
      t.customImplementation = s.customImplementation and s.operationType <> ESM!OperationType#ABSTRACT;
}

rule CreateBoundOperation
    transform s: ESM!Operation
    to t: JUDOPSM!BoundOperation
    extends CreateNamedElement {
      guard: s.operationType <> ESM!OperationType#STATIC and s.eContainer.isKindOf(ESM!EntityType)

      t.`abstract` = s.operationType == ESM!OperationType#ABSTRACT;

      if (s.operationType <> ESM!OperationType#ABSTRACT) {
      	t.implementation = s.equivalent("CreateOperationBody");
      }

      t.instanceRepresentation = s.eContainer.equivalent("CreateDefaultMappedTransferObjectTypeForEntity");
      s.eContainer.equivalent("CreateEntityType").operations.add(t);
}

rule CreateBoundTransferOperationInDefaultTransferObjectType
    transform s: ESM!Operation
    to t: JUDOPSM!BoundTransferOperation
    extends CreateNamedElement {
      guard: s.operationType <> ESM!OperationType#STATIC and s.eContainer.isKindOf(ESM!EntityType)

      t.binding = s.equivalent("CreateBoundOperation");

      if (s.input.isDefined()) {
          t.input = new JUDOPSM!Parameter;
          t.input.name = s.input.equivalent("CreateParameter").name;
          t.input.type = s.input.equivalent("CreateParameter").type;
          t.input.cardinality = new JUDOPSM!Cardinality;
          t.input.cardinality.lower = s.input.lower;
          t.input.cardinality.upper = s.input.upper;
      }

      if (s.output.isDefined()) {
          t.output = new JUDOPSM!Parameter;
          t.output.name = s.output.equivalent("CreateParameter").name;
          t.output.type = s.output.equivalent("CreateParameter").type;
          t.output.cardinality = new JUDOPSM!Cardinality;
          t.output.cardinality.lower = s.output.lower;
          t.output.cardinality.upper = s.output.upper;
      }

      for (f in s.faults) {
          var fault = new JUDOPSM!Parameter;
          fault.name = f.equivalent("CreateParameter").name;
          fault.type = f.equivalent("CreateParameter").type;
          fault.cardinality = new JUDOPSM!Cardinality;
          fault.cardinality.lower = 1;
          fault.cardinality.upper = 1;
          t.faults.add(fault);
      }

      s.eContainer.equivalent("CreateDefaultMappedTransferObjectTypeForEntity").operations.add(t);
}

rule CreateBoundTransferOperation
    transform s: ESM!Operation
    to t: JUDOPSM!BoundTransferOperation
    extends CreateNamedElement {
      guard: s.operationType == ESM!OperationType#MAPPED

      var resolvedBinding = esmUtils.resolveBindingOfOperation(s.eContainer, s).orElse(null);
      if (resolvedBinding.isDefined()) {
          t.binding = resolvedBinding.equivalent("CreateBoundOperation");
      }
      s.eContainer.getPSMEquivalent().operations.add(t);
}

rule CreateUnboundTransferOperationInDefaultTransferObjectType
    transform s: ESM!Operation
    to t: JUDOPSM!UnboundOperation
    extends CreateNamedElement {
      guard: s.operationType == ESM!OperationType#STATIC and s.eContainer.isKindOf(ESM!EntityType)

      t.implementation = s.equivalent("CreateOperationBody");
      t.initializer = s.initializer;

      s.eContainer.equivalent("CreateDefaultMappedTransferObjectTypeForEntity").operations.add(t);
}

rule CreateInPlaceUnboundOperation
    transform s: ESM!Operation
    to t: JUDOPSM!UnboundOperation
    extends CreateNamedElement {
	  guard: s.operationType == ESM!OperationType#STATIC and not s.eContainer.isKindOf(ESM!EntityType)

	  t.implementation = s.equivalent("CreateOperationBody");
	  t.initializer = s.initializer;

	  s.eContainer.getPSMEquivalent().operations.add(t);
}

@lazy
@greedy
rule CreateCardinalityForParameter
	transform s: ESM!Parameter
	to t: JUDOPSM!Cardinality {
	  t.upper = s.upper;
  	  t.lower = s.lower;
}

rule CreateParameter
	transform s : ESM!Parameter
	to t : JUDOPSM!Parameter
	extends CreateNamedElement {

	  t.cardinality = s.equivalent("CreateCardinalityForParameter");

	  t.type = s.target.getPSMTransferObjectTypeEquivalent();

	  if (s.eContainer.input == s) {
	  	s.eContainer.getPSMEquivalent().input = t;
	  } else if (s.eContainer.output == s) {
	  	s.eContainer.getPSMEquivalent().output = t;
	  } else if (s.eContainer.faults.contains(s)) {
	  	s.eContainer.getPSMEquivalent().faults.add(t);
	  }
}

@greedy
rule CreateGetOperationForRelation
    transform s : ESM!RelationFeature
    to t : JUDOPSM!BoundOperation {
        guard: s.eContainer.isKindOf(ESM!TransferObjectType) and s.eContainer.mapping.isDefined() and s.target.isKindOf(ESM!TransferObjectType) and s.target.mapping.isDefined() and s.memberType <> ESM!MemberType#TRANSIENT

        t.name = "_get" + s.name.firstToUpperCase() + "For" + esmUtils.getNamespaceElementFQName(s.eContainer).replace("::", "_").firstToUpperCase();
        t.instanceRepresentation = s.eContainer.getPSMTransferObjectTypeEquivalent();

        t.input = new JUDOPSM!Parameter;
        t.input.name = "input";
        t.input.type = s.target.equivalent("CreateQueryCustomizerType");
        t.input.cardinality = new JUDOPSM!Cardinality;
        t.input.cardinality.lower = 0;
        t.input.cardinality.upper = 1;

        t.output = new JUDOPSM!Parameter;
        t.output.name = "output";
        t.output.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.output.cardinality = new JUDOPSM!Cardinality;
        t.output.cardinality.lower = s.lower;
        t.output.cardinality.upper = s.upper;

        s.eContainer.mapping.target.equivalent("CreateEntityType").operations.add(t);
}

@greedy
rule CreateGetTransferOperationForRelation
    transform s : ESM!RelationFeature
    to t : JUDOPSM!BoundTransferOperation {
        guard: s.eContainer.isKindOf(ESM!TransferObjectType) and s.eContainer.mapping.isDefined() and s.target.isKindOf(ESM!TransferObjectType) and s.target.mapping.isDefined() and s.memberType <> ESM!MemberType#TRANSIENT

        t.name = "_get" + s.name.firstToUpperCase();
        t.behaviour = new JUDOPSM!TransferOperationBehaviour;
        t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#GET_RELATION;
        t.behaviour.owner = s.getPSMTransferObjectRelationEquivalent();

        t.input = new JUDOPSM!Parameter;
        t.input.name = "input";
        t.input.type = s.target.equivalent("CreateQueryCustomizerType");
        t.input.cardinality = new JUDOPSM!Cardinality;
        t.input.cardinality.lower = 0;
        t.input.cardinality.upper = 1;

        t.output = new JUDOPSM!Parameter;
        t.output.name = "output";
        t.output.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.output.cardinality = new JUDOPSM!Cardinality;
        t.output.cardinality.lower = s.lower;
        t.output.cardinality.upper = s.upper;

        t.binding = s.equivalent("CreateGetOperationForRelation");

        s.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(t);
}

@greedy
rule CreateGetUnboundOperation
    transform s : ESM!RelationFeature
    to t : JUDOPSM!UnboundOperation {
        guard: not s.eContainer.mapping.isDefined() and s.target.isKindOf(ESM!TransferObjectType) and s.target.mapping.isDefined() and s.memberType == ESM!MemberType#DERIVED

        t.name = "_get" + s.name.firstToUpperCase();
        t.behaviour = new JUDOPSM!TransferOperationBehaviour;
        t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#GET;
        
	    t.behaviour.owner = s.getPSMTransferObjectRelationEquivalent();
        
        t.input = new JUDOPSM!Parameter;
        t.input.name = "input";
        t.input.type = s.target.equivalent("CreateQueryCustomizerType");
        t.input.cardinality = new JUDOPSM!Cardinality;
        t.input.cardinality.lower = 0;
        t.input.cardinality.upper = 1;

        t.output = new JUDOPSM!Parameter;
        t.output.name = "output";
        t.output.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.output.cardinality = new JUDOPSM!Cardinality;
        t.output.cardinality.lower = s.lower;
        t.output.cardinality.upper = s.upper;

        s.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(t);
}



@greedy
rule CreateCreateOperationForRelation
    transform s : ESM!RelationFeature
    to t : JUDOPSM!BoundOperation {
        guard: s.eContainer.isKindOf(ESM!TransferObjectType) and s.eContainer.mapping.isDefined() and s.target.isKindOf(ESM!TransferObjectType) and s.target.mapping.isDefined() and s.isCreateAllowed() and s.memberType <> ESM!MemberType#TRANSIENT

        t.name = "_create" + s.name.firstToUpperCase() + "For" + esmUtils.getNamespaceElementFQName(s.eContainer).replace("::", "_").firstToUpperCase();
        t.instanceRepresentation = s.eContainer.getPSMTransferObjectTypeEquivalent();

        t.input = new JUDOPSM!Parameter;
        t.input.name = "input";
        t.input.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.input.cardinality = new JUDOPSM!Cardinality;
        t.input.cardinality.lower = 1;
        t.input.cardinality.upper = 1;

        t.output = new JUDOPSM!Parameter;
        t.output.name = "output";
        t.output.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.output.cardinality = new JUDOPSM!Cardinality;
        t.output.cardinality.lower = 1;
        t.output.cardinality.upper = 1;

        s.eContainer.mapping.target.equivalent("CreateEntityType").operations.add(t);
}

@greedy
rule CreateCreateTransferOperationForRelation
    transform s : ESM!RelationFeature
    to t : JUDOPSM!BoundTransferOperation {
        guard: s.eContainer.isKindOf(ESM!TransferObjectType) and s.eContainer.mapping.isDefined() and s.target.isKindOf(ESM!TransferObjectType) and s.target.mapping.isDefined() and s.isCreateAllowed() and s.memberType <> ESM!MemberType#TRANSIENT

        t.name = "_create" + s.name.firstToUpperCase();
        t.behaviour = new JUDOPSM!TransferOperationBehaviour;
        t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#CREATE_RELATION;
        t.behaviour.owner = s.getPSMTransferObjectRelationEquivalent();

        t.input = new JUDOPSM!Parameter;
        t.input.name = "input";
        t.input.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.input.cardinality = new JUDOPSM!Cardinality;
        t.input.cardinality.lower = 1;
        t.input.cardinality.upper = 1;

        t.output = new JUDOPSM!Parameter;
        t.output.name = "output";
        t.output.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.output.cardinality = new JUDOPSM!Cardinality;
        t.output.cardinality.lower = 1;
        t.output.cardinality.upper = 1;

        t.binding = s.equivalent("CreateCreateOperationForRelation");

        for (relation in s.target.getAllRelations().select(r | r.target.mapping.isDefined() and not r.isReadOnly() and (r.isKindOf(ESM!TwoWayRelationMember) implies r.partner <> s))) {
            if (esmUtils.isRangeAllowedOnRelation(relation) and relation.rangeExpression.isDefined() and relation.rangeExpression.trim().length() > 0) {
                s.createGetRangeTransferOperationForRelation(relation, t.input, "create");
            }
        }
        s.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(t);
}

@greedy
rule CreateCreateUnboundOperation
    transform s : ESM!RelationFeature
    to t : JUDOPSM!UnboundOperation {
        guard: not s.eContainer.mapping.isDefined() and s.target.isKindOf(ESM!TransferObjectType) and s.target.mapping.isDefined() and s.isCreateAllowed() and s.memberType == ESM!MemberType#DERIVED

        t.name = "_create" + s.name.firstToUpperCase();
        t.behaviour = new JUDOPSM!TransferOperationBehaviour;
        t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#CREATE;
        t.behaviour.owner = s.getPSMTransferObjectRelationEquivalent();

        t.input = new JUDOPSM!Parameter;
        t.input.name = "input";
        t.input.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.input.cardinality = new JUDOPSM!Cardinality;
        t.input.cardinality.lower = 1;
        t.input.cardinality.upper = 1;

        t.output = new JUDOPSM!Parameter;
        t.output.name = "output";
        t.output.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.output.cardinality = new JUDOPSM!Cardinality;
        t.output.cardinality.lower = 1;
        t.output.cardinality.upper = 1;

        for (relation in s.target.getAllRelations().select(r | r.target.mapping.isDefined() and not r.isReadOnly() and (r.isKindOf(ESM!TwoWayRelationMember) implies r.partner <> s))) {
            if (esmUtils.isRangeAllowedOnRelation(relation) and relation.rangeExpression.isDefined() and relation.rangeExpression.trim().length() > 0) {
                s.createGetRangeTransferOperationForRelation(relation, t.input, "create");
            }
        }

        s.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(t);
}

@greedy
rule CreateUpdateOperationForRelation
    transform s : ESM!RelationFeature
    to t : JUDOPSM!BoundOperation {
        guard: s.eContainer.isKindOf(ESM!TransferObjectType) and s.eContainer.mapping.isDefined() and s.target.isKindOf(ESM!TransferObjectType) and s.target.mapping.isDefined() and s.isUpdateAllowed() and s.memberType <> ESM!MemberType#TRANSIENT

        t.name = "_update" + s.name.firstToUpperCase() + "For" + esmUtils.getNamespaceElementFQName(s.eContainer).replace("::", "_").firstToUpperCase();
        t.instanceRepresentation = s.eContainer.getPSMTransferObjectTypeEquivalent();

        t.input = new JUDOPSM!Parameter;
        t.input.name = "input";
        t.input.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.input.cardinality = new JUDOPSM!Cardinality;
        t.input.cardinality.lower = 1;
        t.input.cardinality.upper = 1;

        t.output = new JUDOPSM!Parameter;
        t.output.name = "output";
        t.output.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.output.cardinality = new JUDOPSM!Cardinality;
        t.output.cardinality.lower = 1;
        t.output.cardinality.upper = 1;

        s.eContainer.mapping.target.equivalent("CreateEntityType").operations.add(t);
}

@greedy
rule CreateUpdateTransferOperationForRelation
    transform s : ESM!RelationFeature
    to t : JUDOPSM!BoundTransferOperation {
        guard: s.eContainer.isKindOf(ESM!TransferObjectType) and s.eContainer.mapping.isDefined() and s.target.isKindOf(ESM!TransferObjectType) and s.target.mapping.isDefined() and s.isUpdateAllowed() and s.memberType <> ESM!MemberType#TRANSIENT

        t.name = "_update" + s.name.firstToUpperCase();
        t.behaviour = new JUDOPSM!TransferOperationBehaviour;
        t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#UPDATE_RELATION;
        t.behaviour.owner = s.getPSMTransferObjectRelationEquivalent();

        t.input = new JUDOPSM!Parameter;
        t.input.name = "input";
        t.input.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.input.cardinality = new JUDOPSM!Cardinality;
        t.input.cardinality.lower = 1;
        t.input.cardinality.upper = 1;

        t.output = new JUDOPSM!Parameter;
        t.output.name = "output";
        t.output.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.output.cardinality = new JUDOPSM!Cardinality;
        t.output.cardinality.lower = 1;
        t.output.cardinality.upper = 1;

        t.binding = s.equivalent("CreateUpdateOperationForRelation");

        for (relation in s.target.getAllRelations().select(r | r.target.mapping.isDefined() and not r.isReadOnly() and (r.isKindOf(ESM!TwoWayRelationMember) implies r.partner <> s))) {

			if (esmUtils.isSetOnRelation(s, relation)) {
                s.createSetTransferOperationForRelation(relation, s.createSetOperationForRelation(relation));			
			}
			if (esmUtils.isUnsetOnRelation(s, relation)) {
	            s.createUnsetTransferOperationForRelation(relation, s.createUnsetOperationForRelation(relation));
			}
			if (esmUtils.isAddOnRelation(s, relation)) {
	            s.createAddAllTransferOperationForRelation(relation, s.createAddAllOperationForRelation(relation));
			}
			if (esmUtils.isRemoveOnRelation(s, relation)) {
	            s.createRemoveAllTransferOperationForRelation(relation, s.createRemoveAllOperationForRelation(relation));
			}
            
            if (esmUtils.isRangeAllowedOnRelation(relation) and relation.rangeExpression.isDefined() and relation.rangeExpression.trim().length() > 0) {
                s.createGetRangeTransferOperationForRelation(relation, t.input, "update");
            }
        }
        s.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(t);
}

@greedy
rule CreateUpdateUnboundOperation
    transform s : ESM!RelationFeature
    to t : JUDOPSM!UnboundOperation {
        guard: not s.eContainer.mapping.isDefined() and s.target.isKindOf(ESM!TransferObjectType) and s.target.mapping.isDefined() and s.isUpdateAllowed() and s.memberType == ESM!MemberType#DERIVED

        t.name = "_update" + s.name.firstToUpperCase();
        t.behaviour = new JUDOPSM!TransferOperationBehaviour;
        t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#UPDATE;
        t.behaviour.owner = s.getPSMTransferObjectRelationEquivalent();
        

        t.input = new JUDOPSM!Parameter;
        t.input.name = "input";
        t.input.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.input.cardinality = new JUDOPSM!Cardinality;
        t.input.cardinality.lower = 1;
        t.input.cardinality.upper = 1;

        t.output = new JUDOPSM!Parameter;
        t.output.name = "output";
        t.output.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.output.cardinality = new JUDOPSM!Cardinality;
        t.output.cardinality.lower = 1;
        t.output.cardinality.upper = 1;

        for (relation in s.target.getAllRelations().select(r | r.target.mapping.isDefined() and not r.isReadOnly() and (r.isKindOf(ESM!TwoWayRelationMember) implies r.partner <> s))) {

			if (esmUtils.isSetOnRelation(s, relation)) {
                s.createSetUnboundOperation(relation);
			}
			if (esmUtils.isUnsetOnRelation(s, relation)) {
                s.createUnsetUnboundOperation(relation);
			}
			if (esmUtils.isAddOnRelation(s, relation)) {
                s.createAddAllUnboundOperation(relation);
			}
			if (esmUtils.isRemoveOnRelation(s, relation)) {
                s.createRemoveAllUnboundOperation(relation);
			}

            if (esmUtils.isRangeAllowedOnRelation(relation) and relation.rangeExpression.isDefined() and relation.rangeExpression.trim().length() > 0) {
                s.createGetRangeTransferOperationForRelation(relation, t.input, "update");
            }
        }

        s.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(t);
}

@greedy
rule CreateDeleteOperationForRelation
    transform s : ESM!RelationFeature
    to t : JUDOPSM!BoundOperation {
        guard: s.eContainer.isKindOf(ESM!TransferObjectType) and s.eContainer.mapping.isDefined() and s.target.isKindOf(ESM!TransferObjectType) and s.target.mapping.isDefined() and s.isDeleteAllowed() and s.memberType <> ESM!MemberType#TRANSIENT

        t.name = "_delete" + s.name.firstToUpperCase() + "For" + esmUtils.getNamespaceElementFQName(s.eContainer).replace("::", "_").firstToUpperCase();
        t.instanceRepresentation = s.eContainer.getPSMTransferObjectTypeEquivalent();

        t.input = new JUDOPSM!Parameter;
        t.input.name = "input";
        t.input.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.input.cardinality = new JUDOPSM!Cardinality;
        t.input.cardinality.lower = 1;
        t.input.cardinality.upper = 1;

        s.eContainer.mapping.target.equivalent("CreateEntityType").operations.add(t);
}

@greedy
rule CreateDeleteTransferOperationForRelation
    transform s : ESM!RelationFeature
    to t : JUDOPSM!BoundTransferOperation {
        guard: s.eContainer.isKindOf(ESM!TransferObjectType) and s.eContainer.mapping.isDefined() and s.target.isKindOf(ESM!TransferObjectType) and s.target.mapping.isDefined() and s.isDeleteAllowed() and s.memberType <> ESM!MemberType#TRANSIENT

        t.name = "_delete" + s.name.firstToUpperCase();
        t.behaviour = new JUDOPSM!TransferOperationBehaviour;
        t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#DELETE_RELATION;
        t.behaviour.owner = s.getPSMTransferObjectRelationEquivalent();

        t.input = new JUDOPSM!Parameter;
        t.input.name = "input";
        t.input.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.input.cardinality = new JUDOPSM!Cardinality;
        t.input.cardinality.lower = 1;
        t.input.cardinality.upper = 1;

        t.binding = s.equivalent("CreateDeleteOperationForRelation");

        s.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(t);
}

@greedy
rule CreateDeleteUnboundOperation
    transform s : ESM!RelationFeature
    to t : JUDOPSM!UnboundOperation {
        guard: not s.eContainer.mapping.isDefined() and s.target.isKindOf(ESM!TransferObjectType) and s.target.mapping.isDefined() and s.isDeleteAllowed() and s.memberType == ESM!MemberType#DERIVED

        t.name = "_delete" + s.name.firstToUpperCase();
        t.behaviour = new JUDOPSM!TransferOperationBehaviour;
        t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#DELETE;
        t.behaviour.owner = s.getPSMTransferObjectRelationEquivalent();

        t.input = new JUDOPSM!Parameter;
        t.input.name = "input";
        t.input.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.input.cardinality = new JUDOPSM!Cardinality;
        t.input.cardinality.lower = 1;
        t.input.cardinality.upper = 1;

        s.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(t);
}

@greedy
rule CreateGetPrincipalOperationForAccessPoint
    transform s : ESM!TransferObjectType
    to t : JUDOPSM!UnboundOperation {
        guard: s.isAccessPoint()

        t.name = "_principal";
        t.behaviour = new JUDOPSM!TransferOperationBehaviour;
        t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#GET_PRINCIPAL;
        t.behaviour.owner = s.getPSMTransferObjectTypeEquivalent();

        s.getPSMTransferObjectTypeEquivalent().operations.add(t);
}

@greedy
rule CreateGetPrincipalOperationOutputParameterForAccessPoint
    transform s : ESM!TransferObjectType
    to t : JUDOPSM!Parameter {
        guard: s.isAccessPoint()

        t.name = "output";
        t.type = s.getPSMTransferObjectTypeEquivalent();
        t.cardinality = new JUDOPSM!Cardinality;
        t.cardinality.lower = 0;
        t.cardinality.upper = 1;

        s.equivalent("CreateGetPrincipalOperationForAccessPoint").output = t;
}

@greedy
rule CreateMapPrincipalOperationForActoryType
    transform s : ESM!ActorType
    to t : JUDOPSM!UnboundOperation {
        t.name = "_map_principal";
        t.behaviour = new JUDOPSM!TransferOperationBehaviour;
        t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#MAP_PRINCIPAL;
        t.behaviour.owner = s.getPSMEquivalent();
        
        s.getPSMEquivalent().operations.add(t);
}

@greedy
rule CreateMapPrincipalOperationInputParameterForActorType
    transform s : ESM!ActorType
    to t : JUDOPSM!Parameter {
        guard: s.realm.isDefined() and s.realm.trim() <> ''

        t.name = "input";
        t.type = s.getPSMEquivalent();
        t.cardinality = new JUDOPSM!Cardinality;
        t.cardinality.lower = 0;
        t.cardinality.upper = 1;

        s.equivalent("CreateMapPrincipalOperationForActoryType").input = t;
}

@greedy
rule CreateMapPrincipalOperationOutputParameterForActorType
    transform s : ESM!ActorType
    to t : JUDOPSM!Parameter {
        guard: s.eContainer.isDefined()

        t.name = "output";
        t.type = s.eContainer.getPSMTransferObjectTypeEquivalent();
        t.cardinality = new JUDOPSM!Cardinality;
        t.cardinality.lower = 0;
        t.cardinality.upper = 1;

        s.equivalent("CreateMapPrincipalOperationForActoryType").output = t;
}
