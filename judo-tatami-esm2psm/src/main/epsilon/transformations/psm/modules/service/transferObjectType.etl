import "../namespace.etl";
import "../../../../operations/esm/type/_importType.eol";
import "../../../../operations/esm/service/transferObjectType.eol";

@lazy
@greedy
rule CreateCardinalityOfTransferObjectRelation
	transform s: ESM!TransferRelation
	to t: JUDOPSM!Cardinality {
	  t.`upper` = s.`upper`;
  	  t.`lower` = s.`lower`;
}

@lazy
@greedy
rule CreateCardinalityOfParameter
	transform s: ESM!Parameter
	to t: JUDOPSM!Cardinality {
	  t.`upper` = s.`upper`;
  	  t.`lower` = s.`lower`;
}


@abstract
rule CreateTransferObjectType
	transform s: ESM!TransferObjectType
	to t: JUDOPSM!TransferObjectType 
	extends CreateNamespaceElement {
	  t.`representation` = s.`representation`.equivalent("CreateTransferAttribute");
	  //TODO: check
	    //log.debug("sepr: " + s.`representation`);
	    //log.debug("tepr: " + t.`representation`);
	  
	  log.debug("MIXIN: " + s.mixins);
	  if (t.isTypeOf(JUDOPSM!MappedTransferObjectType)) {
	  	log.debug("mappedTOT: " + t.name);
	  } else if(t.isTypeOf(JUDOPSM!UnmappedTransferObjectType)) {
	  	log.debug("unmappedTOT: " + t.name);
	  }
	  
	  for ( attribute in s.attributes ) {
	  	t.attributes.add(attribute.equivalent("CreateTransferAttribute"));
	  }
	  
	  for ( relation in s.relations ) {
	  	t.relations.add(relation.equivalent("CreateTransferObjectRelation"));
	  }
	  //+ESM:
	  //mixins
}
//---
@lazy
rule CreateUnmappedTransferObjectType
	transform s: ESM!TransferObjectType //TODO check s type 
	to t: JUDOPSM!UnmappedTransferObjectType
	extends CreateTransferObjectType {
	  log.debug("Created UnmappedTransferObjectType.");
}

@lazy
rule CreateMappedTransferObjectType
	transform s: ESM!TransferObjectType //TODO check s type 
	to t: JUDOPSM!MappedTransferObjectType
	extends CreateTransferObjectType {
	  //TODO: later: fix entityReferencePresence //= s.`entityReferencePresence`.getPSMEquivalent();
	  t.`entityReferencePresence` = JUDOPSM!EntityReferenceType#OPTIONAL; 
	  t.`entityType` = s.`entityType`.equivalent("CreateEntityType");
	  for (oper in s.`operations`) {
	    t.`operations`.add(oper.equivalent("CreateBoundOperation"));
	  }
	  
	  log.debug("Created MappedTransferObjectType.");
}
//-----------

rule CreateTransferAttribute
	transform s: ESM!TransferAttribute
	to t: JUDOPSM!TransferAttribute 
	extends CreateNamedElement {
	  if (s.`required`.isDefined()) {
	    t.`required` = s.`required`;
	  } else {
	    t.`required` = false;
	  }
	  t.`dataType` = s.`dataType`.getPSMEquivalent();
	  t.`defaultValue` = s.`defaultValue`.equivalent("CreatePrimitiveTypedElement");	  
	  t.`binding` = s.`primitiveTypedElement`.equivalent("CreateAttribute");
	  var esmTOT : ESM!TransferObjectType = ESM!TransferObjectType.all.selectOne(tot | tot.attributes.includes(s));
	  //log.debug("look at me mommy no handle bars: " + esmTOT);
	  if (esmTOT.`operations`.isEmpty()) {
	  	//log.debug("esmTOT.operations: EMPTY!");
	  	esmTOT.equivalent("CreateMappedTransferObjectType");
	  } else {
	    //log.debug("esmTOT.operations: very much not empty!");
	    esmTOT.equivalent("CreateUnmappedTransferObjectType");
	  }
	  log.debug("Created TransferAttribute: " + t.name);
}

rule CreateTransferObjectRelation
	transform s: ESM!TransferRelation
	to t: JUDOPSM!TransferObjectRelation
	extends CreateNamedElement {
	  t.`cardinality` = s.equivalent("CreateCardinalityOfTransferObjectRelation");
	  if (s.`referenceTypedElement`.isKindOf(ESM!OneWayEndpoint)) {
	    t.`binding` = s.`referenceTypedElement`.equivalent("CreateContainment");
	  } else if (s.`referenceTypedElement`.isKindOf(ESM!TwoWayEndpoint)) {
	    t.`binding` = s.`referenceTypedElement`.equivalent("CreateEndpoint");
	  }
	  t.`defaultValue` = s.`defaultValue`.equivalent("CreateReferencedTypedElement");
	  t.`range` = s.`range`.equivalent("CreateReferencedTypedElement");
	  t.`embedded` = s.`embedded`;
	  var esmTOT : ESM!TransferObjectType = ESM!TransferObjectType.all.selectOne(tot | tot.relations.includes(s));
	  log.debug("look at me mommy no handle bars: " + esmTOT);
	  if (esmTOT.`operations`.isEmpty()) {
	  	log.debug("esmTOT.operations: EMPTY!");
	  	esmTOT.equivalent("CreateMappedTransferObjectType");
	  } else {
	    log.debug("esmTOT.operations: very much not empty!");
	    esmTOT.equivalent("CreateUnmappedTransferObjectType");
	  }
	  
	  //if (s.`target`.`entityType`.isUndefined()) {t.`target` = s.`target`.equivalent("CreateUnmappedTransferObjectType");} else {t.`target` = s.`target`.equivalent("CreateMappedTransferObjectType");}
	  
}


@abstract
rule CreateOperation
	transform s: ESM!Operation
	to t: JUDOPSM!Operation 
	extends CreateNamedElement {
	  for(fault in s.`faults`) {
	    t.`faults`.add(s.`faults`.equivalent("CreateParameter"));
	  }
	  
	  t.`body` = s.`body`; //hi im a Script
	  t.`output` = s.`output`.equivalent("CreateParameter");
	  t.`input` = s.`input`.equivalent("CreateParameter");
	  t.`stateful` = true; //TODO: check
	  if (s.`undefined`.isDefined()) {
	    t.`undefined` = s.`undefined`;
	  } else {
	  	t.`undefined` = false;
	  }
}

@lazy
rule CreateBoundOperation
	transform s: ESM!BoundOperation
	to t: JUDOPSM!BoundOperation
	extends CreateOperation {
		
}

@lazy
rule CreateUnboundOperation
	transform s: ESM!UnboundOperation
	to t: JUDOPSM!UnboundOperation
	extends CreateOperation {
	  
}

@lazy
rule CreateParameter
	transform s : ESM!Parameter
	to t : JUDOPSM!Parameter
	extends CreateNamedElement {
	  t.`cardinality` = s.equivalent("CreateCardinalityOfParameter");
	  t.`type` = s.`type`.equivalent("CreateTransferObjectType"); //TODO: that wont be enough uknow
}