import "../namespace.etl";
import "../../../../operations/esm/type/_importType.eol";
import "../../../../operations/esm/service/transferObjectType.eol";

@lazy
@greedy
rule CreateCardinalityOfTransferObjectRelation
	transform s: ESM!TransferRelation
	to t: JUDOPSM!Cardinality {
	  t.upper = s.upper;
  	  t.lower = s.lower;
}

@lazy
@greedy
rule CreateCardinalityOfParameter
	transform s: ESM!Parameter
	to t: JUDOPSM!Cardinality {
	  t.upper = s.upper;
  	  t.lower = s.lower;
}

//[MixinStuff] (indirectly)
@abstract
rule CreateTransferObjectType
	transform s: ESM!TransferObjectType
	to t: JUDOPSM!TransferObjectType 
	extends CreateNamespaceElement {
	  t.representation = s.representation.equivalent("CreateTransferAttribute");
	  /*if ((not s.mixins.isEmpty()) ) {
	  	var parents : OrderedSet = s.resolveMixins(s);
	  	log.debug("parents of " + s.name + ": " + parents);
	  	for (parent in parents) {
	  		t.relations.addAll(parent.getEquivalentRelations(s));
	  		t.attributes.addAll(parent.getEquivalentAttributes(s));
	  		if(s.isMapped()) {
	  			t.operations.addAll(parent.getEquivalentOperations(s));
	  		}	  		
	  	}
	  }*/
	if( (s.mixins.isEmpty()) and (ESM!TransferObjectType.all.exists(tot | tot.mixins.includes(s)))) { 
		s.reverse_resolveMixins(s);
		/*var children : OrderedSet = 
		log.debug("finall children: " + children);
		for (child in children) {
	  		child.equivalent("CreateTransferObjectType").relations.addAll(s.getEqRels());
	  		/*t.attributes.addAll(child.getEquivalentAttributes(s));
	  		if(s.isMapped()) {
	  			t.operations.addAll(child.getEquivalentOperations(s));
	  		}
				  		
			
	  	}*/
	}  
	
}

//[MixinStuff]
rule CreateUnmappedTransferObjectType
	transform s: ESM!TransferObjectType 
	to t: JUDOPSM!UnmappedTransferObjectType
	extends CreateTransferObjectType {
	  guard: not s.isMapped()
	  log.debug("Created UnmappedTransferObjectType.");
}

rule CreateMappedTransferObjectType
	transform s: ESM!TransferObjectType
	to t: JUDOPSM!MappedTransferObjectType
	extends CreateTransferObjectType {
	  guard: s.isMapped()
	  t.entityReferencePresence = JUDOPSM!EntityReferenceType#OPTIONAL; //TODO: [postponed]: fix entityReferencePresence //= s.entityReferencePresence.getPSMEquivalent();
	  t.entityType = s.entityType.equivalent("CreateEntityType");
	  log.debug("Created MappedTransferObjectType.");
}

rule CreateTransferAttribute
	transform s: ESM!TransferAttribute
	to t: JUDOPSM!TransferAttribute 
	extends CreateNamedElement {
	  t.required = s.required;
	  t.dataType = s.dataType.getPSMEquivalent();
	  /* TODO: @endcheck: remove
	  if ( s.primitiveTypedElement.isTypeOf(ESM!DataProperty) ) {
	  	t.binding = s.primitiveTypedElement.equivalent("CreateDataProperty");
	  }	else {
	  	t.binding = s.primitiveTypedElement.equivalent("CreateAttribute");
	  }*/
	  var esmTOT : ESM!TransferObjectType = ESM!TransferObjectType.all.selectOne(tot | tot.attributes.includes(s));	  
	  esmTOT.getPSMEquivalent().attributes.add(t);
	  
	  log.debug("Created TransferAttribute: " + t.name);
}

rule CreateTransferObjectRelation
	transform s: ESM!TransferRelation
	to t: JUDOPSM!TransferObjectRelation
	extends CreateNamedElement {	  
	  t.cardinality = s.equivalent("CreateCardinalityOfTransferObjectRelation");
	  t.embedded = s.embedded;
	  
	  var esmTOT : ESM!TransferObjectType = ESM!TransferObjectType.all.selectOne(tot | tot.relations.includes(s));
	  esmTOT.getPSMEquivalent().relations.add(t);
	  
	  t.target = s.target.getPSMEquivalent();
	  
	  log.debug("Created TransferObjectRelation: " + t.name);
}

@abstract
rule CreateOperation
	transform s: ESM!Operation
	to t: JUDOPSM!Operation {
	  t.body = s.body;
	  t.output = s.output.equivalent("CreateParameter");
	  t.input = s.input.equivalent("CreateParameter");
	  t.stateful = s.name.startsWith("insert"); // FIXME
	  t.undefined = s.undefined; 
}

rule CreateBoundOperation
	transform s: ESM!BoundOperation
	to t: JUDOPSM!BoundOperation
	extends CreateOperation, CreateNamedElement {
	  var esmTOT : ESM!TransferObjectType = ESM!TransferObjectType.all.selectOne(tot | tot.operations.includes(s));
	  esmTOT.getPSMEquivalent().operations.add(t);
	  log.debug("Created BoundOperation: " + t.name);
}

rule CreateUnboundOperation
	transform s: ESM!UnboundOperation
	to t: JUDOPSM!UnboundOperation
	extends CreateOperation, CreateNamespaceElement {
	  ESM!ExposedService.all.selectOne(es | es.`operation` == s).equivalent("CreateExposedService").`operation` = t;
	  log.debug("Created UnboundOperation: " + s.name);
}

rule CreateParameter
	transform s : ESM!Parameter
	to t : JUDOPSM!Parameter
	extends CreateNamedElement {
	  	//TODO: dont even get yourself started
		var esmOP : ESM!Operation;
		if(s.isInput()) {
			//log.debug("isInput");
			esmOP = ESM!Operation.all.selectOne(op | op.input = s);
			if (esmOP.isTypeOf(ESM!BoundOperation)) {
				//log.debug("input bound");
				esmOP.equivalent("CreateBoundOperation").input = t;
			} else {
				//log.debug("input unbound");
				esmOP.equivalent("CreateUnboundOperation").input = t;
			}
		} else if (s.isOutput()) {
			//log.debug("isOutput");
			esmOP = ESM!Operation.all.selectOne(op | op.output = s);
			if (esmOP.isTypeOf(ESM!BoundOperation)) {
				//log.debug("output bound");
				esmOP.equivalent("CreateBoundOperation").output = t;
			} else {
				//log.debug("output unbound");
				esmOP.equivalent("CreateUnboundOperation").output = t;
			}
		}
		
		if(s.isFault()) {
			//log.debug("isFault");
			esmOP = ESM!Operation.all.selectOne(op | op.faults.includes(s));
			if (esmOP.isTypeOf(ESM!BoundOperation)) {
				//log.debug("fault bound");
				esmOP.equivalent("CreateBoundOperation").faults.add(t);
			} else {
				//log.debug("fault unbound");
				esmOP.equivalent("CreateUnboundOperation").faults.add(t);
			}
		}
	  
	  t.cardinality = s.equivalent("CreateCardinalityOfParameter");
	  t.type = s.type.getPSMEquivalent();
	  log.debug("Created Parameter: " + t.name);
}


