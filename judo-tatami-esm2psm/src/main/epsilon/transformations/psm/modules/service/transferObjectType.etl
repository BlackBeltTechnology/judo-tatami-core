import "operation.etl";
import "../namespace/namespace.etl";
import "../data/primitiveTypedElement.etl";
import "../data/referenceTypedElement.etl";
import "../derived/expressionType.etl";
import "../../../../operations/_importAll.eol";

@abstract
rule CreateTransferObjectType
	transform s: ESM!TransferObjectType
	to t: JUDOPSM!TransferObjectType 
	extends CreateNamespaceElement {
}

rule CreateMappedTransferObjectType
	transform s: ESM!TransferObjectType
	to t: JUDOPSM!MappedTransferObjectType
	extends CreateTransferObjectType {
	  guard: s.isKindOf(ESM!TransferObjectType)  and not s.isKindOf(ESM!EntityType) and s.mapping.isDefined()
	  
	  t.entityType = s.mapping.target.equivalent("CreateEntityType");
	  t.filter = s.mapping.equivalent("CreateFilterExpressionForMappedTransferObjectType");
      
	  log.debug("Created Mapped TransferObject Type: " + t.name);
}

@lazy
rule CreateFilterExpressionForMappedTransferObjectType
    transform s : ESM!Mapping
    to t : JUDOPSM!LogicalExpressionType {
     guard: s.filter.isDefined()
            and s.filter.trim().length() > 0
         t.expression = s.filter;
}

rule CreateUnmappedTransferObjectType
	transform s: ESM!TransferObjectType 
	to t: JUDOPSM!UnmappedTransferObjectType
	extends CreateTransferObjectType {
	  guard: s.isKindOf(ESM!TransferObjectType)  and not s.isKindOf(ESM!EntityType) and not s.mapping.isDefined()
	  log.debug("Created UnmappedTransferObjectType: " + t.name);
}

rule CreateDefaultMappedTransferObjectTypeForEntity
	transform s: ESM!EntityType
	to t: JUDOPSM!MappedTransferObjectType {
	  t.name = s.name;

      s.eContainer.getPSMGeneratedDefaultTransferObjectNamespaceEquivalent().elements.add(t);

	  t.entityType = s.equivalent("CreateEntityType");
	  log.debug("Created Default MappedTransferObjectType for EntityType: " + t.name);
}

@greedy
rule CreateQueryCustomizerType
	transform s: ESM!TransferObjectType
	to t: JUDOPSM!UnmappedTransferObjectType {
	  guard: s.mapping.isDefined()

	  t.name = "_QueryCustomizer" + s.name;

      var orderByTarget = s.equivalent("CreateQueryOrderingType");
      // do not add _orderBy relation if there is no attribute used by order by clause
      if (orderByTarget.isDefined()) {
          var orderBy = new JUDOPSM!TransferObjectRelation;
          orderBy.name = "_orderBy";
          orderBy.target = orderByTarget;
          orderBy.embedded = true;
          orderBy.cardinality = new JUDOPSM!Cardinality;
          orderBy.cardinality.lower = 0;
          orderBy.cardinality.upper = -1;

          t.relations.add(orderBy);
      }

      var seekTarget = s.equivalent("CreateQuerySeekingType");
      var seek = new JUDOPSM!TransferObjectRelation;
      seek.name = "_seek";
      seek.target = seekTarget;
      seek.embedded = true;
      seek.cardinality = new JUDOPSM!Cardinality;
      seek.cardinality.lower = 0;
      seek.cardinality.upper = 1;
      t.relations.add(seek);

	  s.eContainer.getPSMExtensionNamespaceEquivalent().elements.add(t);
	  log.debug("Query customizer type created: " + t.name);
}

@greedy
rule CreateQueryOrderingEnumeration
	transform s: ESM!TransferObjectType
	to t: JUDOPSM!EnumerationType {
	  guard: s.mapping.isDefined() and s.attributes.exists(a | a.memberType <> ESM!MemberType#TRANSIENT and (a.memberType == ESM!MemberType#MAPPED implies (a.binding.isDefined() and a.binding.memberType <> ESM!MemberType#TRANSIENT)) and (a.dataType.isKindOf(ESM!StringType) or a.dataType.isKindOf(ESM!NumericType) or a.dataType.isKindOf(ESM!DateType) or a.dataType.isKindOf(ESM!TimestampType)))

	  t.name = "_OrderingAttribute" + s.name;

	  s.eContainer.getPSMExtensionNamespaceEquivalent().elements.add(t);
	  log.debug("Query ordering enumeration created: " + t.name);
}

@greedy
rule CreateQueryOrderingEnumerationMember
    transform s : ESM!DataMember
    to t : JUDOPSM!EnumerationMember {
      guard: s.eContainer.isKindOf(ESM!TransferObjectType) and s.eContainer.mapping.isDefined() and
        s.memberType <> ESM!MemberType#TRANSIENT and (s.memberType == ESM!MemberType#MAPPED implies (s.binding.isDefined() and s.binding.memberType <> ESM!MemberType#TRANSIENT)) and
        (s.dataType.isKindOf(ESM!StringType) or s.dataType.isKindOf(ESM!NumericType) or s.dataType.isKindOf(ESM!DateType) or s.dataType.isKindOf(ESM!TimestampType))

      t.name = s.name;
      t.ordinal = -1; // will be calculated by post operation

      s.eContainer.equivalent("CreateQueryOrderingEnumeration").members.add(t);
      log.debug("Query ordering enumeration member created: " + t.name);
}

@greedy
@lazy
rule CreateQueryOrderingType
	transform s: ESM!TransferObjectType
	to t: JUDOPSM!UnmappedTransferObjectType {
	  guard: s.mapping.isDefined() and s.attributes.exists(a | a.memberType <> ESM!MemberType#TRANSIENT and (a.memberType == ESM!MemberType#MAPPED implies (a.binding.isDefined() and a.binding.memberType <> ESM!MemberType#TRANSIENT)) and (a.dataType.isKindOf(ESM!StringType) or a.dataType.isKindOf(ESM!NumericType) or a.dataType.isKindOf(ESM!DateType) or a.dataType.isKindOf(ESM!TimestampType)))

	  t.name = "_OrderingType" + s.name;

	  var attribute = new JUDOPSM!TransferAttribute;
	  attribute.name = "attribute";
	  attribute.required = true;
	  attribute.dataType = s.equivalent("CreateQueryOrderingEnumeration");
	  t.attributes.add(attribute);

      var m : ESM!Model = ESM!Model.all.first();
	  var descending = new JUDOPSM!TransferAttribute;
      descending.name = "descending";
      descending.required = false;
      descending.dataType = m.equivalent("CreateAutoGeneratedBooleanType");
      t.attributes.add(descending);

	  s.eContainer.getPSMExtensionNamespaceEquivalent().elements.add(t);
	  log.debug("Query ordering type created: " + t.name);
}

@greedy
rule CreateQueryCustomizerAttribute
    transform s : ESM!DataMember
    to t : JUDOPSM!TransferObjectRelation {
      guard: s.eContainer.isKindOf(ESM!TransferObjectType) and s.eContainer.mapping.isDefined() and
        s.memberType <> ESM!MemberType#TRANSIENT and (s.memberType == ESM!MemberType#MAPPED implies (s.binding.isDefined() and s.binding.memberType <> ESM!MemberType#TRANSIENT)) and
        (s.dataType.isKindOf(ESM!StringType) or s.dataType.isKindOf(ESM!NumericType) or s.dataType.isKindOf(ESM!BooleanType) or s.dataType.isKindOf(ESM!DateType) or s.dataType.isKindOf(ESM!TimestampType) or s.dataType.isKindOf(ESM!EnumerationType))

      t.name = s.name;
      t.target = s.dataType.equivalent("CreateQueryFilterType");
      t.embedded = true;
      t.cardinality = new JUDOPSM!Cardinality;
      t.cardinality.lower = 0;
      t.cardinality.upper = -1;

      s.eContainer.equivalent("CreateQueryCustomizerType").relations.add(t);
      log.debug("Query customizer attribute created: " + t.name);
}

@lazy
rule CreateStringOperationEnumeration
  transform s : ESM!Model
  to t: JUDOPSM!EnumerationType {
    t.name = "_StringOperation";

    var lessThan = new JUDOPSM!EnumerationMember;
    lessThan.ordinal = 0;
    lessThan.name = "lessThan";
    t.members.add(lessThan);

    var greaterThan = new JUDOPSM!EnumerationMember;
    greaterThan.ordinal = 1;
    greaterThan.name = "greaterThan";
    t.members.add(greaterThan);

    var lessOrEqual = new JUDOPSM!EnumerationMember;
    lessOrEqual.ordinal = 2;
    lessOrEqual.name = "lessOrEqual";
    t.members.add(lessOrEqual);

    var greaterOrEqual = new JUDOPSM!EnumerationMember;
    greaterOrEqual.ordinal = 3;
    greaterOrEqual.name = "greaterOrEqual";
    t.members.add(greaterOrEqual);

    var equal = new JUDOPSM!EnumerationMember;
    equal.ordinal = 4;
    equal.name = "equal";
    t.members.add(equal);

    var notEqual = new JUDOPSM!EnumerationMember;
    notEqual.ordinal = 5;
    notEqual.name = "notEqual";
    t.members.add(notEqual);

    var matches = new JUDOPSM!EnumerationMember;
    matches.ordinal = 6;
    matches.name = "matches";
    t.members.add(matches);

    s.getPSMExtensionNamespaceEquivalent().elements.add(t);
    log.debug("Created enumeration of String operations: " + t.name);
}

@lazy
rule CreateNumericOperationEnumeration
  transform s : ESM!Model
  to t: JUDOPSM!EnumerationType {
    t.name = "_NumericOperation";

    var lessThan = new JUDOPSM!EnumerationMember;
    lessThan.ordinal = 0;
    lessThan.name = "lessThan";
    t.members.add(lessThan);

    var greaterThan = new JUDOPSM!EnumerationMember;
    greaterThan.ordinal = 1;
    greaterThan.name = "greaterThan";
    t.members.add(greaterThan);

    var lessOrEqual = new JUDOPSM!EnumerationMember;
    lessOrEqual.ordinal = 2;
    lessOrEqual.name = "lessOrEqual";
    t.members.add(lessOrEqual);

    var greaterOrEqual = new JUDOPSM!EnumerationMember;
    greaterOrEqual.ordinal = 3;
    greaterOrEqual.name = "greaterOrEqual";
    t.members.add(greaterOrEqual);

    var equal = new JUDOPSM!EnumerationMember;
    equal.ordinal = 4;
    equal.name = "equal";
    t.members.add(equal);

    var notEqual = new JUDOPSM!EnumerationMember;
    notEqual.ordinal = 5;
    notEqual.name = "notEqual";
    t.members.add(notEqual);

    s.getPSMExtensionNamespaceEquivalent().elements.add(t);
    log.debug("Created enumeration of Numeric operations: " + t.name);
}

@lazy
rule CreateBooleanOperationEnumeration
  transform s : ESM!Model
  to t: JUDOPSM!EnumerationType {
    t.name = "_BooleanOperation";

    var equals = new JUDOPSM!EnumerationMember;
    equals.ordinal = 0;
    equals.name = "equals";
    t.members.add(equals);

    s.getPSMExtensionNamespaceEquivalent().elements.add(t);
    log.debug("Created enumeration of Boolean operations: " + t.name);
}

@lazy
rule CreateEnumerationOperationEnumeration
  transform s : ESM!Model
  to t: JUDOPSM!EnumerationType {
    t.name = "_EnumerationOperation";

    var equals = new JUDOPSM!EnumerationMember;
    equals.ordinal = 0;
    equals.name = "equals";
    t.members.add(equals);

    var notEquals = new JUDOPSM!EnumerationMember;
    notEquals.ordinal = 1;
    notEquals.name = "notEquals";
    t.members.add(notEquals);

    s.getPSMExtensionNamespaceEquivalent().elements.add(t);
    log.debug("Created enumeration of Enumeration operations: " + t.name);
}

@lazy
@greedy
rule CreateQueryFilterType
  transform s : ESM!Primitive
  to t: JUDOPSM!UnmappedTransferObjectType {
    t.name = "_FilterBy" + s.name;

    var m : ESM!Model = ESM!Model.all.first();

    if (s.isKindOf(ESM!StringType)) {
        var operator = new JUDOPSM!TransferAttribute;
        operator.name = "operator";
        operator.required = true;
        operator.dataType = m.equivalent("CreateStringOperationEnumeration");
        t.attributes.add(operator);
    } else if (s.isKindOf(ESM!NumericType)) {
        var operator = new JUDOPSM!TransferAttribute;
        operator.name = "operator";
        operator.required = true;
        operator.dataType = m.equivalent("CreateNumericOperationEnumeration");
        t.attributes.add(operator);
    } else if (s.isKindOf(ESM!BooleanType)) {
        var operator = new JUDOPSM!TransferAttribute;
        operator.name = "operator";
        operator.required = true;
        operator.dataType = m.equivalent("CreateBooleanOperationEnumeration");
        t.attributes.add(operator);
    } else if (s.isKindOf(ESM!DateType)) {
        var operator = new JUDOPSM!TransferAttribute;
        operator.name = "operator";
        operator.required = true;
        operator.dataType = m.equivalent("CreateNumericOperationEnumeration");
        t.attributes.add(operator);
    } else if (s.isKindOf(ESM!TimestampType)) {
        var operator = new JUDOPSM!TransferAttribute;
        operator.name = "operator";
        operator.required = true;
        operator.dataType = m.equivalent("CreateNumericOperationEnumeration");
        t.attributes.add(operator);
    } else if (s.isKindOf(ESM!EnumerationType)) {
        var operator = new JUDOPSM!TransferAttribute;
        operator.name = "operator";
        operator.required = true;
        operator.dataType = m.equivalent("CreateEnumerationOperationEnumeration");
        t.attributes.add(operator);
    } else {
        throw "No primitive operation supported for: " + s.name;
    }

    var value = new JUDOPSM!TransferAttribute;
    value.name = "value";
    value.required = true;
    value.dataType = s.getPSMEquivalent();
    t.attributes.add(value);

    m.getPSMExtensionNamespaceEquivalent().elements.add(t);
    log.debug("Created String query filter type: " + t.name);
}

@greedy
@lazy
rule CreateQuerySeekingType
	transform s: ESM!TransferObjectType
	to t: JUDOPSM!UnmappedTransferObjectType {
	  t.name = "_Seek" + s.name;

	  var m : ESM!Model = ESM!Model.all.first();

	  var limit = new JUDOPSM!TransferAttribute;
	  limit.name = "limit";
	  limit.required = true;
      limit.dataType = m.equivalent("CreateAutoGeneratedIntegerType");
	  t.attributes.add(limit);

	  var reverse = new JUDOPSM!TransferAttribute;
      reverse.name = "reverse";
      reverse.required = false;
      reverse.dataType = m.equivalent("CreateAutoGeneratedBooleanType");
      t.attributes.add(reverse);

      var lastItemTarget = s.getPSMTransferObjectTypeEquivalent();
      var lastItem = new JUDOPSM!TransferObjectRelation;
      lastItem.name = "lastItem";
      lastItem.target = lastItemTarget;
      lastItem.embedded = true;
      lastItem.cardinality = new JUDOPSM!Cardinality;
      lastItem.cardinality.lower = 0;
      lastItem.cardinality.upper = 1;
      t.relations.add(lastItem);

      s.eContainer.getPSMExtensionNamespaceEquivalent().elements.add(t);
	  log.debug("Query seeking type created: " + t.name);
}
