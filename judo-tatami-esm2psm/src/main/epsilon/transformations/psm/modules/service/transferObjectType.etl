import "../namespace/namespace.etl";
import "../../../../operations/esm/type/_importType.eol";
import "../../../../operations/esm/service/transferObjectType.eol";

@lazy
@greedy
rule CreateCardinalityOfTransferObjectRelation
	transform s: ESM!TransferRelation
	to t: JUDOPSM!Cardinality {
	  t.upper = s.upper;
  	  t.lower = s.lower;
}

@lazy
@greedy
rule CreateCardinalityOfParameter
	transform s: ESM!Parameter
	to t: JUDOPSM!Cardinality {
	  t.upper = s.upper;
  	  t.lower = s.lower;
}

@abstract
rule CreateTransferObjectType
	transform s: ESM!TransferObjectType
	to t: JUDOPSM!TransferObjectType 
	extends CreateNamespaceElement {
	  t.representation = s.representation.equivalent("CreateTransferAttribute");
}

rule CreateUnmappedTransferObjectType
	transform s: ESM!TransferObjectType 
	to t: JUDOPSM!UnmappedTransferObjectType
	extends CreateTransferObjectType {
	  guard: not s.isMapped()
	  log.debug("Created UnmappedTransferObjectType.");
}

rule CreateMappedTransferObjectType
	transform s: ESM!TransferObjectType
	to t: JUDOPSM!MappedTransferObjectType
	extends CreateTransferObjectType {
	  guard: s.isMapped()
	  //[postponed]: fix entityReferencePresence //= s.entityReferencePresence.getPSMEquivalent();
	  t.entityReferencePresence = JUDOPSM!EntityReferenceType#OPTIONAL;
	  t.entityType = s.entityType.equivalent("CreateEntityType");
	  log.debug("Created MappedTransferObjectType.");
}

rule CreateTransferAttribute
	transform s: ESM!TransferAttribute
	to t: JUDOPSM!TransferAttribute 
	extends CreateNamedElement {
	  t.required = s.required;
	  t.dataType = s.dataType.getPSMEquivalent();
	  ESM!TransferObjectType.all.selectOne(tot | tot.attributes.includes(s)).getPSMEquivalent().attributes.add(t);
	  s.resolveMixinsForTA();
	  log.debug("Created TransferAttribute: " + t.name);
}

rule CreateTransferObjectRelation
	transform s: ESM!TransferRelation
	to t: JUDOPSM!TransferObjectRelation
	extends CreateNamedElement {	  
	  t.cardinality = s.equivalent("CreateCardinalityOfTransferObjectRelation");
	  t.embedded = s.embedded;
	  ESM!TransferObjectType.all.selectOne(tot | tot.relations.includes(s)).getPSMEquivalent().relations.add(t);
	  t.target = s.target.getPSMEquivalent();
	  s.resolveMixinsForTOR();
	  log.debug("Created TransferObjectRelation: " + t.name);
}

//TODO: MIXIN
@abstract
rule CreateOperation
	transform s: ESM!Operation
	to t: JUDOPSM!OperationDeclaration {
	  t.output = s.output.equivalent("CreateParameter");
	  t.input = s.input.equivalent("CreateParameter");
      t.implementation = s.equivalent("CreateOperationBody");
}

@greedy
rule CreateOperationBody
	transform s: ESM!Operation
	to t: JUDOPSM!OperationBody {
	  t.body = s.body;
	  t.stateful = s.name.startsWith("insert"); //TODO: FIXME
	  t.customImplementation = s.undefined;
}

rule CreateBoundOperation
	transform s: ESM!BoundOperation
	to t: JUDOPSM!BoundOperation
	extends CreateOperation, CreateNamedElement {
	  ESM!TransferObjectType.all.selectOne(tot | tot.operations.includes(s)).equivalent("CreateMappedTransferObjectType").operations.add(t);
	  log.debug("Created BoundOperation: " + t.name);
}

rule CreateUnboundOperation
	transform s: ESM!UnboundOperation
	to t: JUDOPSM!UnboundOperation
	extends CreateOperation, CreateNamespaceElement {
	  ESM!ExposedService.all.selectOne(es | es.`operation` == s).equivalent("CreateExposedService").`operation` = t;
	  log.debug("Created UnboundOperation: " + s.name);
}

rule CreateParameter
	transform s : ESM!Parameter
	to t : JUDOPSM!Parameter
	extends CreateNamedElement {
	  t.cardinality = s.equivalent("CreateCardinalityOfParameter");
	  t.type = s.type.getPSMEquivalent();
	  if(s.isInput()) {
		s.getInputPSMEquivalent().input = t;
	  } else if (s.isOutput()) {
		s.getOutputPSMEquivalent().output = t;
	  } else if (s.isFault()) { //endcheck: if/elseif for faults
		s.getFaultPSMEquivalent().faults.add(t);
	  }
	  log.debug("Created Parameter: " + t.name);
}


