import "../namespace/namespace.etl";
import "../data/primitiveTypedElement.etl";
import "../data/referenceTypedElement.etl";
import "../../../../operations/esm/type/_importType.eol";
import "../../../../operations/esm/service/transferObjectType.eol";
import "../derived/expressionType.etl";

//------------- TransferObjectType (abstract) -------------
@abstract
rule CreateTransferObjectType
	transform s: ESM!TransferObjectType
	to t: JUDOPSM!TransferObjectType 
	extends CreateNamespaceElement {
	  guard: not s.isTypeOf(ESM!EntityType)
	  for (super in s.generalizations) {
        t.superTransferObjectTypes.add(super.target.getPSMEquivalent());
      }
}

//------------- Mapped TransferObjectType
rule CreateMappedTransferObjectType
	transform s: ESM!TransferObjectType
	to t: JUDOPSM!MappedTransferObjectType
	extends CreateTransferObjectType {
	  guard: s.isMapped()
	  t.entityType = s.mapping.target.equivalent("CreateEntityType");
	  t.filter = s.mapping.filter.equivalent("CreateLogicalExpressionType");
	  log.debug("Created MappedTransferObjectType: " + t.name);
}

//------------- Unmapped TransferObjectType
rule CreateUnmappedTransferObjectType
	transform s: ESM!TransferObjectType 
	to t: JUDOPSM!UnmappedTransferObjectType
	extends CreateTransferObjectType {
	  guard: not s.isMapped()
	  log.debug("Created UnmappedTransferObjectType: " + t.name);
}

//------------- Default (Mapped) TransferObjectType -------------
rule CreateDefaultMappedTransferObjectTypeForEntity
	transform s: ESM!EntityType
	to t: JUDOPSM!MappedTransferObjectType
	extends CreateNamespaceElement {
	  t.name = "_" + s.name + "_defaulttransferobjecttype";
	  for (super in s.generalizations) {
        t.superTransferObjectTypes.add(super.target.equivalent("CreateDefaultMappedTransferObjectTypeForEntity"));
      }
	  
	  var ecoreUtil = new Native("org.eclipse.emf.ecore.util.EcoreUtil");
	  ecoreUtil.getRootContainer(s).equivalent("CreateDefaultTransferObjectTypePackage").elements.add(t);
	  
	  t.entityType = s.equivalent("CreateEntityType");
	  log.debug("Created MappedTransferObjectType for EntityType: " + t.name);
}

//------------- TransferObjectRelation -------------
@lazy
@greedy
rule CreateCardinalityOfTransferObjectRelation
	transform s: ESM!ReferenceTypedElement
	to t: JUDOPSM!Cardinality 
	extends CreateCardinalityOfReferenceTypedElement {
}

@abstract
rule CreateTransferObjectRelationTargetingMappedTransferObjectType
	transform s: ESM!ReferenceTypedElement
	to t: JUDOPSM!TransferObjectRelation
	extends CreateNamedElement {
	  guard: s.eContainer.isKindOf(ESM!TransferObjectType) 
		  		and not s.eContainer.isTypeOf(ESM!EntityType)
		  		and s.target.isKindOf(ESM!TransferObjectType) and s.target.mapping.isDefined()
	  t.target = s.target.equivalent("CreateMappedTransferObjectType");
	  t.embedded = s.containment;
	  t.cardinality = s.equivalent("CreateCardinalityOfTransferObjectRelation");
}

@abstract
rule CreateTransferObjectRelationTargetingUnmappedTransferObjectType
	transform s: ESM!ReferenceTypedElement
	to t: JUDOPSM!TransferObjectRelation
	extends CreateNamedElement {
	  guard: s.eContainer.isKindOf(ESM!TransferObjectType) 
		  		and not s.eContainer.isTypeOf(ESM!EntityType)
		  		and s.target.isKindOf(ESM!TransferObjectType) and not s.target.mapping.isDefined()
	  t.target = s.target.equivalent("CreateUnmappedTransferObjectType");
	  t.embedded = s.containment;
	  t.cardinality = s.equivalent("CreateCardinalityOfTransferObjectRelation");
}

@abstract
rule CreateTransferObjectRelationTargetingDefaultTransferObjectType
	transform s: ESM!ReferenceTypedElement
	to t: JUDOPSM!TransferObjectRelation
	extends CreateNamedElement {
	  guard: s.eContainer.isKindOf(ESM!TransferObjectType) 
		  		and not s.eContainer.isTypeOf(ESM!EntityType)
		  		and s.target.isKindOf(ESM!EntityType)
	  t.target = s.target.equivalent("CreateDefaultMappedTransferObjectTypeForEntity");
	  t.embedded = s.containment;
	  t.cardinality = s.equivalent("CreateCardinalityOfTransferObjectRelation");
}

//------------- TransferAttribute -------------
@abstract
rule CreateTransferAttribute
    transform s: ESM!DataMember
    to t: JUDOPSM!TransferAttribute
    extends CreatePrimitiveTypedElement {
      guard: s.eContainer.isTypeOf(ESM!TransferObjectType)
      s.eContainer.getPSMEquivalent().attributes.add(t);
}

//------------- TransferAttribute For MappedTransferObjectType
//binding, default
rule CreateTransferAttributeForMappedTransferObjectTypeWithBindingWithDefault
    transform s: ESM!DataMember
    to t: JUDOPSM!TransferAttribute
    extends CreateTransferAttribute {
  	  guard: not s.eContainer.isTypeOf(ESM!EntityType)
  			and s.eContainer.isKindOf(ESM!TransferObjectType)
  			and s.eContainer.mapping.isDefined()
  			and s.property
  			and s.defaultExpression.expression.isDefined() and (s.defaultExpression.expression.trim().length() > 0)
  			
      t.defaultValue = s.equivalent("CreateDataPropertyForTransferAttributeDefault");
	  t.binding = s.equivalent("CreateDataPropertyForTransferAttributeBinding");
      log.debug("Created TransferAttribute for MappedTransferObjectType with Binding (With: Default): [" + t.name + "] into [" + t.eContainer.name + "]");
}

//binding, !default
rule CreateTransferAttributeForMappedTransferObjectTypeWithBinding
    transform s: ESM!DataMember
    to t: JUDOPSM!TransferAttribute
    extends CreateTransferAttribute {
  	  guard: s.eContainer.isKindOf(ESM!TransferObjectType)
  			and not s.eContainer.isTypeOf(ESM!EntityType)
  			and s.eContainer.mapping.isDefined()
  			and s.property
  			and (not s.defaultExpression.expression.isDefined() or not (s.defaultExpression.expression.trim().length() > 0))
  	
	  t.binding = s.equivalent("CreateDataPropertyForTransferAttributeBinding");
      log.debug("Created TransferAttribute for MappedTransferObjectType with Binding (basic): [" + t.name + "] into [" + t.eContainer.name + "]");
}

//!binding, !default
rule CreateTransferAttributeForMappedTransferObjectTypeBasic
    transform s: ESM!DataMember
    to t: JUDOPSM!TransferAttribute
    extends CreateTransferAttribute {
  	  guard: s.eContainer.isKindOf(ESM!TransferObjectType)
  			and not s.eContainer.isTypeOf(ESM!EntityType)
  			and s.eContainer.mapping.isDefined()
  			and not s.property
  			and (not s.defaultExpression.expression.isDefined() or not (s.defaultExpression.expression.trim().length() > 0))
  			
      log.debug("Created TransferAttribute for MappedTransferObjectType without Binding (basic): [" + t.name + "] into [" + t.eContainer.name + "]");
}

//------------- TransferAttribute For UnmappedTransferObjectType
//!default
rule CreateTransferAttributeForUnmappedTransferObjectType
    transform s: ESM!DataMember
    to t: JUDOPSM!TransferAttribute
    extends CreateTransferAttribute {
  	  guard: s.eContainer.isKindOf(ESM!TransferObjectType)
  			and not s.eContainer.isTypeOf(ESM!EntityType)
  			and not s.eContainer.mapping.isDefined()
  			and (not s.defaultExpression.expression.isDefined() or not (s.defaultExpression.expression.trim().length() > 0))
      
      log.debug("Created TransferAttribute for UnmappedTransferObjectType (basic): [" + t.name + "] into [" + t.eContainer.name + "]");
}
