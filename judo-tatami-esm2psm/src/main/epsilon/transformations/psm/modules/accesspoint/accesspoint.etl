import "../namespace/namespace.etl";
import "../derived/referenceAccessor.etl";
import "../../../../operations/_importAll.eol";

rule CreateAccessPoint
	transform s: ESM!AccessPoint
	to t: JUDOPSM!AccessPoint
	extends CreateNamespaceElement {
	  log.debug("Created AccessPoint: " + t.name);
}

rule CreateExposedService
	transform s: ESM!ExposedService
	to t: JUDOPSM!ExposedService {
	  t.`operation` = s.`operation`.equivalent("CreateUnboundOperation");
	  s.eContainer.equivalent("CreateAccessPoint").exposedServices.add(t);
	  log.debug("Created ExposedService.");
}

rule CreateExposedGraph
    transform s: ESM!ExposedGraph
    to t: JUDOPSM!ExposedGraph
    extends CreateNamedElement {
    
      t.mappedTransferObjectType = s.target.getPSMTransferObjectTypeEquivalent();
     
      t.selector = s.equivalent("CreateStaticNavigationForExposedGraph"); 
      t.cardinality = s.equivalent("CreateCardinalityOfExposedGraph");
      s.eContainer.equivalent("CreateAccessPoint").exposedGraphs.add(t);
      
      t.get = s.equivalent("CreateGetOperationForExposedGraph");
      t.create = s.equivalent("CreateCreateOperationForExposedGraph");
      t.update = s.equivalent("CreateUpdateOperationForExposedGraph");
      t.`delete` = s.equivalent("CreateDeleteOperationForExposedGraph");

      for (relation in s.target.relations) {
          var rangeAllowed = false;
          if (relation.isKindOf(ESM!OneWayRelationMember)) {
              if (relation.eContainer.isKindOf(ESM!EntityType)) {
                  rangeAllowed = not relation.containment and relation.relationMemberType <> ESM!RelationMemberType#PROPERTY;
              } else if (relation.eContainer.isKindOf(ESM!TransferObjectType)) {
                  rangeAllowed = relation.relationMemberType <> ESM!RelationMemberType#PROPERTY and (relation.relationMemberType == ESM!RelationMemberType#BOUND implies (not relation.binding.containment and relation.binding.relationMemberType <> ESM!RelationMemberType#PROPERTY)) and relation.target.mapping.isDefined();
              }
          } else if (relation.isKindOf(ESM!TwoWayRelationMember)) {
              rangeAllowed = relation.target.mapping.isDefined();
          }

          if (rangeAllowed and relation.rangeExpression.isDefined() and relation.rangeExpression.trim().length() > 0 and (s.createable or s.updateable)) {
              createGetRangeOperationForExposedGraph(s,relation);
          }

          if (s.updateable) {
              if (relation.upper == 1) {
                  createSetOperationForExposedGraph(s,relation);
                  createUnsetOperationForExposedGraph(s,relation);
              } else {
                  createAddAllOperationForExposedGraph(s,relation);
                  createRemoveAllOperationForExposedGraph(s,relation);
              }
          }
      }

      log.debug("Created ExposedGraph: " + t.name);
}

@lazy
@greedy
rule CreateCardinalityOfExposedGraph
	transform s: ESM!ExposedGraph
	to t: JUDOPSM!Cardinality {
	  t.upper = s.upper;
  	  t.lower = s.lower;
}
