import "../namespace/namespace.etl";
import "../derived/referenceAccessor.etl";
import "../../../../operations/_importAll.eol";

rule CreateAccessPoint
	transform s: ESM!AccessPoint
	to t: JUDOPSM!AccessPoint
	extends CreateNamespaceElement {
	  log.debug("Created AccessPoint: " + t.name);
}

rule CreateExposedService
	transform s: ESM!ExposedGraph
	to t: JUDOPSM!ExposedService
	extends CreateNamedElement {
        guard: not s.target.mapping.isDefined() or s.getterExpression.trim() == ''

        t.`operationGroup` = s.target.getPSMTransferObjectTypeEquivalent();

        s.eContainer.equivalent("CreateAccessPoint").exposedServices.add(t);
        log.debug("Created ExposedService.");
}

rule CreateExposedGraph
    transform s : ESM!ExposedGraph
    to t : JUDOPSM!ExposedGraph
    extends CreateNamedElement {
        guard: s.target.mapping.isDefined() and s.getterExpression.trim() <> ''

        t.`mappedTransferObjectType` = s.target.getPSMTransferObjectTypeEquivalent();
        t.selector = s.equivalent("CreateStaticNavigationForExposedGraph");

        s.eContainer.equivalent("CreateAccessPoint").exposedGraphs.add(t);
        log.debug("Created ExposedGraph.");
}

rule CreateExposedGraphCardinality
    transform s : ESM!ExposedGraph
    to t : JUDOPSM!Cardinality {
        guard: s.target.mapping.isDefined() and s.getterExpression.trim() <> ''

        t.lower = s.lower;
        t.upper = s.upper;

        s.equivalent("CreateExposedGraph").cardinality = t;
}

rule CreateGetOperationForExposedGraph
    transform s : ESM!ExposedGraph
    to t : JUDOPSM!UnboundOperation {
        guard: s.target.mapping.isDefined() and s.getterExpression.trim() <> ''

        t.name = "_get" + s.name.firstToUpperCase() + "For" + s.eContainer.name.firstToUpperCase();
        t.behaviour = new JUDOPSM!TransferOperationBehaviour;
        t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#GET;
        t.behaviour.owner = s.equivalent("CreateExposedGraph");

        t.output = new JUDOPSM!Parameter;
        t.output.name = "output";
        t.output.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.output.cardinality = new JUDOPSM!Cardinality;
        t.output.cardinality.lower = s.lower;
        t.output.cardinality.upper = s.upper;

        s.target.getPSMTransferObjectTypeEquivalent().operations.add(t);
}

operation ESM!ExposedGraph createSetOperationForExposedGraph(relation : ESM!RelationFeature) : JUDOPSM!UnboundOperation {
    var t = new JUDOPSM!UnboundOperation;

    t.name = "_set" + relation.name.firstToUpperCase() + "Of" + self.name.firstToUpperCase() + "For" + self.eContainer.name.firstToUpperCase();
    t.behaviour = new JUDOPSM!TransferOperationBehaviour;
    t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#SET_RELATION;
    t.behaviour.owner = self.equivalent("CreateExposedGraph");
    t.behaviour.relation = relation.getPSMTransferObjectRelationEquivalent();

    t.input = new JUDOPSM!Parameter;
    t.input.name = "input";
    t.input.type = self.target.getPSMTransferObjectTypeEquivalent();
    t.input.cardinality = new JUDOPSM!Cardinality;
    t.input.cardinality.lower = 1;
    t.input.cardinality.upper = 1;

    self.target.getPSMTransferObjectTypeEquivalent().operations.add(t);

    return t;
}

operation ESM!ExposedGraph createUnsetOperationForExposedGraph(relation : ESM!RelationFeature) : JUDOPSM!UnboundOperation {
    var t = new JUDOPSM!UnboundOperation;

    t.name = "_unset" + relation.name.firstToUpperCase() + "Of" + self.name.firstToUpperCase() + "For" + self.eContainer.name.firstToUpperCase();
    t.behaviour = new JUDOPSM!TransferOperationBehaviour;
    t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#UNSET_RELATION;
    t.behaviour.owner = self.equivalent("CreateExposedGraph");
    t.behaviour.relation = relation.getPSMTransferObjectRelationEquivalent();

    t.input = new JUDOPSM!Parameter;
    t.input.name = "input";
    t.input.type = self.target.getPSMTransferObjectTypeEquivalent();
    t.input.cardinality = new JUDOPSM!Cardinality;
    t.input.cardinality.lower = 1;
    t.input.cardinality.upper = 1;

    self.target.getPSMTransferObjectTypeEquivalent().operations.add(t);

    return t;
}

operation ESM!ExposedGraph createAddAllOperationForExposedGraph(relation : ESM!RelationFeature) : JUDOPSM!UnboundOperation {
    var t = new JUDOPSM!UnboundOperation;

    t.name = "_add" + relation.name.firstToUpperCase() + "To" + self.name.firstToUpperCase() + "For" + self.eContainer.name.firstToUpperCase();
    t.behaviour = new JUDOPSM!TransferOperationBehaviour;
    t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#ADD_ALL_TO_RELATION;
    t.behaviour.owner = self.equivalent("CreateExposedGraph");
    t.behaviour.relation = relation.getPSMTransferObjectRelationEquivalent();

    t.input = new JUDOPSM!Parameter;
    t.input.name = "input";
    t.input.type = self.target.getPSMTransferObjectTypeEquivalent();
    t.input.cardinality = new JUDOPSM!Cardinality;
    t.input.cardinality.lower = 1;
    t.input.cardinality.upper = 1;

    self.target.getPSMTransferObjectTypeEquivalent().operations.add(t);

    return t;
}

operation ESM!ExposedGraph createRemoveAllOperationForExposedGraph(relation : ESM!RelationFeature) : JUDOPSM!UnboundOperation {
    var t = new JUDOPSM!UnboundOperation;

    t.name = "_remove" + relation.name.firstToUpperCase() + "From" + self.name.firstToUpperCase() + "For" + self.eContainer.name.firstToUpperCase();
    t.behaviour = new JUDOPSM!TransferOperationBehaviour;
    t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#REMOVE_ALL_FROM_RELATION;
    t.behaviour.owner = self.equivalent("CreateExposedGraph");
    t.behaviour.relation = relation.getPSMTransferObjectRelationEquivalent();

    t.input = new JUDOPSM!Parameter;
    t.input.name = "input";
    t.input.type = self.target.getPSMTransferObjectTypeEquivalent();
    t.input.cardinality = new JUDOPSM!Cardinality;
    t.input.cardinality.lower = 1;
    t.input.cardinality.upper = 1;

    self.target.getPSMTransferObjectTypeEquivalent().operations.add(t);

    return t;
}

operation ESM!ExposedGraph createGetRangeOperationForExposedGraphEdit(relation : ESM!RelationFeature, parameter : JUDOPSM!Parameter, action : String) : JUDOPSM!UnboundOperation {
    var t = new JUDOPSM!UnboundOperation;

    t.name = "_getRangeOf" + relation.name.firstToUpperCase() + "To" + action.firstToUpperCase() + self.name.firstToUpperCase() + "For" + self.eContainer.name.firstToUpperCase();
    t.behaviour = new JUDOPSM!TransferOperationBehaviour;
    t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#GET_RANGE_OF_RELATION;
    t.behaviour.owner = parameter;
    t.behaviour.relation = relation.getPSMTransferObjectRelationEquivalent();

    t.input = new JUDOPSM!Parameter;
    t.input.name = "input";
    t.input.type = self.target.getPSMTransferObjectTypeEquivalent();
    t.input.cardinality = new JUDOPSM!Cardinality;
    t.input.cardinality.lower = 1;
    t.input.cardinality.upper = 1;

    t.output = new JUDOPSM!Parameter;
    t.output.name = "output";
    t.output.type = relation.target.getPSMTransferObjectTypeEquivalent();
    t.output.cardinality = new JUDOPSM!Cardinality;
    t.output.cardinality.lower = 0;
    t.output.cardinality.upper = -1;

    self.target.getPSMTransferObjectTypeEquivalent().operations.add(t);

    return t;
}

rule CreateCreateOperationForExposedGraph
    transform s : ESM!ExposedGraph
    to t : JUDOPSM!UnboundOperation {
        guard: s.target.mapping.isDefined() and s.getterExpression.trim() <> '' and s.createable

        t.name = "_create" + s.name.firstToUpperCase() + "For" + s.eContainer.name.firstToUpperCase();
        t.behaviour = new JUDOPSM!TransferOperationBehaviour;
        t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#CREATE;
        t.behaviour.owner = s.equivalent("CreateExposedGraph");

        t.input = new JUDOPSM!Parameter;
        t.input.name = "input";
        t.input.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.input.cardinality = new JUDOPSM!Cardinality;
        t.input.cardinality.lower = 1;
        t.input.cardinality.upper = 1;

        t.output = new JUDOPSM!Parameter;
        t.output.name = "output";
        t.output.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.output.cardinality = new JUDOPSM!Cardinality;
        t.output.cardinality.lower = 1;
        t.output.cardinality.upper = 1;

        for (relation in s.target.getAllRelations().select(r | not r.isReadOnly() and (r.isKindOf(ESM!TwoWayRelationMember) implies r.partner <> s))) {
            var rangeAllowed = false;
            if (relation.isKindOf(ESM!OneWayRelationMember)) {
                if (relation.eContainer.isKindOf(ESM!EntityType)) {
                    rangeAllowed = not relation.containment and relation.relationMemberType <> ESM!RelationMemberType#PROPERTY;
                } else if (relation.eContainer.isKindOf(ESM!TransferObjectType)) {
                    rangeAllowed = relation.relationMemberType <> ESM!RelationMemberType#PROPERTY and (relation.relationMemberType == ESM!RelationMemberType#BOUND implies (not relation.binding.containment and relation.binding.relationMemberType <> ESM!RelationMemberType#PROPERTY)) and relation.target.mapping.isDefined();
                }
            } else if (relation.isKindOf(ESM!TwoWayRelationMember)) {
                rangeAllowed = relation.target.mapping.isDefined();
            }

            if (rangeAllowed and relation.rangeExpression.isDefined() and relation.rangeExpression.trim().length() > 0 and (s.createable or s.updateable)) {
                s.createGetRangeOperationForExposedGraphEdit(relation, t.input, "create");
            }
        }

        s.target.getPSMTransferObjectTypeEquivalent().operations.add(t);
}

rule CreateUpdateOperationForExposedGraph
    transform s : ESM!ExposedGraph
    to t : JUDOPSM!UnboundOperation {
        guard: s.target.mapping.isDefined() and s.getterExpression.trim() <> '' and s.updateable

        t.name = "_update" + s.name.firstToUpperCase() + "For" + s.eContainer.name.firstToUpperCase();
        t.behaviour = new JUDOPSM!TransferOperationBehaviour;
        t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#UPDATE;
        t.behaviour.owner = s.equivalent("CreateExposedGraph");

        t.input = new JUDOPSM!Parameter;
        t.input.name = "input";
        t.input.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.input.cardinality = new JUDOPSM!Cardinality;
        t.input.cardinality.lower = 1;
        t.input.cardinality.upper = 1;

        t.output = new JUDOPSM!Parameter;
        t.output.name = "output";
        t.output.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.output.cardinality = new JUDOPSM!Cardinality;
        t.output.cardinality.lower = 1;
        t.output.cardinality.upper = 1;

        for (relation in s.target.getAllRelations().select(r | not r.isReadOnly() and (r.isKindOf(ESM!TwoWayRelationMember) implies r.partner <> s))) {
            var rangeAllowed = false;
            var containment = false;
            if (relation.isKindOf(ESM!OneWayRelationMember)) {
                if (relation.eContainer.isKindOf(ESM!EntityType)) {
                    rangeAllowed = not relation.containment and relation.relationMemberType <> ESM!RelationMemberType#PROPERTY;
                    containment = relation.containment;
                } else if (relation.eContainer.isKindOf(ESM!TransferObjectType)) {
                    rangeAllowed = relation.relationMemberType <> ESM!RelationMemberType#PROPERTY and (relation.relationMemberType == ESM!RelationMemberType#BOUND implies (not relation.binding.containment and relation.binding.relationMemberType <> ESM!RelationMemberType#PROPERTY)) and relation.target.mapping.isDefined();
                    containment = relation.relationMemberType == ESM!RelationMemberType#BOUND and relation.binding.containment and relation.target.mapping.isDefined();
                }
            } else if (relation.isKindOf(ESM!TwoWayRelationMember)) {
                rangeAllowed = relation.target.mapping.isDefined();
            }

            if (rangeAllowed and relation.rangeExpression.isDefined() and relation.rangeExpression.trim().length() > 0 and (s.createable or s.updateable)) {
                s.createGetRangeOperationForExposedGraphEdit(relation, t.input, "update");
            }

            var entityPartner;
            if (relation.isKindOf(ESM!TwoWayRelationMember)) {
                entityPartner = relation.partner;
            } else if (relation.relationMemberType == ESM!RelationMemberType#BOUND and relation.binding.isKindOf(ESM!TwoWayRelationMember)) {
                entityPartner = relation.binding.partner;
            }

            if (relation.upper == 1) {
                if (not containment and (entityPartner.isDefined() implies (entityPartner.lower < entityPartner.upper or entityPartner.upper == -1))) {
                    s.createSetOperationForExposedGraph(relation);
                }
                if (relation.lower == 0 and (not containment or s.deleteable) and (entityPartner.isDefined() implies (entityPartner.lower < entityPartner.upper or entityPartner.upper == -1))) {
                    s.createUnsetOperationForExposedGraph(relation);
                }
            } else {
                if (not containment and (entityPartner.isDefined() implies (entityPartner.lower < entityPartner.upper or entityPartner.upper == -1))) {
                    s.createSetOperationForExposedGraph(relation);
                }
                if ((relation.lower < relation.upper or relation.upper == -1) and not containment and (entityPartner.isDefined() implies (entityPartner.lower < entityPartner.upper or entityPartner.upper == -1))) {
                    s.createAddAllOperationForExposedGraph(relation);
                }
                if ((relation.lower < relation.upper or relation.upper == -1) and (not containment or s.deleteable) and (entityPartner.isDefined() implies (entityPartner.lower < entityPartner.upper or entityPartner.upper == -1))) {
                    s.createRemoveAllOperationForExposedGraph(relation);
                }
            }
        }

        s.target.getPSMTransferObjectTypeEquivalent().operations.add(t);
}

rule CreateDeleteOperationForExposedGraph
    transform s : ESM!ExposedGraph
    to t : JUDOPSM!UnboundOperation {
        guard: s.target.mapping.isDefined() and s.getterExpression.trim() <> '' and s.deleteable

        t.name = "_delete" + s.name.firstToUpperCase() + "For" + s.eContainer.name.firstToUpperCase();
        t.behaviour = new JUDOPSM!TransferOperationBehaviour;
        t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#DELETE;
        t.behaviour.owner = s.equivalent("CreateExposedGraph");

        t.input = new JUDOPSM!Parameter;
        t.input.name = "input";
        t.input.type = s.target.getPSMTransferObjectTypeEquivalent();
        t.input.cardinality = new JUDOPSM!Cardinality;
        t.input.cardinality.lower = 1;
        t.input.cardinality.upper = 1;

        s.target.getPSMTransferObjectTypeEquivalent().operations.add(t);
}
