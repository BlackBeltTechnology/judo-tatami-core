import "modules/namespace/namespace.etl";

import "modules/type/type.etl";

import "modules/constraint/invariantConstraint.etl";

import "modules/data/entityType.etl";
import "modules/data/primitiveTypedElement.etl";
import "modules/data/referenceTypedElement.etl";
import "modules/data/sequence.etl";

import "modules/measure/measure.etl";

import "modules/derived/expressionType.etl";
import "modules/derived/primitiveAccessor.etl";
import "modules/derived/referenceAccessor.etl";

import "modules/service/transferObjectType.etl";
import "modules/service/transferAttribute.etl";
import "modules/service/transferObjectRelation.etl";

import "modules/service/operation.etl";

import "modules/actor/actorType.etl";

post {
    var enumsWithoutOrdinal = JUDOPSM!EnumerationMember.all.select(m | m.ordinal == -1).collect(m | m.eContainer).flatten().asSet();
    for (e in enumsWithoutOrdinal) {
        log.debug("Set/overwrite ordinals of enumeration: " + e.name);
        var index = 0;
        for (m in e.members) {
            m.ordinal = index;
            index = index + 1;
        }
    }
    
    var ecoreUtil = new Native("org.eclipse.emf.ecore.util.EcoreUtil");
    
    for (esmTransferObject in ESM!TransferObjectType.all) {
    	var psmTransferObject : JUDOPSM!TransferObjectType = esmTransferObject.getPSMTransferObjectTypeEquivalent();
    	var psmOptionalTransferObject : JUDOPSM!TransferObjectType = esmTransferObject.getPSMOptionalEquivalent();
    	
    	for (esmSubClass in esmUtils.getAllDescendantsOfTransferObjectType(esmTransferObject)) {
    		var psmSubClass : JUDOPSM!TransferObjectType = esmSubClass.getPSMTransferObjectTypeEquivalent();
    		var psmOptionalSubClass : JUDOPSM!TransferObjectType = esmSubClass.getPSMOptionalEquivalent();
    	
    		for (a in psmTransferObject.attributes) {
    			if (not psmSubClass.attributes.exists(attr | attr.name.equals(a.name))) {
    				var transferAttribute : JUDOPSM!TransferAttribute = ecoreUtil.copy(a);
    				psmSubClass.attributes.add(transferAttribute);
    				log.debug("Added attribute: [" + a.name + "] to subclass [" + psmSubClass.name + "] from [" + psmTransferObject.name + "]");
    			}
    		}
    		
    		for (a in psmOptionalTransferObject.attributes) {
                if (not psmOptionalSubClass.attributes.exists(attr | attr.name.equals(a.name))) {
                    var transferAttribute : JUDOPSM!TransferAttribute = ecoreUtil.copy(a);
                    psmOptionalSubClass.attributes.add(transferAttribute);
                    log.debug("Added attribute: [" + a.name + "] to optional subclass [" + psmSubClass.name + "] from [" + psmTransferObject.name + "]");
                }
            }
    		
    		for (r in psmTransferObject.relations) {
    			if (not psmSubClass.relations.exists(rel | rel.name.equals(r.name))) {
    				var transferObjectRelation : JUDOPSM!TransferObjectRelation = ecoreUtil.copy(r);
    				psmSubClass.relations.add(transferObjectRelation);
    				log.debug("Added relation: [" + r.name + "] to subclass [" + psmSubClass.name + "] from [" + psmTransferObject.name + "]");
    			}
    		}
    		
    		for (r in psmOptionalTransferObject.relations) {
                if (not psmOptionalSubClass.relations.exists(rel | rel.name.equals(r.name))) {
                    var transferObjectRelation : JUDOPSM!TransferObjectRelation = ecoreUtil.copy(r);
                    psmOptionalSubClass.relations.add(transferObjectRelation);
                    log.debug("Added relation: [" + r.name + "] to optional subclass [" + psmSubClass.name + "] from [" + psmTransferObject.name + "]");
                }
            }
    		
    		var cloneableOperations = psmTransferObject.operations
    											.select(o | o.behaviour.isUndefined() or 
    												(o.behaviour.isDefined() and
														o.behaviour.behaviourType <> JUDOPSM!TransferOperationBehaviourType#REFRESH
														and o.behaviour.behaviourType <> JUDOPSM!TransferOperationBehaviourType#UPDATE_INSTANCE
														and o.behaviour.behaviourType <> JUDOPSM!TransferOperationBehaviourType#VALIDATE_UPDATE
														and o.behaviour.behaviourType <> JUDOPSM!TransferOperationBehaviourType#DELETE_INSTANCE
														and o.behaviour.behaviourType <> JUDOPSM!TransferOperationBehaviourType#GET_PRINCIPAL
														and o.behaviour.behaviourType <> JUDOPSM!TransferOperationBehaviourType#GET_TEMPLATE
													)
												);
    		
    		for (o in cloneableOperations) {
    			if (not psmSubClass.operations.exists(op | op.name.equals(o.name))) {
	    			psmSubClass.operations.add(ecoreUtil.copy(o));
	    			log.debug("Added operation: [" + o.name + "] to subclass [" + psmSubClass.name + "] from [" + psmTransferObject.name + "]");
	    		}
    		}
    	}
	}
	
	for (o in JUDOPSM!TransferOperation.all.select(op | op.behaviour.isDefined())) {
		
		if (o.behaviour.owner.isKindOf(JUDOPSM!TransferObjectRelation)) {
			var newOwner : JUDOPSM!TransferObjectRelation = o.eContainer.relations.select(r | r.name.equals(o.behaviour.owner.name)).first();
			o.behaviour.owner = newOwner;
			
			if (o.behaviour.behaviourType == JUDOPSM!TransferOperationBehaviourType#GET_RANGE) {
                o.input.type = o.behaviour.owner.eContainer().~source.equivalent("CreateGetRangeInputType");
            }
		}
	}
}
