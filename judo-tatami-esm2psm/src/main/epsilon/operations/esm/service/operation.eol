import "transferObjectRelation.eol";
import "transferObjectType.eol";

operation ESM!Operation getPSMEquivalent() : JUDOPSM!OperationDeclaration {
    if (self.modifier <> ESM!OperationModifier#STATIC and self.eContainer.isKindOf(ESM!EntityType)) {
        return self.equivalent("CreateBoundOperation");
    } else if (self.modifier <> ESM!OperationModifier#STATIC and self.bound) {
        return self.equivalent("CreateBoundTransferOperation");
    } else if (self.modifier == ESM!OperationModifier#STATIC and self.eContainer.isKindOf(ESM!EntityType)) {
        return self.equivalent("CreateUnboundTransferOperationInDefaultTransferObjectType");
    } else if (self.modifier == ESM!OperationModifier#STATIC and not self.eContainer.isKindOf(ESM!EntityType) and not self.bound) {
        return self.equivalent("CreateInPlaceUnboundOperation");
    } else if (self.modifier == ESM!OperationModifier#STATIC and not self.eContainer.isKindOf(ESM!EntityType) and self.bound) {
        return self.equivalent("CreateReferencedUnboundOperation");
    } else {
        throw "Unsupported operation type";
    }
}

/*
operation ESM!BoundOperation getPSMEquivalent(): JUDOPSM!OperationDeclaration {
    return self.equivalent("CreateBoundOperation");
}

operation ESM!UnboundOperation getPSMEquivalent(): JUDOPSM!OperationDeclaration {
    return self.equivalent("CreateUnboundOperation");
}

operation createNewOperationBody(): JUDOPSM!OperationBody {
    var implementation = new JUDOPSM!OperationBody;
    implementation.stateful = true;
    implementation.customImplementation = false;
    return implementation;
}

operation createNewCardinality(): JUDOPSM!Cardinality {
    var cardinality = new JUDOPSM!Cardinality;
    cardinality.lower = 1;
    cardinality.upper = 1;
	return cardinality;
}

operation createNewParameter(source: ESM!RelationFeature): JUDOPSM!Parameter {
    var input = new JUDOPSM!Parameter;
    input.name = "input";
    input.cardinality = createNewCardinality();
    input.type = source.target.getPSMTransferObjectTypeEquivalent();
    return input;
}

operation createNewParameterForExposedGraph(source: ESM!ExposedGraph): JUDOPSM!Parameter {
    var input = new JUDOPSM!Parameter;
    input.name = "input";
    input.cardinality = createNewCardinality();
    input.type = source.target.getPSMTransferObjectTypeEquivalent();
    return input;
}

operation createSetOperation(source: ESM!RelationFeature, relation: ESM!RelationFeature) {
    var setOperation = new JUDOPSM!BoundOperationWithRelation;
    setOperation.name = "_set" + relation.name.firstToUpperCase() + "Of" + source.name.firstToUpperCase();
    setOperation.relation = relation.getPSMTransferObjectRelationEquivalent();
    
    setOperation.input = createNewParameter(source);
    setOperation.implementation = createNewOperationBody();
    
    source.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(setOperation);
    source.getPSMTransferObjectRelationEquivalent().set.add(setOperation);
}

operation createAddAllOperation(source: ESM!RelationFeature, relation: ESM!RelationFeature) {
    var addAllOperation = new JUDOPSM!BoundOperationWithRelation;
    addAllOperation.name = "_addAll" + relation.name.firstToUpperCase() + "To" + source.name.firstToUpperCase();
    addAllOperation.relation = relation.getPSMTransferObjectRelationEquivalent();
                       
    addAllOperation.input = createNewParameter(source);
    addAllOperation.implementation = createNewOperationBody();

    source.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(addAllOperation);
    source.getPSMTransferObjectRelationEquivalent().addAll.add(addAllOperation);
}

operation createUnsetOperation(source: ESM!RelationFeature, relation: ESM!RelationFeature) {
    var unsetOperation = new JUDOPSM!BoundOperationWithRelation;
    unsetOperation.name = "_unset" + relation.name.firstToUpperCase() + "Of" + source.name.firstToUpperCase();
    unsetOperation.relation = relation.getPSMTransferObjectRelationEquivalent();
    
    unsetOperation.input = createNewParameter(source);
    unsetOperation.implementation = createNewOperationBody();
    
    source.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(unsetOperation);
    source.getPSMTransferObjectRelationEquivalent().unset.add(unsetOperation);
}

operation createRemoveAllOperation(source: ESM!RelationFeature, relation: ESM!RelationFeature) {
    var removeAllOperation = new JUDOPSM!BoundOperationWithRelation;
    removeAllOperation.name = "_removeAll" + relation.name.firstToUpperCase() + "From" + source.name.firstToUpperCase();
    removeAllOperation.relation = relation.getPSMTransferObjectRelationEquivalent();
                            
    removeAllOperation.input = createNewParameter(source);
    removeAllOperation.implementation = createNewOperationBody();

    source.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(removeAllOperation);
    source.getPSMTransferObjectRelationEquivalent().removeAll.add(removeAllOperation);
}

operation createGetRangeOperation(source: ESM!RelationFeature, relation: ESM!RelationFeature) : JUDOPSM!BoundOperationWithRelation {
    var getRangeOperation = new JUDOPSM!BoundOperationWithRelation;
    getRangeOperation.name = "_getRangeOf" + relation.name.firstToUpperCase() + "Via" + source.name.firstToUpperCase();
    getRangeOperation.relation = relation.getPSMTransferObjectRelationEquivalent();

    getRangeOperation.input = new JUDOPSM!Parameter;
    getRangeOperation.input.name = "input";
    getRangeOperation.input.cardinality = new JUDOPSM!Cardinality;
    getRangeOperation.input.cardinality.lower = 1;
    getRangeOperation.input.cardinality.upper = 1;
    getRangeOperation.input.type = relation.eContainer.getPSMTransferObjectTypeEquivalent();

    getRangeOperation.output = new JUDOPSM!Parameter;
    getRangeOperation.output.name = "output";
    getRangeOperation.output.cardinality = new JUDOPSM!Cardinality;
    getRangeOperation.output.cardinality.lower = 0;
    getRangeOperation.output.cardinality.upper = -1;
    getRangeOperation.output.type = relation.target.getPSMTransferObjectTypeEquivalent();

    getRangeOperation.implementation = createNewOperationBody();
    getRangeOperation.implementation.stateful = false;

    source.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(getRangeOperation);
    return getRangeOperation;
}

operation createSetOperationForExposedGraph(source: ESM!ExposedGraph, relation: ESM!RelationFeature) {
    var setOperation = new JUDOPSM!UnboundOperationWithRelation;
    setOperation.name = "_set" + relation.name.firstToUpperCase() + "In" + source.eContainer.name + "Update" + source.name.firstToUpperCase();
    setOperation.relation = relation.getPSMTransferObjectRelationEquivalent();

    setOperation.input = createNewParameterForExposedGraph(source);
    setOperation.implementation = createNewOperationBody();

    source.eContainer.eContainer.getPSMEquivalent().elements.add(setOperation);
    source.equivalent("CreateExposedServiceAndGraph").set.add(setOperation);
}

operation createAddAllOperationForExposedGraph(source: ESM!ExposedGraph, relation: ESM!RelationFeature) {
    var addAllOperation = new JUDOPSM!UnboundOperationWithRelation;
    addAllOperation.name = "_addAll" + relation.name.firstToUpperCase() + "To" + source.eContainer.name + "Update" + source.name.firstToUpperCase();
    addAllOperation.relation = relation.getPSMTransferObjectRelationEquivalent();

    addAllOperation.input = createNewParameterForExposedGraph(source);
    addAllOperation.implementation = createNewOperationBody();

    source.eContainer.eContainer.getPSMEquivalent().elements.add(addAllOperation);
    source.equivalent("CreateExposedServiceAndGraph").addAll.add(addAllOperation);
}

operation createUnsetOperationForExposedGraph(source: ESM!ExposedGraph, relation: ESM!RelationFeature) {
    var unsetOperation = new JUDOPSM!UnboundOperationWithRelation;
    unsetOperation.name = "_unset" + relation.name.firstToUpperCase() + "In" + source.eContainer.name + "Update" + source.name.firstToUpperCase();
    unsetOperation.relation = relation.getPSMTransferObjectRelationEquivalent();

    unsetOperation.input = createNewParameterForExposedGraph(source);
    unsetOperation.implementation = createNewOperationBody();

    source.eContainer.eContainer.getPSMEquivalent().elements.add(unsetOperation);
    source.equivalent("CreateExposedServiceAndGraph").unset.add(unsetOperation);
}

operation createRemoveAllOperationForExposedGraph(source: ESM!ExposedGraph, relation: ESM!RelationFeature) {
    var removeAllOperation = new JUDOPSM!UnboundOperationWithRelation;
    removeAllOperation.name = "_removeAll" + relation.name.firstToUpperCase() + "From" + source.eContainer.name + "Update" + source.name.firstToUpperCase();
    removeAllOperation.relation = relation.getPSMTransferObjectRelationEquivalent();

    removeAllOperation.input = createNewParameterForExposedGraph(source);
    removeAllOperation.implementation = createNewOperationBody();

    source.eContainer.eContainer.getPSMEquivalent().elements.add(removeAllOperation);
    source.equivalent("CreateExposedServiceAndGraph").removeAll.add(removeAllOperation);
}

operation createGetRangeOperationForExposedGraph(source: ESM!ExposedGraph, relation: ESM!RelationFeature) : JUDOPSM!UnboundOperationWithRelation {
    var getRangeOperation = new JUDOPSM!UnboundOperationWithRelation;
    getRangeOperation.name = "_getRangeOf" + relation.name.firstToUpperCase() + "For" + source.eContainer.name + "Edit" + source.name.firstToUpperCase();
    getRangeOperation.relation = relation.getPSMTransferObjectRelationEquivalent();

    getRangeOperation.input = new JUDOPSM!Parameter;
    getRangeOperation.input.name = "input";
    getRangeOperation.input.cardinality = new JUDOPSM!Cardinality;
    getRangeOperation.input.cardinality.lower = 1;
    getRangeOperation.input.cardinality.upper = 1;
    getRangeOperation.input.type = relation.eContainer.getPSMTransferObjectTypeEquivalent();

    getRangeOperation.output = new JUDOPSM!Parameter;
    getRangeOperation.output.name = "output";
    getRangeOperation.output.cardinality = new JUDOPSM!Cardinality;
    getRangeOperation.output.cardinality.lower = 0;
    getRangeOperation.output.cardinality.upper = -1;
    getRangeOperation.output.type = relation.target.getPSMTransferObjectTypeEquivalent();

    getRangeOperation.implementation = createNewOperationBody();
    getRangeOperation.implementation.stateful = false;

    source.eContainer.eContainer.getPSMEquivalent().elements.add(getRangeOperation);
    return getRangeOperation;
}
*/