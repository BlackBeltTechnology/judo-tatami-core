import "transferObjectRelation.eol";
import "transferObjectType.eol";

operation ESM!Operation getPSMEquivalent() : JUDOPSM!OperationDeclaration {
    if (self.operationType <> ESM!OperationType#STATIC and self.eContainer.isKindOf(ESM!EntityType)) {
        return self.equivalent("CreateBoundOperation");
    } else if (self.operationType == ESM!OperationType#MAPPED) {
        return self.equivalent("CreateBoundTransferOperation");
    } else if (self.operationType == ESM!OperationType#STATIC and self.eContainer.isKindOf(ESM!EntityType)) {
        return self.equivalent("CreateUnboundTransferOperationInDefaultTransferObjectType");
    } else if (self.operationType == ESM!OperationType#STATIC and not self.eContainer.isKindOf(ESM!EntityType)) {
        return self.equivalent("CreateInPlaceUnboundOperation");
    } else {
        throw "Unsupported operation type";
    }
}

operation ESM!RelationFeature createSetOperationForRelation(relation : ESM!RelationFeature) : JUDOPSM!BoundOperation {
    var t = new JUDOPSM!BoundOperation;

    t.name = "_set" + relation.name.firstToUpperCase() + "Of" + self.name.firstToUpperCase() + "For" + esmUtils.getNamespaceElementFQName(self.eContainer).replace("::", "_").firstToUpperCase();
    t.instanceRepresentation = self.eContainer.getPSMTransferObjectTypeEquivalent();

    t.input = new JUDOPSM!Parameter;
    t.input.name = "input";
    t.input.type = self.target.getPSMTransferObjectTypeEquivalent();
    t.input.cardinality = new JUDOPSM!Cardinality;
    t.input.cardinality.lower = 1;
    t.input.cardinality.upper = 1;

    self.eContainer.mapping.target.equivalent("CreateEntityType").operations.add(t);

    return t;
}

operation ESM!RelationFeature createSetTransferOperationForRelation(relation : ESM!RelationFeature, binding : JUDOPSM!BoundOperation) : JUDOPSM!BoundTransferOperation {
    var t = new JUDOPSM!BoundTransferOperation;

    t.name = "_set" + relation.name.firstToUpperCase() + "Of" + self.name.firstToUpperCase();
    t.behaviour = new JUDOPSM!TransferOperationBehaviour;
    t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#SET_RELATION_OF_RELATION;
    t.behaviour.owner = self.getPSMTransferObjectRelationEquivalent();
    t.behaviour.relation = relation.getPSMTransferObjectRelationEquivalent();

    t.input = new JUDOPSM!Parameter;
    t.input.name = "input";
    t.input.type = self.target.getPSMTransferObjectTypeEquivalent();
    t.input.cardinality = new JUDOPSM!Cardinality;
    t.input.cardinality.lower = 1;
    t.input.cardinality.upper = 1;

    t.binding = binding;

    self.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(t);

    return t;
}

operation ESM!RelationFeature createSetUnboundOperation(relation : ESM!RelationFeature) : JUDOPSM!UnboundOperation {
    var t = new JUDOPSM!UnboundOperation;

    t.name = "_set" + relation.name.firstToUpperCase() + "Of" + self.name.firstToUpperCase();
    t.behaviour = new JUDOPSM!TransferOperationBehaviour;
    t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#SET_RELATION;
    t.behaviour.owner = self.getPSMTransferObjectRelationEquivalent();
    
    t.behaviour.relation = relation.getPSMTransferObjectRelationEquivalent();

    t.input = new JUDOPSM!Parameter;
    t.input.name = "input";
    t.input.type = self.target.getPSMTransferObjectTypeEquivalent();
    t.input.cardinality = new JUDOPSM!Cardinality;
    t.input.cardinality.lower = 1;
    t.input.cardinality.upper = 1;

    self.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(t);

    return t;
}

operation ESM!RelationFeature createUnsetOperationForRelation(relation : ESM!RelationFeature) : JUDOPSM!BoundOperation {
    var t = new JUDOPSM!BoundOperation;

    t.name = "_unset" + relation.name.firstToUpperCase() + "Of" + self.name.firstToUpperCase() + "For" + esmUtils.getNamespaceElementFQName(self.eContainer).replace("::", "_").firstToUpperCase();
    t.instanceRepresentation = self.eContainer.getPSMTransferObjectTypeEquivalent();

    t.input = new JUDOPSM!Parameter;
    t.input.name = "input";
    t.input.type = self.target.getPSMTransferObjectTypeEquivalent();
    t.input.cardinality = new JUDOPSM!Cardinality;
    t.input.cardinality.lower = 1;
    t.input.cardinality.upper = 1;

    self.eContainer.mapping.target.equivalent("CreateEntityType").operations.add(t);

    return t;
}

operation ESM!RelationFeature createUnsetTransferOperationForRelation(relation : ESM!RelationFeature, binding : JUDOPSM!BoundOperation) : JUDOPSM!BoundTransferOperation {
    var t = new JUDOPSM!BoundTransferOperation;

    t.name = "_unset" + relation.name.firstToUpperCase() + "Of" + self.name.firstToUpperCase();
    t.behaviour = new JUDOPSM!TransferOperationBehaviour;
    t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#UNSET_RELATION_OF_RELATION;
    t.behaviour.owner = self.getPSMTransferObjectRelationEquivalent();
    t.behaviour.relation = relation.getPSMTransferObjectRelationEquivalent();

    t.input = new JUDOPSM!Parameter;
    t.input.name = "input";
    t.input.type = self.target.getPSMTransferObjectTypeEquivalent();
    t.input.cardinality = new JUDOPSM!Cardinality;
    t.input.cardinality.lower = 1;
    t.input.cardinality.upper = 1;

    t.binding = binding;

    self.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(t);

    return t;
}

operation ESM!RelationFeature createUnsetUnboundOperation(relation : ESM!RelationFeature) : JUDOPSM!UnboundOperation {
    var t = new JUDOPSM!UnboundOperation;

    t.name = "_unset" + relation.name.firstToUpperCase() + "Of" + self.name.firstToUpperCase();
    t.behaviour = new JUDOPSM!TransferOperationBehaviour;
    t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#UNSET_RELATION;
    t.behaviour.owner = self.getPSMTransferObjectRelationEquivalent();
    
    t.behaviour.relation = relation.getPSMTransferObjectRelationEquivalent();

    t.input = new JUDOPSM!Parameter;
    t.input.name = "input";
    t.input.type = self.target.getPSMTransferObjectTypeEquivalent();
    t.input.cardinality = new JUDOPSM!Cardinality;
    t.input.cardinality.lower = 1;
    t.input.cardinality.upper = 1;

    self.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(t);

    return t;
}

operation ESM!RelationFeature createAddAllOperationForRelation(relation : ESM!RelationFeature) : JUDOPSM!BoundOperation {
    var t = new JUDOPSM!BoundOperation;

    t.name = "_add" + relation.name.firstToUpperCase() + "To" + self.name.firstToUpperCase() + "For" + esmUtils.getNamespaceElementFQName(self.eContainer).replace("::", "_").firstToUpperCase();
    t.instanceRepresentation = self.eContainer.getPSMTransferObjectTypeEquivalent();

    t.input = new JUDOPSM!Parameter;
    t.input.name = "input";
    t.input.type = self.target.getPSMTransferObjectTypeEquivalent();
    t.input.cardinality = new JUDOPSM!Cardinality;
    t.input.cardinality.lower = 1;
    t.input.cardinality.upper = 1;

    self.eContainer.mapping.target.equivalent("CreateEntityType").operations.add(t);

    return t;
}

operation ESM!RelationFeature createAddAllTransferOperationForRelation(relation : ESM!RelationFeature, binding : JUDOPSM!BoundOperation) : JUDOPSM!BoundTransferOperation {
    var t = new JUDOPSM!BoundTransferOperation;

    t.name = "_add" + relation.name.firstToUpperCase() + "To" + self.name.firstToUpperCase();
    t.behaviour = new JUDOPSM!TransferOperationBehaviour;
    t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#ADD_ALL_TO_RELATION_OF_RELATION;
    t.behaviour.owner = self.getPSMTransferObjectRelationEquivalent();
    t.behaviour.relation = relation.getPSMTransferObjectRelationEquivalent();

    t.input = new JUDOPSM!Parameter;
    t.input.name = "input";
    t.input.type = self.target.getPSMTransferObjectTypeEquivalent();
    t.input.cardinality = new JUDOPSM!Cardinality;
    t.input.cardinality.lower = 1;
    t.input.cardinality.upper = 1;

    t.binding = binding;

    self.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(t);

    return t;
}

operation ESM!RelationFeature createAddAllUnboundOperation(relation : ESM!RelationFeature) : JUDOPSM!UnboundOperation {
    var t = new JUDOPSM!UnboundOperation;

    t.name = "_add" + relation.name.firstToUpperCase() + "To" + self.name.firstToUpperCase();
    t.behaviour = new JUDOPSM!TransferOperationBehaviour;
    t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#ADD_ALL_TO_RELATION;
    t.behaviour.owner = self.getPSMTransferObjectRelationEquivalent();
    t.behaviour.relation = relation.getPSMTransferObjectRelationEquivalent();

    t.input = new JUDOPSM!Parameter;
    t.input.name = "input";
    t.input.type = self.target.getPSMTransferObjectTypeEquivalent();
    t.input.cardinality = new JUDOPSM!Cardinality;
    t.input.cardinality.lower = 1;
    t.input.cardinality.upper = 1;

    self.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(t);

    return t;
}

operation ESM!RelationFeature createRemoveAllOperationForRelation(relation : ESM!RelationFeature) : JUDOPSM!BoundOperation {
    var t = new JUDOPSM!BoundOperation;

    t.name = "_remove" + relation.name.firstToUpperCase() + "From" + self.name.firstToUpperCase() + "For" + esmUtils.getNamespaceElementFQName(self.eContainer).replace("::", "_").firstToUpperCase();
    t.instanceRepresentation = self.eContainer.getPSMTransferObjectTypeEquivalent();

    t.input = new JUDOPSM!Parameter;
    t.input.name = "input";
    t.input.type = self.target.getPSMTransferObjectTypeEquivalent();
    t.input.cardinality = new JUDOPSM!Cardinality;
    t.input.cardinality.lower = 1;
    t.input.cardinality.upper = 1;

    self.eContainer.mapping.target.equivalent("CreateEntityType").operations.add(t);

    return t;
}

operation ESM!RelationFeature createRemoveAllTransferOperationForRelation(relation : ESM!RelationFeature, binding : JUDOPSM!BoundOperation) : JUDOPSM!BoundTransferOperation {
    var t = new JUDOPSM!BoundTransferOperation;

    t.name = "_remove" + relation.name.firstToUpperCase() + "From" + self.name.firstToUpperCase();
    t.behaviour = new JUDOPSM!TransferOperationBehaviour;
    t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#REMOVE_ALL_FROM_RELATION_OF_RELATION;
    t.behaviour.owner = self.getPSMTransferObjectRelationEquivalent();
    t.behaviour.relation = relation.getPSMTransferObjectRelationEquivalent();

    t.input = new JUDOPSM!Parameter;
    t.input.name = "input";
    t.input.type = self.target.getPSMTransferObjectTypeEquivalent();
    t.input.cardinality = new JUDOPSM!Cardinality;
    t.input.cardinality.lower = 1;
    t.input.cardinality.upper = 1;

    t.binding = binding;

    self.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(t);

    return t;
}

operation ESM!RelationFeature createRemoveAllUnboundOperation(relation : ESM!RelationFeature) : JUDOPSM!UnboundOperation {
    var t = new JUDOPSM!UnboundOperation;

    t.name = "_remove" + relation.name.firstToUpperCase() + "From" + self.name.firstToUpperCase();
    t.behaviour = new JUDOPSM!TransferOperationBehaviour;
    t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#REMOVE_ALL_FROM_RELATION;
    t.behaviour.owner = self.getPSMTransferObjectRelationEquivalent();
    t.behaviour.relation = relation.getPSMTransferObjectRelationEquivalent();

    t.input = new JUDOPSM!Parameter;
    t.input.name = "input";
    t.input.type = self.target.getPSMTransferObjectTypeEquivalent();
    t.input.cardinality = new JUDOPSM!Cardinality;
    t.input.cardinality.lower = 1;
    t.input.cardinality.upper = 1;

    self.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(t);

    return t;
}

operation ESM!RelationFeature createGetRangeTransferOperationForRelation(relation : ESM!RelationFeature, parameter : JUDOPSM!Parameter, action : String) : JUDOPSM!UnboundOperation {
    var t = new JUDOPSM!UnboundOperation;

    t.name = "_getRangeOf" + relation.name.firstToUpperCase() + "To" + action.firstToUpperCase() + self.name.firstToUpperCase();
    t.behaviour = new JUDOPSM!TransferOperationBehaviour;
    t.behaviour.behaviourType = JUDOPSM!TransferOperationBehaviourType#GET_RANGE_OF_RELATION;
    t.behaviour.owner = parameter;
    t.behaviour.relation = relation.getPSMTransferObjectRelationEquivalent();

    t.input = new JUDOPSM!Parameter;
    t.input.name = "input";
    t.input.type = self.target.getPSMTransferObjectTypeEquivalent();
    t.input.cardinality = new JUDOPSM!Cardinality;
    t.input.cardinality.lower = 0;
    t.input.cardinality.upper = 1;

    t.output = new JUDOPSM!Parameter;
    t.output.name = "output";
    t.output.type = relation.target.getPSMTransferObjectTypeEquivalent();
    t.output.cardinality = new JUDOPSM!Cardinality;
    t.output.cardinality.lower = 0;
    t.output.cardinality.upper = -1;

    self.eContainer.getPSMTransferObjectTypeEquivalent().operations.add(t);

    return t;
}
