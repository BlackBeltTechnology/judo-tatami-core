package [%= package %];

import java.util.Objects;
import java.util.UUID;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EReference;

import hu.blackbelt.judo.dao.api.DAO;
import hu.blackbelt.judo.dao.api.Payload;
import hu.blackbelt.judo.meta.asm.runtime.AsmModel;
import hu.blackbelt.judo.meta.asm.runtime.AsmUtils;
import hu.blackbelt.structured.map.proxy.MapHolder;
import hu.blackbelt.structured.map.proxy.MapProxy;

public abstract class AbstractSdkDao {

	protected DAO<UUID> dao;
	protected AsmModel asmModel;
	protected AsmUtils asmUtils;

	protected AbstractSdkDao(DAO<UUID> dao, AsmModel asmModel) {
		this.dao = dao;
		this.asmModel = asmModel;
		this.asmUtils = new AsmUtils(asmModel.getResourceSet());
	}

	protected EClass getEClass(String fqName) {
		EClass eClass = asmUtils.getClassByFQName(fqName).get();
		return eClass;
	}

	protected <T> T fromPayload(Class<T> resultClass, Payload payload) {
		return MapProxy.newInstance(resultClass, payload, false, "__identifier");
	}

	protected <T> Payload asPayload(T t) {
		Payload payload = Payload.asPayload(((MapHolder)t).toMap());
		return payload;
	}

	protected EReference getReference(EClass eClass, String referenceName) {
		EReference ref = eClass.getEAllReferences().stream().filter(r -> Objects.equals(r.getName(), referenceName)).findAny().get();
		return ref;
	}
}
