[%
  import "../../operations/sdk.eol";
  out.setContentType("Java");
%]

package [%= dto.getDtoDaoPackageName() %];

import java.util.UUID;
import java.util.function.BiFunction;
import java.util.ArrayList;

import hu.blackbelt.judo.dao.api.DAO;
import hu.blackbelt.judo.dao.api.Payload;
import hu.blackbelt.judo.meta.asm.runtime.AsmModel;
[% if (multiRelation) { %]import java.util.Collection;[%}%]

import [%= getModelPackageName() %].util.AbstractSdkDao;
import static [%= getModelPackageName() %].util.SdkUtil.*;
import [%= dto.getDtoTypeName() %];
import [%= relatedDto.getDtoTypeName() %];

[% var relatedType; if (not multiRelation) relatedType = relatedDto.getClassName(); else relatedType = "Collection<" + relatedDto.getClassName() + ">"; %]

public class [%= dto.getClassName() %]Create[%= relationName.firstToUpperCase() %] extends AbstractSdkDao implements BiFunction<[%= dto.getClassName() %], [%= relatedType %], [%= relatedType %]>{

	private final static String FQ_NAME = "[%= asmUtils.getClassifierFqName(dto) %]";
	
	@Override
	public [%= relatedType %] apply([%= dto.getClassName() %] object, [%= relatedType %] relatedObject) {
		[% if (multiRelation) { %]
				[%=relatedType %] result = new ArrayList<>();
			for ([%= relatedDto.getClassName() %] element : relatedObject) {
			Payload resultPayload = dao.createNavigationInstanceAt(object.get__identifier(), getReference(getEClass(FQ_NAME), "[%= relationName %]"), Payload.asPayload(asMap(element)));
			result.add(fromPayload([%= relatedDto.getClassName() %].class, resultPayload));
		}
		return result;
		[%} else {%]
		Payload resultPayload = dao.createNavigationInstanceAt(object.get__identifier(), getReference(getEClass(FQ_NAME), "[%= relationName %]"), Payload.asPayload(asMap(relatedObject)));
		return fromPayload([%= relatedDto.getClassName() %].class, resultPayload);
		[%}%]
	}

}
