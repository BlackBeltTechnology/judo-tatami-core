[%
  import "../../operations/sdk.eol";  
  out.setContentType("Java");
%]

[% 
    var dtoTypeName = getSdkPrefix() + dto.getDtoTypeName();
    var name = dto.getClassName() + "Dao";     
    
    var sdkUtil =  getInternalPrefix() + getModelPackageName() + ".util.SdkUtil";    
    
%]

package [%= getInternalPrefix() + dto.getClassifierPackageName() %];

/**
* {@inheritdoc}
*/
public class [%= name%]Impl extends [%= getInternalPrefix() + getModelPackageName() %].util.AbstractSdkDao implements [%= dtoTypeName %].[%= name %] {
    private final static String FQ_NAME = "[%= asmUtils.getClassifierFqName(dto) %]";

    /**
    * {@inheritdoc}
    */
    @Override
    public [%= dtoTypeName %] create([%= dtoTypeName %] data) {
        org.eclipse.emf.ecore.EClass eClass = getEClass(FQ_NAME);
        hu.blackbelt.judo.dao.api.Payload resultPayload = dao.create(eClass, hu.blackbelt.judo.dao.api.Payload.asPayload([%= sdkUtil %].asMap(data)), null);
        return [%= sdkUtil %].fromPayload([%= dtoTypeName %].class, resultPayload);
    }

    /**
    * {@inheritdoc}
    */
    @Override
    public void delete([%= dtoTypeName %] subject) {    
        dao.delete(getEClass(FQ_NAME), subject.get__identifier());
    }

    /**
    * {@inheritdoc}
    */
    @Override
    public java.util.Collection<[%= dtoTypeName %]> getAll() {
        java.util.List<hu.blackbelt.judo.dao.api.Payload> payloads = dao.getAllOf(getEClass(FQ_NAME));
        return payloads.stream().map(payload -> [%= sdkUtil %].fromPayload([%= dtoTypeName %].class, payload)).collect(java.util.stream.Collectors.toList());
    }

    /**
    * {@inheritdoc}
    */
    @Override
    public [%= dtoTypeName %] getById(java.util.UUID id) {
        hu.blackbelt.judo.dao.api.Payload payload = dao.getByIdentifier(getEClass(FQ_NAME), id).get();
        return [%= sdkUtil %].fromPayload([%= dtoTypeName %].class, payload);
    }

    /**
    * {@inheritdoc}
    */
    @Override
    public [%= dtoTypeName %] update([%= dtoTypeName %] data) {
        hu.blackbelt.judo.dao.api.Payload resultPayload = dao.update(getEClass(FQ_NAME), hu.blackbelt.judo.dao.api.Payload.asPayload([%= sdkUtil %].asMap(data)), null);
        return [%= sdkUtil %].fromPayload([%= dtoTypeName %].class, resultPayload);
    }
    
    [% for (rel in singleRelations) {%]
        [% var relatedDto = rel.getEReferenceType();
            var relatedType = getSdkPrefix() + relatedDto.getDtoTypeName();
         %]

    /**
    * {@inheritdoc}
    */
    @Override
    public [%= relatedType %] create[%= rel.name.firstToUpperCase() %]([%= dtoTypeName %] object, [%= relatedType %] relatedObject) {
        hu.blackbelt.judo.dao.api.Payload resultPayload = dao.createNavigationInstanceAt(object.get__identifier(), [%= sdkUtil %].getReference(getEClass(FQ_NAME), "[%= rel.name %]"), hu.blackbelt.judo.dao.api.Payload.asPayload([%= sdkUtil %].asMap(relatedObject)), null);
        return [%= sdkUtil %].fromPayload([%= relatedType %].class, resultPayload);
    }

    /**
    * {@inheritdoc}
    */
    @Override
			public [%= relatedType %] get[%= rel.name.firstToUpperCase() %]([%= dtoTypeName %] object) {
				org.eclipse.emf.ecore.EReference ref = [%= sdkUtil %].getReference(getEClass(FQ_NAME), "[%= rel.name %]");
				final java.util.List<hu.blackbelt.judo.dao.api.Payload> navigationResult = dao.getNavigationResultAt(object.get__identifier(), ref);
				if (navigationResult.isEmpty()) {
					return null;
				}
				return [%= sdkUtil %].fromPayload([%= relatedType %].class, navigationResult.get(0));
			}

    /**
    * {@inheritdoc}
    */
    @Override
    public void set[%= rel.name.firstToUpperCase() %]([%= dtoTypeName %] object, [%= relatedType %] relatedObject) {
        dao.setReference([%= sdkUtil %].getReference(getEClass(FQ_NAME), "[%= rel.name  %]"), object.get__identifier(), java.util.Arrays.asList(relatedObject.get__identifier()));
    }

    /**
    * {@inheritdoc}
    */
    @Override
    public void unset[%= rel.name.firstToUpperCase() %]([%= dtoTypeName %] object) {
        dao.unsetReference([%= sdkUtil %].getReference(getEClass(FQ_NAME), "[%= rel.name %]"), object.get__identifier());
    }

    [% } %]
    
    [% for (rel in multiRelations) {%]
        [% var relatedDto = rel.getEReferenceType();
            var relatedType = "java.util.Collection<" + getSdkPrefix() + relatedDto.getDtoTypeName() + ">";
            var singleRelatedType = getSdkPrefix() + relatedDto.getDtoTypeName();
        %]

    /**
    * {@inheritdoc}
    */
    @Override
    public [%= relatedType %] create[%= rel.name.firstToUpperCase() %]([%= dtoTypeName %] object, [%= relatedType %] relatedObjects) {
        [%=relatedType %] result = new java.util.ArrayList<>();
        for ([%= singleRelatedType %] element : relatedObjects) {
            hu.blackbelt.judo.dao.api.Payload resultPayload = dao.createNavigationInstanceAt(object.get__identifier(), [%= sdkUtil %].getReference(getEClass(FQ_NAME), "[%= rel.name %]"), hu.blackbelt.judo.dao.api.Payload.asPayload([%= sdkUtil %].asMap(element)), null);
            result.add([%= sdkUtil %].fromPayload([%= singleRelatedType %].class, resultPayload));
        }
    return result;
    }

    /**
    * {@inheritdoc}
    */
    @Override
    public [%= relatedType %] get[%= rel.name.firstToUpperCase() %]([%= dtoTypeName %] object) {
        org.eclipse.emf.ecore.EReference ref = [%= sdkUtil %].getReference(getEClass(FQ_NAME), "[%= rel.name %]");
        java.util.Collection<hu.blackbelt.judo.dao.api.Payload> payloads = dao.getNavigationResultAt(object.get__identifier(), ref);
        return payloads.stream().map(payload -> [%= sdkUtil %].fromPayload([%= singleRelatedType %].class, payload)).collect(java.util.stream.Collectors.toList());
    }

    /**
    * {@inheritdoc}
    */
    @Override
    public void remove[%= rel.name.firstToUpperCase() %]([%= dtoTypeName %] object, [%= relatedType %] relatedObjects) {
    dao.removeReferences([%= sdkUtil %].getReference(getEClass(FQ_NAME), "[%= rel.name %]"), object.get__identifier(), relatedObjects.stream().map(relatedObject -> relatedObject.get__identifier()).collect(java.util.stream.Collectors.toList()));
    }

    /**
    * {@inheritdoc}
    */
    @Override
    public void add[%= rel.name.firstToUpperCase() %]([%= dtoTypeName %] object, [%= relatedType %] relatedObjects) {
        dao.addReferences([%= sdkUtil %].getReference(getEClass(FQ_NAME), "[%= rel.name %]"), object.get__identifier(), relatedObjects.stream().map(relatedObject -> relatedObject.get__identifier()).collect(java.util.stream.Collectors.toList()));
    }
    
    [% } %]
        
}