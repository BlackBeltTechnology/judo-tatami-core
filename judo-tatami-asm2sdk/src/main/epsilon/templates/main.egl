[%
import "../operations/sdk.eol";

var outputJavaClasses = new Set();
var outputScrXmls = new Set();

executionContext.getContext().put("outputJavaClasses", outputJavaClasses);
executionContext.getContext().put("outputScrXmls", outputScrXmls);

outputJavaClasses.add(genUtil("AbstractSdkDao"));
outputJavaClasses.add(genUtil("SdkUtil"));

for (dto in getAllDTOs()) {
    //DTO interface
    genDtoInterface(dto);
    outputJavaClasses.add(dto.getDtoJavaFileName());
    //DTO builder
    genDtoBuilder(dto);
    outputJavaClasses.add(dto.getDtoBuilderJavaFileName());
    
    var daoInterfaces = genDaoInterfaces(dto);
    for (daoInterface in daoInterfaces) {
    	if (daoInterface.endsWith(".java")) {
    		outputJavaClasses.add(daoInterface);
    	} else if (daoInterface.endsWith(".xml")){
    		outputScrXmls.add(daoInterface);
    	}    	
	}
    
    var operations = asmUtils.getAllOperationDeclarations(dto, true);
    for (op in operations) {
    	var generatedFiles = genOperationInterface(dto, op);
    	for (generatedFile in generatedFiles) {
    	    	outputJavaClasses.add(generatedFile);
	   	}
    	var generatedXmls = genOperationScrXmls(dto, op);
    	for (generatedXml in generatedXmls) {
    		outputScrXmls.add(generatedXml);
    	}
	}
}

for (dto in getAllEntities()) {
    var operations = asmUtils.getAllOperationDeclarations(dto, true);
    for (op in operations) {
    	var generatedFiles = genOperationInterface(dto, op);
    	for (generatedFile in generatedFiles) {
    	    	outputJavaClasses.add(generatedFile);
	   	}
    	var generatedXmls = genOperationScrXmls(dto, op);
    	for (generatedXml in generatedXmls) {
    		outputScrXmls.add(generatedXml);
    	}
	}
}

%]
