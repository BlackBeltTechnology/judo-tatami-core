[%
import "../operations/sdk.eol";

var outputJavaClasses = new Set();
var outputScrXmls = new Set();

executionContext.getContext().put("outputJavaClasses", outputJavaClasses);
executionContext.getContext().put("outputScrXmls", outputScrXmls);

outputJavaClasses.add(genUtil("AbstractSdkDao"));
outputJavaClasses.add(genUtil("SdkUtil"));

for (dto in getAllDTOs()) {
    //DTO interface
    outputJavaClasses.add(genDtoInterface(dto));
    
    if (asmUtils.isMappedTransferObjectType(dto)) {
	    var daoInterfaces = genDaoInterfaces(dto);
	    for (daoInterface in daoInterfaces) {
	    	if (daoInterface.endsWith(".java")) {
	    		outputJavaClasses.add(daoInterface);
	    	} else if (daoInterface.endsWith(".xml")){
	    		outputScrXmls.add(daoInterface);
	    	}    	
		}
	}
    
    var operations = asmUtils.getAllOperationDeclarations(dto, true).select(op | not asmUtils.getBehaviour(op).isPresent());
	var generatedFiles = genOperationInterfaces(dto, operations);
	for (generatedFile in generatedFiles) {
	    	outputJavaClasses.add(generatedFile);
   	}
	var generatedXmls = genOperationScrXmls(dto, operations);
	for (generatedXml in generatedXmls) {
		outputScrXmls.add(generatedXml);
	}
}

for (dto in getAllEntities()) {
    var operations = asmUtils.getAllOperationDeclarations(dto, true).select(op | not asmUtils.getBehaviour(op).isPresent());
   	var generatedFiles = genOperationInterfaces(dto, operations);
	for (generatedFile in generatedFiles) {
    	outputJavaClasses.add(generatedFile);
   	}
	var generatedXmls = genOperationScrXmls(dto, operations);
	for (generatedXml in generatedXmls) {
		outputScrXmls.add(generatedXml);
	}
}

%]
