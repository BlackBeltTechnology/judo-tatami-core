[%
import "../operations/asm/_importAll.eol";
import "../operations/asm/accesspoint/_importAll.eol";
import "../operations/jaxrs.eol";

executionContext.getContext().put("outputJavaClasses", new Set());

for (dto in getAllMappedTransferObjectTypes().collectAllReferenceTypeRecursively()) {
    genDto(dto);
	executionContext.getContext().get("outputJavaClasses").add(dto.getDtoFileName());
}

for (ap in getAllAccessPoints()) {
    
    var apServiceInstances : Map = new Map();

	// Unbound service
    if (ap.getExposedServices().size() > 0) {
		genUnboundService(ap, ap.getExposedServices());
		executionContext.getContext().get("outputJavaClasses").add(ap.getUnboundServiceFileName());
		apServiceInstances.put("unboundService", ap.getUnboundServicePackageName() + "." + ap.getUnboundServiceClassName());
	}	
	
	// Get all exposed graph bound services
	for (mto in ap.getExposedGraphs()
		.collect(eg | eg.getExposedMappedTransferObjectTypes().collect(t | t.getNestedClasses()).flatten().select(og | og.interface).asSet())
		.flatten().asSet()
	) {
		genExposedMappedTransferObject(ap, mto);
		executionContext.getContext().get("outputJavaClasses").add(mto.getExposedMappedTransferObjectFileName(ap));
		apServiceInstances.put((mto.getExposedMappedTransferObjectPackageName(ap) + "." + mto.getExposedMappedTransferObjectClassName()).replaceAll("\\.", "_"),
			mto.getExposedMappedTransferObjectPackageName(ap) + "." + mto.getExposedMappedTransferObjectClassName());		
    }

    // Generate ApplicatoionConfigs
    genApplication(ap, apServiceInstances);
	executionContext.getContext().get("outputJavaClasses").add(ap.getApplicationConfigFileName());

}
%]