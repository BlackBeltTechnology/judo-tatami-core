[%
import "../operations/jaxrs.eol";

var outputJavaClasses = new Set();
var outputScrXmls = new Set();

executionContext.getContext().put("outputJavaClasses", outputJavaClasses);
executionContext.getContext().put("outputScrXmls", outputScrXmls);

for (dto in ASM!EClass.all.select(c | c.eAnnotations.exists(a | asmUtils.getResolvedExposedBy(a).isPresent()) and (asmUtils.getMappedEntityType(c).isPresent() or (not asmUtils.getMappedEntityType(c).isPresent() and not asmUtils.isEntityType(c))))) {
    genDto(dto);
	outputJavaClasses.add(dto.getDtoJavaFileName());
}

for (ap in asmUtils.getAllAccessPoints()) {

    var apServiceInstances : Map = new Map();

    var exposedServices = asmUtils.getExposedServicesOfAccessPoint(ap);
    var boundOperations = ASM!EOperation.all.select(op | asmUtils.isBound(op) and asmUtils.getAccessPointsOfOperation(op).contains(ap));
	var boundOperationClasses = boundOperations.collect(op | op.eContainer).asSet();
    var exposedServiceGroups = exposedServices.collect(s | s.eContainer).asSet();
    
    for (exposed in boundOperationClasses.includingAll(exposedServiceGroups).asSet()) {
        log.debug("Exposed class: " + asmUtils.getClassifierFQName(exposed));
        
        var _unboundOperations = exposedServices.select(op | op.eContainer == exposed);
        var _boundOperations = boundOperations.select(op | op.eContainer == exposed);
        
        var t = TemplateFactory.load("RestService.java.egl");
		t.populate("className", exposed.name.normalizeName());
		t.populate("packagePath", exposed.getExposedPackageName(ap));
		t.populate("operations", _boundOperations.includingAll(_unboundOperations));
		t.populate("restPath", "/" + asmUtils.getPackageFQName(exposed.ePackage).toJAXRSPath() + "/" + exposed.name.normalizeName().toJAXRSPath());
		t.populate("fullyQualifiedOperation", false);
	
		t.generate(exposed.getExposedJavaFileName(ap));
		t.reset();
	
		var t = TemplateFactory.load("RestService.scr.xml.egl");
		t.populate("className", exposed.name.normalizeName());
		t.populate("packagePath", exposed.getExposedPackageName(ap));
		t.generate(exposed.getExposedScrXmlFileName(ap));
		t.reset();
        
        outputJavaClasses.add(exposed.getExposedJavaFileName(ap));
        outputScrXmls.add(exposed.getExposedScrXmlFileName(ap));
        
        apServiceInstances.put((exposed.getExposedPackageName(ap) + "." + exposed.name).normalizeName().replaceAll("\\.", "_"),
            (exposed.getExposedPackageName(ap) + "." + exposed.name).normalizeName());
    }
    
    // Generate ApplicationConfigs
    genApplication(ap, apServiceInstances);
	outputJavaClasses.add(ap.getApplicationConfigJavaFileName());
	outputScrXmls.add(ap.getApplicationConfigScrXmlFileName());
}
%]
