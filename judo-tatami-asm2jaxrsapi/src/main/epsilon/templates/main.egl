[%
import "../operations/jaxrs.eol";

var outputJavaClasses = new Set();
var outputScrXmls = new Set();

executionContext.getContext().put("outputJavaClasses", outputJavaClasses);
executionContext.getContext().put("outputScrXmls", outputScrXmls);

for (dto in getAllDTOs()) {
	genDto(dto);
	outputJavaClasses.add(dto.getDtoJavaFileName());
}

for (ap in asmUtils.getAllAccessPoints()) {

    var apServiceInstances : Map = new Map();

    var exposedServices = asmUtils.getExposedServicesOfAccessPoint(ap);

	// Unbound service
    if (exposedServices.size() > 0) {
		genUnboundService(ap, exposedServices);
		outputJavaClasses.add(ap.getUnboundServiceJavaFileName());
		outputScrXmls.add(ap.getUnboundServiceScrXmlFileName());
		apServiceInstances.put("unboundService", ap.getUnboundServicePackageName() + "." + ap.getUnboundServiceClassName());
    }

    // Bound service
    for (
    	biog in asmUtils.getBuiltInOperationGroupsOfAccessPoint(ap)
    	) {
		genExposedMappedTransferObject(biog, ap);
		outputJavaClasses.add(biog.getExposedMappedTransferObjectJavaFileName(ap));
		outputScrXmls.add(biog.getExposedMappedTransferObjectScrXmlFileName(ap));
		apServiceInstances.put((biog.getExposedMappedTransferObjectPackageName(ap) + "." + biog.getExposedMappedTransferObjectClassName()).replaceAll("\\.", "_"),
			biog.getExposedMappedTransferObjectPackageName(ap) + "." + biog.getExposedMappedTransferObjectClassName());		
    }
    
    // Generate ApplicationConfigs
    genApplication(ap, apServiceInstances);
	outputJavaClasses.add(ap.getApplicationConfigJavaFileName());
	outputScrXmls.add(ap.getApplicationConfigScrXmlFileName());
}
%]
