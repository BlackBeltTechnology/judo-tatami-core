[%
import "../operations/jaxrs.eol";

var outputJavaClasses = new Set();
var outputScrXmls = new Set();

executionContext.getContext().put("outputJavaClasses", outputJavaClasses);
executionContext.getContext().put("outputScrXmls", outputScrXmls);


var apServiceInstances : Map = new Map();
for (clazz in ASM!EOperation.all.select(op | not asmUtils.getActorTypesOfOperation(op).isEmpty()).collect(op | op.eContainingClass).asSet()) {
    var operationsOfClazz = clazz.eOperations.select(op | not asmUtils.getActorTypesOfOperation(op).isEmpty());

    log.debug("Exposed class: " + asmUtils.getClassifierFQName(clazz));

    var t = TemplateFactory.load("RestService.java.egl");
    t.populate("className", clazz.name.normalizeName());
    t.populate("packagePath", clazz.getExposedPackageName());
    t.populate("operations", operationsOfClazz);
    t.populate("restPath", "/");
    t.populate("fullyQualifiedOperation", true);

    t.generate(clazz.getExposedJavaFileName());
    t.reset();

    var t = TemplateFactory.load("RestService.scr.xml.egl");
    t.populate("modelName", asmUtils.getModel().get().getName());
    t.populate("className", clazz.name.normalizeName());
    t.populate("packagePath", clazz.getExposedPackageName());
    t.generate(clazz.getExposedScrXmlFileName());
    t.reset();

    outputJavaClasses.add(clazz.getExposedJavaFileName());
    outputScrXmls.add(clazz.getExposedScrXmlFileName());

    apServiceInstances.put((clazz.getExposedPackageName() + "." + clazz.name).normalizeName().replaceAll("\\.", "_"),
                (clazz.getExposedPackageName() + "." + clazz.name).normalizeName());
}

// Generate ApplicationConfigs
genApplication(apServiceInstances);
outputJavaClasses.add(getApplicationConfigJavaFileName());
outputScrXmls.add(getApplicationConfigScrXmlFileName());

%]
