[%
  import "../operations/jaxrs.eol";
  out.setContentType("Java");
%]
package [%= packagePath %];

import java.util.Optional;
import java.util.HashMap;
import java.util.Map;
import java.util.Collection;
import java.util.Map;
import java.util.stream.Collectors;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Consumes;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import hu.blackbelt.judo.dispatcher.api.Dispatcher;

@Path("[%= restPath %]")
public class [%= className %] {

    Optional<Dispatcher> __dispatcher = Optional.empty();

    public void __bindDispatcher(Dispatcher dispatcher) {
        this.__dispatcher = Optional.of(dispatcher);
    }

    public void __unbindDispatcher(Dispatcher dispatcher) {
        this.__dispatcher = Optional.empty();
    }
[% for (op in operations) { %]

    [% if (asmUtils.isGetMethod(op)) { %]
	@GET
	@Produces ( "application/json" )
    [% } else { %]
	@POST
	@Produces ( "application/json" )
	@Consumes ( "application/json" )
	[% } %]
	@Path("/[% if (fullyQualifiedOperation) { %][%= op.toJAXRSPath() %][% } else { %][%= op.name %][% } %]")
    public Response [%= op.name %](
        @Context SecurityContext securityContext[%
        if (asmUtils.isBound(op)) { %]
,
        @HeaderParam("__identifier") java.util.UUID __identifier[%
        } %][% for (p in op.eParameters) {
          if (p.many) {%]
,
        Collection<[%= p.eType.getDtoTypeName() %]>[%
            } else {
            %]
,
        [%= p.eType.getDtoTypeName() %][%
            }%] [%= asmUtils.safeName(p.name.firstToLowerCase()) %][%
          } %]) {
    	if (!__dispatcher.isPresent()) {
        	return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
    	}
		Map<String, Object> parameters = new HashMap();
		[% if (asmUtils.isBound(op)) { %] parameters.put("__identifier", __identifier); [% } %]
        if (securityContext != null) {
            parameters.put("__principal", securityContext.getUserPrincipal());
        }
        [% for (p in op.eParameters) { %]
        if ([%= asmUtils.safeName(p.name.firstToLowerCase()) %] != null) {
            [% if (p.many) { %]
            parameters.put("[%= p.name %]", [%= asmUtils.safeName(p.name.firstToLowerCase()) %].stream().map(e -> e.toMap()).collect(Collectors.toList()));
            [% } else { %]
            parameters.put("[%= p.name %]", [%= asmUtils.safeName(p.name.firstToLowerCase()) %].toMap());
            [% } %]
        }
        [% } %]

        [% if (op.eType.isUndefined()) {%]
        __dispatcher.get().callOperation("[%= asmUtils.getOperationFQName(op) %]", parameters);
        return Response.status(Response.Status.OK).build();
        [% } else if (op.many) { %]
        Object output = __dispatcher.get().callOperation("[%= asmUtils.getOperationFQName(op) %]", parameters).get("[%= asmUtils.getOutputParameterName(op).get() %]");
    	return output == null ? Response.ok().build() : Response.ok(
    			((Collection<Map<String, Object>>) output).stream()
    			.map(p -> [%= op.eType.getDtoTypeName() %].fromMap(p))
    			.collect(Collectors.toList()))
    			.build();
        [% } else { %]
        return Response.ok([%= op.eType.getDtoTypeName() %].fromMap((Map<String, Object>) ((Map<String, Object>) __dispatcher.get().callOperation("[%= asmUtils.getOperationFQName(op) %]", parameters)).get("[%= asmUtils.getOutputParameterName(op).get() %]"))).build();
        [% } %]
    }
[% } %]
}
