[%
  import "../operations/jaxrs.eol";
  out.setContentType("Java");
%]
package [%= packagePath %];

import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Consumes;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.SecurityContext;
import hu.blackbelt.judo.dispatcher.api.Dispatcher;

@Path("[%= restPath %]")
public class [%= className %] {

    Optional<Dispatcher> __dispatcher = Optional.empty();

    public void __bindDispatcher(Dispatcher dispatcher) {
        this.__dispatcher = Optional.of(dispatcher);
    }

    public void __unbindDispatcher(Dispatcher dispatcher) {
        this.__dispatcher = Optional.empty();
    }
[% for (op in operations) { %]

    [% if (asmUtils.isStateless(op) and op.eParameters.isEmpty) { %]
	@GET
	@Produces ( "application/json" )
    [% } else { %]
	@POST
	@Produces ( "application/json" )
	@Consumes ( "application/json" )
	[% } %]
	@Path("/[% if (fullyQualifiedOperation) { %][%= op.toJAXRSPath() %][% } else { %][%= op.name %][% } %]")
    public Response [%= op.name %](
        @Context SecurityContext securityContext[%
        if (asmUtils.isBound(op)) { %]
,
        @HeaderParam("__signedIdentifier") java.lang.String __signedIdentifier[%
        } %][% for (p in op.eParameters) {
          if (p.many) {%]
,
        List<Map<String, Object>>[%
            } else {
            %]
,
        Map<String, Object>[%
            }%] [%= asmUtils.safeName(p.name.firstToLowerCase()) %][%
          } %]) {
    	if (!__dispatcher.isPresent()) {
        	return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
    	}
		Map<String, Object> parameters = new HashMap();
        parameters.put("__exposed", Boolean.TRUE);
		[% if (asmUtils.isBound(op)) { %] parameters.put("__signedIdentifier", __signedIdentifier); [% } %]
        if (securityContext != null) {
            parameters.put("__principal", securityContext.getUserPrincipal());
        }
        [% for (p in op.eParameters) { %]
        if ([%= asmUtils.safeName(p.name.firstToLowerCase()) %] != null) {
            parameters.put("[%= p.name %]", [%= asmUtils.safeName(p.name.firstToLowerCase()) %]);
        }
        [% } %]

        Map<String, Object> result = __dispatcher.get().callOperation("[%= asmUtils.getOperationFQName(op) %]", parameters);
        [% if (op.eType.isUndefined()) {%]
        Response.ResponseBuilder responseBuilder = Response.status(Response.Status.NO_CONTENT);
        [% } else { %]
        Response.ResponseBuilder responseBuilder = result.containsKey("[%= asmUtils.getOutputParameterName(op).get() %]") ? Response.ok(result.get("[%= asmUtils.getOutputParameterName(op).get() %]")) : Response.ok();
        [% } %]
        if (result.containsKey(Dispatcher.HEADERS_KEY)) {
            ((Map<String, Object>) result.get(Dispatcher.HEADERS_KEY)).forEach((k, v) -> responseBuilder.header(k, v));
        }
        return responseBuilder.build();
    }
[% } %]
}
