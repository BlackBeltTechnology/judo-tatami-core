[%
  import "../operations/jaxrs.eol";
  out.setContentType("Java");
%]
package [%= packagePath %];

import java.util.Optional;
import java.util.HashMap;
import java.util.Map;
import java.util.Collection;
import java.util.Map;
import java.util.stream.Collectors;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Consumes;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Response;
import hu.blackbelt.judo.tatami.core.Dispatcher;

@Path("[%= restPath %]")
public class [%= className %] {

    Optional<Dispatcher> __dispatcher = Optional.empty();

    public void __bindDispatcher(Dispatcher dispatcher) {
        this.__dispatcher = Optional.of(dispatcher);
    }

    public void __unbindDispatcher(Dispatcher dispatcher) {
        this.__dispatcher = Optional.empty();
    }
[% for (op in operations) { %]

    [% if (asmUtils.isStateless(op)) { %]
	@GET
	@Produces ( "application/json" )
    [% } else { %]
	@POST
	@Produces ( "application/json" )
	@Consumes ( "application/json" )
	[% } %]
	@Path("/[% if (fullyQualifiedOperation) { %][%= op.toJAXRSPath() %][% } else { %][%= op.name %][% } %]")
    public Response [% if (fullyQualifiedOperation) { %][%= (asmUtils.getPackageFQName(op.eContainingClass.ePackage) + "." + op.name).replaceAll("\\.", "__") %][% } else { %][%= op.name %][% } %]([% if(asmUtils.isBound(op)) { %]@HeaderParam("__identifier") java.util.UUID __identifier[% if(not op.eParameters.isEmpty()) { %], [% } %][% } %] [% for (p in op.eParameters) { if (p.many) { %]Collection<[%= p.eType.getDtoTypeName() %]>[% } else { %][%= p.eType.getDtoTypeName() %][% } %] [%= asmUtils.safeName(p.name.firstToLowerCase()) %][% if (hasMore) { %], [% } %][% } %]) {
		if (!__dispatcher.isPresent()) {
        	return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();
    	}
		Map<String, Object> parameters = new HashMap();
		[% if(asmUtils.isBound(op)) { %] parameters.put("__identifier", __identifier); [% } %]
        [% for (p in op.eParameters) { %]
		parameters.put("[%= p.name %]", [%= asmUtils.safeName(p.name.firstToLowerCase()) %][% if (p.many) { %].stream().map(e -> e[% } %].toMap()[% if (p.many) { %])[% } %]);[% } %]

        [% if (op.eType.isUndefined()) {%]
        __dispatcher.get().callOperation("[%= asmUtils.getOperationFQName(op) %]", parameters);
        return Response.status(Response.Status.OK).build();
        [% } else if (op.many) { %]
        Object output = __dispatcher.get().callOperation("[%= asmUtils.getOperationFQName(op) %]", parameters).get("__output");
    	return output == null ? Response.ok().build() : Response.ok(
    			((Collection<Map<String, Object>>) output).stream()
    			.map(p -> [%= op.eType.getDtoTypeName() %].fromMap(p))
    			.collect(Collectors.toList()))
    			.build();
        [% } else { %]
        return Response.ok([%= op.eType.getDtoTypeName() %].fromMap((Map<String, Object>) ((Map<String, Object>) __dispatcher.get().callOperation("[%= asmUtils.getOperationFQName(op) %]", parameters)).get("__output"))).build();
        [% } %]
    }
[% } %]
}
