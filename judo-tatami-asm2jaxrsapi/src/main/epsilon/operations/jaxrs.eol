@cached
operation String normalizeName() : String {
	return self.replace("[__]", "\\$");
}

@cached
operation String toJAXRSPath() : String {
    return self.replace("\\.__UnboundServices", "").replace("[__#\\.]", "/").replace("[^0-9a-zA-Z_/]", "/").replace("\\$", "/");
}

@cached
operation ASM!EOperation getFullOperationMethodName() : String {
	return (asmUtils.getPackageFQName(self.eContainingClass.ePackage) + "." + self.name).replaceAll("\\.", "__");
}

@cached
operation ASM!EOperation getFullOperationPath() : String {
	return (asmUtils.getPackageFQName(self.eContainingClass.ePackage) + "." + self.name).replaceAll("\\.", "/");
}

/*
 DTO
 */
// new DtoCollector
@cached
operation getAllDTOs(): Collection {
	return ASM!EClass.all.select(class | asmUtils.getExtensionAnnotationListByName(class, "exposedBy").notEmpty() and (not asmUtils.isEntityType(class) or asmUtils.isMappedTransferObjectType(class)));
}

operation genDto(dto : ASM!EClass) {
	var t = TemplateFactory.load("Dto.java.egl");
	t.populate("dto", dto);
	t.generate(dto.getDtoJavaFileName());
	t.reset();
}

/* old DtoCollector
@cached
operation ASM!EClass collectAllReferenceType() : Set {
	var ret : new Set();
	for (r in self.eAllReferences) {
		ret.add(r.eReferenceType);
	}
	return ret;
}

@cached
operation Collection collectAllReferenceType() : Set {
	var ret : new Set();
	for (c : ASM!EClass in self) {
		ret.add(c);
		ret.addAll(c.collectAllReferenceType());
	}
	return ret;
}

@cached
operation Collection collectAllReferenceTypeRecursively() : Set {
	var ret : new Set();
	ret.addAll(self);

	var sizeDiffers = true;
	while (sizeDiffers) {
	    var curSize = ret.size();
		ret = ret.collectAllReferenceType();
		sizeDiffers = (curSize <> ret.size());
	}
	return ret;
}
*/

@cached
operation ASM!EClass getDtoPackageName() : String {
	return "rest." + asmUtils.getPackageFQName(self.ePackage);
}

@cached
operation ASM!EClass getDtoTypeName() : String {
	return self.getDtoPackageName() + "." + self.name.normalizeName();
}

@cached
operation ASM!EClass idType() : String {
	return "java.util.UUID";
}

@cached
operation ASM!EClass getDtoJavaFileName() : String {
	return self.getDtoPackageName().replaceAll("\\.", "/") + "/" + self.name.normalizeName() + ".java";
}

operation String safeName() : String {
	if (self == "class") {
		return "clazz";
	} else if (Set{
	    "identifier",
		"abstract", "assert", "boolean", "break", "byte", "case", "catch", "char",
		"continue", "default", "do", "double", "else", "enum", "exports", "extends",
		"final", "finally", "float", "for", "if", "implements", "import", "instanceof",
		 "long", "module", "native", "new", "package", "private", "protected",
		 "public", "requires", "return", "short", "static", "strictfp", "super",
		 "switch", "synchronized", "this", "throw", "throws", "transitent", "try",
		 "void", "volatile", "while", "true", "null", "false", "var", "const", "goto" }.contains(self)) {
		return self + "_";
	} else if (self == "Class") {
		return "Clazz";
	} else {
		return self;
	}
}

operation ASM!ENamedElement setterName() : String {
	return "set" + self.name.firstToUpperCase().safeName();
}

operation ASM!ENamedElement getterName() : String {
	return "get" + self.name.firstToUpperCase().safeName();
}

@cached
operation ASM!EParameter getTypeDefinition() : String {
	if (self.many) {
		return "List<" + self.eType.instanceClass.name + ">";
	} else if (self.eType.instanceClass.isDefined()) {
		return self.eType.instanceClass.name;
	} else {
		return "Integer";
	}
}

@cached
operation ASM!EAttribute getTypeDefinition() : String {

    log.info("Type: " + self.name + " - " + self.eType);

	if (self.upperBound == -1) {
		return "List<" + self.eType.instanceClass.name + ">";
	} else if (self.eType.instanceClass.isDefined()) {
		return self.eType.instanceClass.name;
	} else {
		return "Integer";
	}
}

@cached
operation ASM!EReference getTypeDefinition() : String {
	if (self.upperBound == -1) {
		return "List<" + self.getBareTypeDefinition() + ">";
	} else {
		return self.getBareTypeDefinition();
	}
}

@cached
operation ASM!EReference getBareTypeDefinition() : String {
	return self.eReferenceType.getDtoPackageName() + "." + self.eReferenceType.name;
}

/*
 Application Config
 */
operation genApplication(ap : ASM!EClass, serviceInstances : Map) {
	var t = TemplateFactory.load("ApplicationConfig.java.egl");
	t.populate("ap", ap);
	t.populate("className", "ApplicationConfig");
	t.populate("packagePath", ap.getApplicationPackageName());
	t.populate("restPath", "/" + asmUtils.getClassifierFQName(ap).toJAXRSPath());
	t.populate("serviceInstances", serviceInstances);
	t.generate(ap.getApplicationConfigJavaFileName());
	t.reset();

	var t = TemplateFactory.load("ApplicationConfig.scr.xml.egl");
	t.populate("className", "ApplicationConfig");
	t.populate("packagePath", ap.getApplicationPackageName());
	t.populate("serviceInstances", serviceInstances);
	t.generate(ap.getApplicationConfigScrXmlFileName());
	t.reset();
}

@cached
operation ASM!EClass getApplicationPackageName() : String {
	return "rest." + asmUtils.getClassifierFQName(self);
}

@cached
operation ASM!EClass getApplicationConfigJavaFileName() : String {
	return self.getApplicationPackageName().replaceAll("\\.", "/") + "/ApplicationConfig.java";
}

@cached
operation ASM!EClass getApplicationConfigScrXmlFileName() : String {
	return "OSGI-INF/" + self.getApplicationPackageName() + ".ApplicationConfig.xml";
}

/*
 Unbound Service
 */
operation genUnboundService(ap : ASM!EClass, operations : Collection) {
	var t = TemplateFactory.load("RestService.java.egl");
	t.populate("className", ap.getUnboundServiceClassName());
	t.populate("packagePath", ap.getUnboundServicePackageName());
	t.populate("operations", operations);
	t.populate("restPath", "/");
	t.populate("fullyQualifiedOperation", true);

	t.generate(ap.getUnboundServiceJavaFileName());
	t.reset();

	var t = TemplateFactory.load("RestService.scr.xml.egl");
	t.populate("className", ap.getUnboundServiceClassName());
	t.populate("packagePath", ap.getUnboundServicePackageName());
	t.generate(ap.getUnboundServiceScrXmlFileName());
	t.reset();
}

operation ASM!EClass getUnboundServicePackageName() : String {
	return "rest." + asmUtils.getClassifierFQName(self);
}

operation ASM!EClass getUnboundServiceClassName() : String {
	return "UnboundServices";
}

operation ASM!EClass getUnboundServiceJavaFileName() : String {
	return self.getUnboundServicePackageName().replaceAll("\\.", "/") + "/" + self.getUnboundServiceClassName() + ".java";
}

operation ASM!EClass getUnboundServiceScrXmlFileName() : String {
	return "OSGI-INF/" + self.getUnboundServicePackageName() + "." + self.getUnboundServiceClassName() + ".xml";
}

/*
 Exposed mapped transfer object
 */
operation genExposedMappedTransferObject(biog : ASM!EClass, ap : ASM!EClass) {
	var t = TemplateFactory.load("RestService.java.egl");
	t.populate("className", biog.getExposedMappedTransferObjectClassName());
	t.populate("packagePath", biog.getExposedMappedTransferObjectPackageName(ap));
	t.populate("operations", asmUtils.getAllOperationsOfBuiltInOperationGroupExposedByAccessPoint(biog, ap));
	t.populate("restPath", "/" + asmUtils.getPackageFQName(biog.ePackage).toJAXRSPath() + "/" + biog.getExposedMappedTransferObjectClassName().toJAXRSPath());
	t.populate("fullyQualifiedOperation", false);

	t.generate(biog.getExposedMappedTransferObjectJavaFileName(ap));
	t.reset();

	var t = TemplateFactory.load("RestService.scr.xml.egl");
	t.populate("className", biog.getExposedMappedTransferObjectClassName());
	t.populate("packagePath", biog.getExposedMappedTransferObjectPackageName(ap));
	t.generate(biog.getExposedMappedTransferObjectScrXmlFileName(ap));
	t.reset();
}

/* moved into AsmUtils
operation ASM!EClass getAllOperationsOfBuiltInOperationGroupExposedByAccessPoint(): Collection {
	return ASM!EClass.all.select(eclass | asmUtils.isBuiltInOperationGroup(eclass) and eclass.getEAllOperations()
 				.exists(op | asmUtils.getExtensionAnnotationListByName(op, "exposedGraph")
 							.exists(annot | asmUtils.getAccessPointOfGraph(asmUtils.getResolvedExposedGraph(annot).get()).get().equals(self))
 				)
		);
}
*/

/* moved into AsmUtils
operation ASM!EClass getAllExposedOperationsOfMappedTransferObjectType(ap : ASM!EClass): Collection {
 return self.getEAllOperations().select(op | asmUtils.getExtensionAnnotationListByName(op, "exposedBy").exists(annot | asmUtils.getResolvedExposedBy(annot).get().equals(ap)));
}*/

operation ASM!EClass getExposedMappedTransferObjectPackageName(ap: ASM!EClass) : String {
	return "rest." + asmUtils.getClassifierFQName(ap) + "." + asmUtils.getPackageFQName(self.ePackage);
}

@cached
operation ASM!EClass getExposedMappedTransferObjectClassName() : String {
	/*
	if (self.name.contains("__")) {
		return self.name.split("__").first().firstToUpperCase() + "$" + self.name.split("__").second();
	} else {
		return self.name;
	}
	*/
	return self.name.normalizeName(); // .name.replace("[__]", "\\$");
}

operation ASM!EClass getExposedMappedTransferObjectJavaFileName(ap: ASM!EClass) : String {
	return self.getExposedMappedTransferObjectPackageName(ap)
		.replaceAll("\\.", "/") + "/" + self.getExposedMappedTransferObjectClassName() + ".java";
}

operation ASM!EClass getExposedMappedTransferObjectScrXmlFileName(ap: ASM!EClass) : String {
	return "OSGI-INF/" + self.getExposedMappedTransferObjectPackageName(ap) + "." + self.getExposedMappedTransferObjectClassName() + ".xml";
}
