@cached
operation String normalizeName() : String {
	return self.replace("__", "\\$");
}

@cached
operation ASM!EOperation toJAXRSPath() : String {
    var path = asmUtils.getOperationFQName(self);

    var behaviour = asmUtils.getBehaviour(self);
    if (behaviour.present) {
        var owner = asmUtils.getOwnerOfOperationWithDefaultBehaviour(self);
        var relation = asmUtils.getRelationOfOperationWithDefaultBehaviour(self);

        switch (behaviour.get().toString()) {
            case "GET": path = asmUtils.getReferenceFQName(owner.get) + "/get";
            case "CREATE": path = asmUtils.getReferenceFQName(owner.get) + "/create";
            case "UPDATE": path = asmUtils.getReferenceFQName(owner.get) + "/update";
            case "DELETE": path = asmUtils.getReferenceFQName(owner.get) + "/delete";
            case "SET": path = asmUtils.getReferenceFQName(owner.get) + "/" + relation.get().name + "/set";
            case "UNSET": path = asmUtils.getReferenceFQName(owner.get) + "/" + relation.get().name + "/unset";
            case "ADD_ALL": path = asmUtils.getReferenceFQName(owner.get) + "/" + relation.get().name + "/add";
            case "REMOVE_ALL": path = asmUtils.getReferenceFQName(owner.get) + "/" + relation.get().name + "/remove";
            case "GET_RANGE": path = asmUtils.getOperationFQName(owner.get.eOperation) + "/" + owner.get.name + "/" + relation.get().name + "/remove";
            case "GET_TEMPLATE": path = asmUtils.getClassifierFQName(owner.get) + "/template";
        }
    }

    return path.replaceFirst("^" + asmUtils.getModel().get().name + "\\.", "").replace("[#\\.]", "/").replace("[^0-9a-zA-Z_/]", "_");
}

/*
 DTO
 */

operation genDto(dto : ASM!EClass) {
	var t = TemplateFactory.load("Dto.java.egl");
	t.populate("dto", dto);
	t.generate(dto.getDtoJavaFileName());
	t.reset();
}

@cached 
operation getIdTypeName() : String { 
    return "java.util.UUID"; 
}

@cached
operation getRestPackagePrefix() : String {
    return "rest";
}

@cached
operation getDtoPackagePrefix() : String {
    return "restdto";
}

@cached
operation ASM!EClass getDtoPackageName() : String {
	return getDtoPackagePrefix() + "." + asmUtils.getPackageFQName(self.ePackage);
}

@cached
operation ASM!EClass getDtoTypeName() : String {
	return self.getDtoPackageName() + "." + self.name.normalizeName();
}

@cached
operation ASM!EClass getDtoJavaFileName() : String {
	return self.getDtoPackageName().replaceAll("\\.", "/") + "/" + self.name.normalizeName() + ".java";
}

@cached
operation ASM!EAttribute getTypeDefinition() : String {
    var prefix = "";
    var postfix = "";

	if (self.upperBound == -1 or self.upperBound > 1) {
		prefix = "List<";
		postfix = ">";
	}

    var typeName;
	if (self.eType.instanceClass.isDefined()) {
	    if (self.eType.instanceClass.name == 'java.lang.Object') {
		    typeName = "java.lang.String";
	    } else {
		    typeName = self.eType.instanceClass.name;
	    }
	} else if (self.eType.isKindOf(ASM!EEnum)) {
		typeName = "java.lang.Integer";
	} else {
	    throw "Unsupported attribute type: " + self.eType;
	}

	return prefix + typeName + postfix;
}

@cached
operation ASM!EReference getTypeDefinition() : String {
	if (self.upperBound == -1 or self.upperBound > 1) {
		return "List<" + self.getBareTypeDefinition() + ">";
	} else {
		return self.getBareTypeDefinition();
	}
}

@cached
operation ASM!EReference getBareTypeDefinition() : String {
	return self.eReferenceType.getDtoPackageName() + "." + self.eReferenceType.name.normalizeName();
}

@cached
operation getApplicationPackageName() : String {
	return asmUtils.getModel().get().name;
}

@cached
operation getApplicationConfigJavaFileName() : String {
	return getApplicationPackageName().replaceAll("\\.", "/") + "/ApplicationConfig.java";
}

@cached
operation getApplicationConfigScrXmlFileName() : String {
	return "OSGI-INF/" + getApplicationPackageName() + ".ApplicationConfig.xml";
}

/*
 Application Config
 */
operation genApplication(serviceInstances : Map) {
	var t = TemplateFactory.load("ApplicationConfig.java.egl");
	t.populate("className", "ApplicationConfig");
	t.populate("packagePath", getApplicationPackageName());
	t.populate("restPath", "/" + asmUtils.getModel().get().name);
	t.populate("serviceInstances", serviceInstances);
	t.generate(getApplicationConfigJavaFileName());
	t.reset();

	var t = TemplateFactory.load("ApplicationConfig.scr.xml.egl");
	t.populate("className", "ApplicationConfig");
	t.populate("packagePath", getApplicationPackageName());
	t.populate("serviceInstances", serviceInstances);
	t.generate(getApplicationConfigScrXmlFileName());
	t.reset();
}

@cached
operation ASM!EClass getExposedPackageName() : String {
	return getRestPackagePrefix() + "." + asmUtils.getPackageFQName(self.ePackage);
}

@cached
operation ASM!EClass getExposedScrXmlFileName() : String {
	return "OSGI-INF/" + self.getExposedPackageName() + "." + self.name.normalizeName() + ".xml";
}

@cached
operation ASM!EClass getExposedJavaFileName() : String {
	return self.getExposedPackageName()
		.replaceAll("\\.", "/") + "/" + self.name.normalizeName() + ".java";
}
