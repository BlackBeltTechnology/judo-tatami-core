@cached
operation String normalizeName() : String {
	return self.replace("__", "\\$");
}

@cached
operation ASM!EOperation toJAXRSPath() : String {
    var path = asmUtils.getOperationFQName(self);

    var behaviour = asmUtils.getBehaviour(self);
    if (behaviour.present) {
        var owner = asmUtils.getOwnerOfOperationWithDefaultBehaviour(self);

        switch (behaviour.get().toString()) {
            case "LIST":
                if (owner.get.many) {
                    path = asmUtils.getReferenceFQName(owner.get) + "/~list";
                } else {
                    path = asmUtils.getReferenceFQName(owner.get) + "/~get";
                }
            case "CREATE_INSTANCE":
                if (asmUtils.isBound(self)) {
                    path = asmUtils.getClassifierFQName(owner.get.eContainer) + "/~update/" + owner.get.name + "/~create";
                } else {
                    path = asmUtils.getReferenceFQName(owner.get) + "/~create";
                }
            case "VALIDATE_CREATE":
                if (asmUtils.isBound(self)) {
                    path = asmUtils.getClassifierFQName(owner.get.eContainer) + "/~update/" + owner.get.name + "/~validate";
                } else {
                    path = asmUtils.getReferenceFQName(owner.get) + "/~validate";
                }
            case "REFRESH": path = asmUtils.getClassifierFQName(owner.get) + "/~get";
            case "UPDATE_INSTANCE": path = asmUtils.getClassifierFQName(owner.get) + "/~update";
            case "VALIDATE_UPDATE": path = asmUtils.getClassifierFQName(owner.get) + "/~validate";
            case "DELETE_INSTANCE": path = asmUtils.getClassifierFQName(owner.get) + "/~delete";
            case "SET_REFERENCE": path = asmUtils.getClassifierFQName(owner.get.eContainer) + "/~update/" + owner.get.name + "/~set";
            case "UNSET_REFERENCE": path = asmUtils.getClassifierFQName(owner.get.eContainer) + "/~update/" + owner.get.name + "/~unset";
            case "ADD_REFERENCE": path = asmUtils.getClassifierFQName(owner.get.eContainer) + "/~update/" + owner.get.name + "/~add";
            case "REMOVE_REFERENCE": path = asmUtils.getClassifierFQName(owner.get.eContainer) + "/~update/" + owner.get.name + "/~remove";
            case "GET_REFERENCE_RANGE": path = asmUtils.getReferenceFQName(owner.get) + "/~range";
            case "GET_TEMPLATE": path = asmUtils.getClassifierFQName(owner.get) + "/~template";
            case "GET_PRINCIPAL": path = asmUtils.getClassifierFQName(owner.get) + "/~principal";
            case "GET_METADATA": path = asmUtils.getClassifierFQName(owner.get) + "/~meta";
        }
    }

    return path.replaceFirst("^" + asmUtils.getModel().get().name + "\\.", "").replace("[#\\.]", "/").replace("[^0-9a-zA-Z_~/]", "_").replace("_default_transferobjecttypes/","");
}

@cached
operation ASM!EClass getExposedReferences() : Collection {
    return self.eAllReferences.select(r | asmUtils.getExtensionAnnotationByName(r, "exposedBy", false).present);
}

@cached
operation getRestPackagePrefix() : String {
    return "rest";
}

@cached
operation getApplicationPackageName() : String {
	return asmUtils.getModel().get().name;
}

@cached
operation getApplicationConfigJavaFileName() : String {
	return getApplicationPackageName().replaceAll("\\.", "/") + "/ApplicationConfig.java";
}

@cached
operation getApplicationConfigScrXmlFileName() : String {
	return "OSGI-INF/" + getApplicationPackageName() + ".ApplicationConfig.xml";
}

/*
 Application Config
 */
operation genApplication(serviceInstances : Map) {
	var t = TemplateFactory.load("ApplicationConfig.java.egl");
	t.populate("className", "ApplicationConfig");
	t.populate("packagePath", getApplicationPackageName());
	t.populate("restPath", "/" + asmUtils.getModel().get().name);
	t.populate("serviceInstances", serviceInstances);
	t.generate(getApplicationConfigJavaFileName());
	t.reset();

	var t = TemplateFactory.load("ApplicationConfig.scr.xml.egl");
	t.populate("className", "ApplicationConfig");
	t.populate("packagePath", getApplicationPackageName());
	t.populate("restPath", "/" + asmUtils.getModel().get().name);
	t.populate("serviceInstances", serviceInstances);
	t.generate(getApplicationConfigScrXmlFileName());
	t.reset();
}

@cached
operation ASM!EClass getExposedPackageName() : String {
	return getRestPackagePrefix() + "." + asmUtils.getPackageFQName(self.ePackage);
}

@cached
operation ASM!EClass getExposedScrXmlFileName() : String {
	return "OSGI-INF/" + self.getExposedPackageName() + "." + self.name.normalizeName() + ".xml";
}

@cached
operation ASM!EClass getExposedJavaFileName() : String {
	return self.getExposedPackageName()
		.replaceAll("\\.", "/") + "/" + self.name.normalizeName() + ".java";
}
