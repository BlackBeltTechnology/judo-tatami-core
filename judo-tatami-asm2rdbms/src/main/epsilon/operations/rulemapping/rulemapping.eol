@cached
operation ASM!EReference ruleMapping() : RULEMAPPING!TableMappingRule {
    var opposite : Boolean =  self.eOpposite.isDefined();

    var lower : Integer = self.lowerBound;
    if (lower > 1) {
    	lower = 1;
    }
    var upper : Integer = self.upperBound;
    if (upper > 1) {
    	upper = -1;
    }

    var oppositeLower : Integer = null;
    var oppositeUpper : Integer = null;
    var first : Boolean = true;

    if (opposite) {
	    oppositeLower = self.eOpposite.lowerBound;
	    if (oppositeLower > 1) {
	    	oppositeLower = 1;
	    }
	    oppositeUpper = self.eOpposite.upperBound;
	    if (oppositeUpper > 1) {
	    	oppositeUpper = -1;
	    }
	    
	    first = self.name.compareTo(self.eOpposite.name) < 0;
    }

    var ret : RULEMAPPING!TableMappingRule = RULEMAPPING!TableMappingRule.all.select(m | m.symbol.isDefined()).selectOne(m | 
    	first = m.first.asBoolean() 
    	and self.container = m.container.asBoolean()
    	and self.containment = m.containment.asBoolean() 
    	and lower = m.lower.asInteger() 
    	and upper = m.upper.asInteger() 
    	and ((not opposite and not m.opposite.asBoolean()) or (
    							opposite
    							and m.opposite.asBoolean() 
    							and oppositeLower = m.oppositeLower.asInteger() 
    							and oppositeUpper = m.oppositeUpper.asInteger()
    						 )
    		)
    );
    
    if (ret.isUndefined()) {
    	throw "Could not find mapping for reference: " + self.name + " Parent: " + self.eReferenceType.name + "(Lower: " + lower + " Upper: " + upper + " Opposite lower: " + oppositeLower + " OppositeUpper: " + oppositeUpper  +" Container: " + self.container + " Containment: " + self.containment + ")" ;
    }
    
    return ret;
}

operation RULEMAPPING!TableMappingRule toString() : String {
	return self.symbol 
	+ " Opposite: " + self.opposite
	+ " Lower: " + self.lower
	+ " Upper: " + self.upper
	+ " OppositeLower: " + self.oppositeLower
	+ " OppositeUpper: " + self.oppositeUpper
	+ " Container: " + self.container
	+ " Containment: " + self.containment	
	+ " First: " + self.first	
	+ " ForeignKey: " + self.foreignKey
	+ " Inverse ForeignKey: " + self.inverseForeignKey 
	+ " ReadOnly: " + self.readOnly 
	+ " Cascade: " + self.cascade 
	+ " Mandatory: " + self.mandatory 
	+ " Range constraint: " + self.rangeConstraint 
	+ " Inverse Range Constraint: " + self.inverseRangeConstraint 
	+ " Join table: " + self.joinTable;
}

