import "../operations/asm/_importAll.eol";

import "rdbms/util.eol";
import "rdbms/asm/namedElement.eol";
import "rdbms/asm/package.eol";
import "rdbms/asm/class.eol";
import "rdbms/asm/attribute.eol";
import "rdbms/asm/reference.eol";

import "rdbms/rdbms/field.eol";
import "rdbms/rdbms/table.eol";
import "rdbms/rdbms/rule.eol";

import "rdbms/modules/class.etl";
import "rdbms/modules/attribute.etl";
import "rdbms/modules/reference.etl";

pre {
	var targetModel : RDBMS!RdbmsModel = new RDBMS!RdbmsModel();
	targetModel.version = modelVersion;
	var first : Boolean = true;

	var configuration : RDBMS!RdbmsConfiguration = new RDBMS!RdbmsConfiguration();
	configuration.dialect = dialect;
	targetModel.configuration = configuration;
}


post {

	/*
	// All tables have to contain foreign key points to parent. - Structural semantics
	for (t in RDBMS!RdbmsTable.all) {
		for (p in t.parents) {
			var fk : RDBMS!RdbmsForeignKey = new RDBMS!RdbmsForeignKey();
			t.fields.add(fk);
			fk.uuid =  t.uuid +"_" + p.uuid + "@foreignKey";
			fk.name = "Super " + p.name;
			fk.description = "Reference to super table: " + p.name + " With ID: " + p.primaryKey.name;
			fk.sqlName = "SUP_" + p.sqlName + "_ID";
			fk.inheritenceBased = true;
    		fk.fromType(p.primaryKey);
    		fk.referenceKey = p.primaryKey;
    		fk.readOnly = true;
    		fk.mandatory = true;
			fk.foreignKeySqlName = "FK_" + md5(fk.uuid);
		}
	} */

	// Replacing name
	for (e in RDBMS!RdbmsElement.all) {
		log.debug("UUID: " + e.uuid);
		var sqlNameMapping = RDBMS!NameMapping.all.selectOne(m | m.fullyQualifiedName == e.uuid);
		if (sqlNameMapping.isDefined()) {
			log.info("Replace sqlName in: " + e);
			log.info("   To: " + sqlNameMapping);
			e.sqlName = sqlNameMapping.rdbmsName;
		}
	}
}
