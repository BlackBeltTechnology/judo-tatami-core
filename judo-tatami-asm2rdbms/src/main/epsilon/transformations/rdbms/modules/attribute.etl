import "../../../operations/asm/_importAll.eol";

@abstract
rule EAttributeToRdbmsField
	transform s : ASM!EAttribute
	to t : RDBMS!RdbmsField {
		guard : s.eContainingClass.isEntity()
	    t.uuid = asmUtils.getAttributeFQName(s);
	    log.info(" Class: " + asmUtils.getClassifierFQName(s.eContainingClass));
		
		if (s.eType.isKindOf(ASM!EEnum)) {
			// TODO: Make value constraints
			t.fillType("JInteger");
	    } else {
	        if (s.eType.isUndefined()) {
	        	log.warn("Could not determinate type (maybe enum?): " + s.eContainingClass.name + "#" + s.name);
				t.fillType("JInteger");
	        } else {
				t.fillType(s.eType.name);
				t.fillConstraintsFromAttribute(s);
			}
		}
		t.sqlName = s.fieldSqlName();
		t.mandatory = s.required;
}

rule EAttributeToTableValueField
	transform s : ASM!EAttribute
	to t : RDBMS!RdbmsValueField
	extends EAttributeToRdbmsField { 
		guard : s.eContainingClass.isEntity() and not s.derived
		s.eContainingClass.equivalent("EClassToRdbmsTable").fields.add(t);
		log.info("    Add attribute: " + asmUtils.getAttributeFQName(s));
}

rule EAttributeToUniqueKey
	transform s : ASM!EAttribute
	to u : RDBMS!RdbmsUniqueConstraint {
		guard : s.eContainingClass.isEntity() and s.ID and not s.derived
		log.info("    Add uniquie constraint: " + asmUtils.getAttributeFQName(s));
	    
	    u.uuid = asmUtils.getAttributeFQName(s) + "@uniqueConstraint";
		s.eContainingClass.equivalent("EClassToRdbmsTable").uniqueConstraints.add(t);
		
		u.sqlName = ("UQ_" + md5(u.uuid));
		u.name = asmUtils.getAttributeFQName(s); 
		u.fields.add(s.equivalent("EAttributeToTableValueField"));
}

