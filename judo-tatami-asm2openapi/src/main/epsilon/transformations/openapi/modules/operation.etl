import "../../../operations/openapi/_importAll.eol";

import "api.etl";
import "parameter.etl";

rule CreateExposedServicePath
    transform s : ASM!EAnnotation
    to t : OPENAPI!Path {
        guard: s.isAnnotationOfExposedOperation()

        t.relativePath = "/" + s.eContainer.toOpenAPIPath();

        var actorType = asmUtils.getResolvedExposedBy(s);
        if (actorType.isPresent()) {
            actorType.get().equivalent("CreateOpenAPIActorType").paths.add(t);
        } else {
            delete t;
        }
}

rule CreateExposedServiceOperationParameter
    transform s : ASM!EAnnotation
    to t : OPENAPI!ParameterReference {
        guard: s.isAnnotationOfExposedParameter()
        
        t.ref = s.equivalent("CreateParameterDeclaration").getReference();
        
        var operationExposedByAnnotation = asmUtils.getExtensionAnnotationListByName(s.eContainer.eContainer, "exposedBy").selectOne(a | a.details.get("value") == s.details.get("value"));
	    if (operationExposedByAnnotation.isDefined()) {
	        if (s.eContainer.eContainer.eParameters.isEmpty and asmUtils.annotatedAsFalse(s.eContainer.eContainer, "stateful")) {
	            operationExposedByAnnotation.equivalent("CreateExposedServiceGetOperation").parameters.add(t);
	        } else if (not s.eContainer.eContainer.eParameters.isEmpty or asmUtils.annotatedAsTrue(s.eContainer.eContainer, "stateful")) {
	            operationExposedByAnnotation.equivalent("CreateExposedServicePostOperation").parameters.add(t);
	        }
	    } else {
	    	delete t;
	    }
}

@abstract
rule CreateExposedServiceOperation
    transform s : ASM!EAnnotation
    to t : OPENAPI!Operation {
        t.`operationId` = asmUtils.getOperationFQName(s.eContainer);
}

rule CreateExposedServiceGetOperation
    transform s : ASM!EAnnotation
    to t : OPENAPI!Operation
    extends CreateExposedServiceOperation {
        guard: s.isAnnotationOfExposedOperation()
        and s.eContainer.eParameters.isEmpty and asmUtils.annotatedAsFalse(s.eContainer, "stateful")
        
        s.equivalent("CreateExposedServicePath").`get` = t;
}

rule CreateExposedServicePostOperation
    transform s : ASM!EAnnotation
    to t : OPENAPI!Operation
    extends CreateExposedServiceOperation {
        guard: s.isAnnotationOfExposedOperation()
        and (not s.eContainer.eParameters.isEmpty or asmUtils.annotatedAsTrue(s.eContainer, "stateful"))
        
        s.equivalent("CreateExposedServicePath").`post` = t;
}

@abstract
rule CreateExposedServiceOperationResponse
    transform s : ASM!EAnnotation
    to t : OPENAPI!OperationResponse {
        if (s.eContainer.eType.isDefined()) {
            t.code = "200";
        } else {
            t.code = "204";
            t.response = new OPENAPI!ResponseDefinition;
            t.response.description = "No content";
        }
}

rule CreateExposedServiceGetOperationResponse
    transform s : ASM!EAnnotation
    to t : OPENAPI!OperationResponse
    extends CreateExposedServiceOperationResponse {
        guard: s.isAnnotationOfExposedOperation()
        and s.eContainer.eParameters.isEmpty and asmUtils.annotatedAsFalse(s.eContainer, "stateful")

        s.equivalent("CreateExposedServiceGetOperation").responses.add(t);
}

rule CreateExposedServicePostOperationResponse
    transform s : ASM!EAnnotation
    to t : OPENAPI!OperationResponse
    extends CreateExposedServiceOperationResponse {
        guard: s.isAnnotationOfExposedOperation()
        and (not s.eContainer.eParameters.isEmpty or asmUtils.annotatedAsTrue(s.eContainer, "stateful"))

        s.equivalent("CreateExposedServicePostOperation").responses.add(t);
}

@abstract
rule CreateExposedServiceOperationResponseDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!ResponseDefinition {
        t.description = "Operation completed successfully";
}

rule CreateExposedServiceGetOperationResponseDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!ResponseDefinition
    extends CreateExposedServiceOperationResponseDefinition {
        guard: s.isAnnotationOfExposedOperation()
        and s.eContainer.eParameters.isEmpty and asmUtils.annotatedAsFalse(s.eContainer, "stateful")

        s.equivalent("CreateExposedServiceGetOperationResponse").response = t;
}

rule CreateExposedServicePostOperationResponseDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!ResponseDefinition
    extends CreateExposedServiceOperationResponseDefinition {
        guard: s.isAnnotationOfExposedOperation()
        and (not s.eContainer.eParameters.isEmpty or asmUtils.annotatedAsTrue(s.eContainer, "stateful"))

        s.equivalent("CreateExposedServicePostOperationResponse").response = t;
}

rule CreateExposedServiceOperationResponseDefinitionSchema
    transform s : ASM!EAnnotation
    to t : OPENAPI!Schema {
        guard: s.isAnnotationOfExposedOperation()
        and s.eContainer.eType.isDefined()
        
        if (s.eContainer.eParameters.isEmpty and asmUtils.annotatedAsFalse(s.eContainer, "stateful")) {
            s.equivalent("CreateExposedServiceGetOperationResponseDefinition").schema = t;
        } else if (not s.eContainer.eParameters.isEmpty or asmUtils.annotatedAsTrue(s.eContainer, "stateful")) {
            s.equivalent("CreateExposedServicePostOperationResponseDefinition").schema = t;
        }
}

rule CreateExposedServiceOperationResponseDefinitionSchemaReference
    transform s : ASM!EAnnotation
    to t : OPENAPI!SchemaReference {
        guard: s.isAnnotationOfExposedOperation()
        and s.eContainer.eType.isDefined()

        var operationTypeExposedByAnnotation = asmUtils.getExtensionAnnotationListByName(s.eContainer.eType, "exposedBy").selectOne(a | a.details.get("value") == s.details.get("value"));
        if (s.eContainer.many) {
            t.ref = operationTypeExposedByAnnotation.equivalent("CreateTransferObjectArraySchemaDeclaration").getReference();
        } else {
            t.ref = operationTypeExposedByAnnotation.equivalent("CreateTransferObjectSingleSchemaDeclaration").getReference();
        }
        
        s.equivalent("CreateExposedServiceOperationResponseDefinitionSchema").ref = t;
}

@abstract
rule CreateExposedGraphOperationEntityIdParameter
    transform s : ASM!EAnnotation
    to t : OPENAPI!ParameterReference {
        var cl = s.eContainer.eContainingClass;

        var mappedEntityType = asmUtils.getMappedEntityType(s.eContainer.eContainingClass);
        var mappedEntityTypeExposedByAnnotation = mappedEntityType.get().eAnnotations.selectOne(a | a.source = asmUtils.getAnnotationUri("exposedBy") and a.details.get("value") == s.details.get("value"));

        t.ref = mappedEntityTypeExposedByAnnotation.equivalent("CreateEntityIdParameterDeclaration").getReference();
}

rule CreateExposedGraphGetOperationEntityIdParameter
    transform s : ASM!EAnnotation
    to t : OPENAPI!ParameterReference
    extends CreateExposedGraphOperationEntityIdParameter {
         guard: s.isAnnotationOfExposedOperation()
         and asmUtils.isBound(s.eContainer) and s.eContainer.eParameters.isEmpty and asmUtils.annotatedAsFalse(s.eContainer, "stateful")

        s.equivalent("CreateExposedServiceGetOperation").parameters.add(t);
}

rule CreateExposedGraphPostOperationEntityIdParameter
    transform s : ASM!EAnnotation
    to t : OPENAPI!ParameterReference
    extends CreateExposedGraphOperationEntityIdParameter {
        guard: s.isAnnotationOfExposedOperation()
        and asmUtils.isBound(s.eContainer) and (not s.eContainer.eParameters.isEmpty or asmUtils.annotatedAsTrue(s.eContainer, "stateful"))

        s.equivalent("CreateExposedServicePostOperation").parameters.add(t);
}
