import "../../../operations/asm/_importAll.eol";
import "../../../operations/asm/accesspoint/_importAll.eol";

import "api.etl";
import "parameter.etl";

rule CreateExposedServicePath
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Path {
        guard: s.key.startsWith(".accessPoints.") and s.getAnnotatedOperation().isDefined() and s.getAnnotatedOperation().eContainingClass.interface

        var op = s.getAnnotatedOperation();
        var accessPoint = s.value.resolve();

        t.relativePath = "/" + op.getFQName().toOpenAPIPath();

        accessPoint.equivalent("CreateOpenAPIAccessPoint").paths.add(t);
}

@abstract
rule CreateExposedServiceOperation
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Operation {
        var op = s.getAnnotatedOperation();
        
        for (p in op.eParameters.select(p | p.eType.isDefined())) {
            var parameterReference = new OPENAPI!ParameterReference;
            
            var aAccessPoint = p.getExtensionAnnotation(false).details.selectOne(d | d.key.startsWith(".accessPoints.") and d.value = s.value);
            parameterReference.ref = aAccessPoint.equivalent("CreateParameterDeclaration").getReference();
            t.parameters.add(parameterReference);
        }
}

rule CreateExposedServiceGetOperation
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Operation
    extends CreateExposedServiceOperation {
        guard: s.key.startsWith(".accessPoints.") and s.getAnnotatedOperation().isDefined() and s.getAnnotatedOperation().eContainingClass.interface and (s.getAnnotatedOperation().eParameters.isEmpty() and s.getAnnotatedOperation().annotatedAsFalse("stateful"))

        s.equivalent("CreateExposedServicePath").`get` = t;
}

rule CreateExposedServicePostOperation
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Operation
    extends CreateExposedServiceOperation {
        guard: s.key.startsWith(".accessPoints.") and s.getAnnotatedOperation().isDefined() and s.getAnnotatedOperation().eContainingClass.interface and (not s.getAnnotatedOperation().eParameters.isEmpty() or s.getAnnotatedOperation().annotatedAsTrue("stateful"))

        s.equivalent("CreateExposedServicePath").`post` = t;
}

@abstract
rule CreateExposedServiceOperationResponse
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!OperationResponse {
        var op = s.getAnnotatedOperation();

        if (op.eType.isDefined()) {
            t.code = "200";
        } else {
            t.code = "204";
        }
}

rule CreateExposedServiceGetOperationResponse
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!OperationResponse
    extends CreateExposedServiceOperationResponse {
        guard: s.key.startsWith(".accessPoints.") and s.getAnnotatedOperation().isDefined() and s.getAnnotatedOperation().eContainingClass.interface and (s.getAnnotatedOperation().eParameters.isEmpty() and s.getAnnotatedOperation().annotatedAsFalse("stateful"))

        s.equivalent("CreateExposedServiceGetOperation").responses.add(t);
}

rule CreateExposedServicePostOperationResponse
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!OperationResponse
    extends CreateExposedServiceOperationResponse {
        guard: s.key.startsWith(".accessPoints.") and s.getAnnotatedOperation().isDefined() and s.getAnnotatedOperation().eContainingClass.interface and (not s.getAnnotatedOperation().eParameters.isEmpty() or s.getAnnotatedOperation().annotatedAsTrue("stateful"))

        s.equivalent("CreateExposedServicePostOperation").responses.add(t);
}

@abstract
rule CreateExposedServiceOperationResponseDefinition
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!ResponseDefinition {
        var op = s.getAnnotatedOperation();
        var accessPoint = s.value.resolve();

        t.schema = new OPENAPI!Schema;
        t.schema.ref = new OPENAPI!SchemaReference;

        var aAccessPoint = op.eType.getAccessPointAnnotation(accessPoint.getFQName());
        if (op.many) {
            t.schema.ref.ref = aAccessPoint.equivalent("CreateTransferObjectArraySchemaDeclaration").getReference();
        } else {
            t.schema.ref.ref = aAccessPoint.equivalent("CreateTransferObjectSingleSchemaDeclaration").getReference();
        }
}

rule CreateExposedServiceGetOperationResponseDefinition
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!ResponseDefinition
    extends CreateExposedServiceOperationResponseDefinition {
        guard: s.key.startsWith(".accessPoints.") and s.getAnnotatedOperation().isDefined() and s.getAnnotatedOperation().eContainingClass.interface and s.getAnnotatedOperation().eType.isDefined() and (s.getAnnotatedOperation().eParameters.isEmpty() and s.getAnnotatedOperation().annotatedAsFalse("stateful"))

        s.equivalent("CreateExposedServiceGetOperationResponse").response = t;
}

rule CreateExposedServicePostOperationResponseDefinition
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!ResponseDefinition
    extends CreateExposedServiceOperationResponseDefinition {
        guard: s.key.startsWith(".accessPoints.") and s.getAnnotatedOperation().isDefined() and s.getAnnotatedOperation().eContainingClass.interface and s.getAnnotatedOperation().eType.isDefined() and (not s.getAnnotatedOperation().eParameters.isEmpty() or s.getAnnotatedOperation().annotatedAsTrue("stateful"))

        s.equivalent("CreateExposedServicePostOperationResponse").response = t;
}
