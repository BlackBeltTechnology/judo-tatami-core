import "../../../operations/openapi/_importAll.eol";

import "api.etl";
import "parameter.etl";

rule CreateExposedServicePath
    transform s : ASM!EAnnotation
    to t : OPENAPI!Path {
        guard: s.eContainer.isKindOf(ASM!EOperation) and s.source == asmUtils.getAnnotationUri("exposedBy") and not asmUtils.isBound(s.eContainer)

        t.relativePath = "/" + asmUtils.getOperationFQName(s.eContainer).toOpenAPIPath();

        var accessPoint = asmUtils.getResolvedExposedBy(s);
        if (accessPoint.isPresent()) {
            accessPoint.get().equivalent("CreateOpenAPIAccessPoint").paths.add(t);
        } else {
            delete t;
        }
}

rule CreateExposedServiceOperationParameter
    transform s : ASM!EAnnotation
    to t : OPENAPI!ParameterReference {
        guard: s.eContainer.isKindOf(ASM!EParameter) and s.source == asmUtils.getAnnotationUri("exposedBy") and
               s.eContainer.eContainer.isDefined() and s.eContainer.eContainer.isKindOf(ASM!EOperation) //and not asmUtils.isBound(s.eContainer.eContainer)
        
        t.ref = s.equivalent("CreateParameterDeclaration").getReference();
        var operationExposedByAnnotation = asmUtils.getExtensionAnnotationListByName(s.eContainer.eContainer, "exposedBy").selectOne(a | a.details.get("value") == s.details.get("value"));
	    if (operationExposedByAnnotation.isDefined()) {
	        if (s.eContainer.eContainer.eParameters.isEmpty and asmUtils.annotatedAsFalse(s.eContainer.eContainer, "stateful")) {
	            operationExposedByAnnotation.equivalent("CreateExposedServiceGetOperation").parameters.add(t);
	        } else if (not s.eContainer.eContainer.eParameters.isEmpty or asmUtils.annotatedAsTrue(s.eContainer.eContainer, "stateful")) {
	            operationExposedByAnnotation.equivalent("CreateExposedServicePostOperation").parameters.add(t);
	        }
	    } else {
	    	delete t;
	    }
}

rule CreateExposedServiceGetOperation
    transform s : ASM!EAnnotation
    to t : OPENAPI!Operation {
        guard: s.eContainer.isKindOf(ASM!EOperation) and s.source == asmUtils.getAnnotationUri("exposedBy") and not asmUtils.isBound(s.eContainer) and s.eContainer.eParameters.isEmpty and asmUtils.annotatedAsFalse(s.eContainer, "stateful")
        
        s.equivalent("CreateExposedServicePath").`get` = t;
}

rule CreateExposedServicePostOperation
    transform s : ASM!EAnnotation
    to t : OPENAPI!Operation{
        guard: s.eContainer.isKindOf(ASM!EOperation) and s.source == asmUtils.getAnnotationUri("exposedBy") and not asmUtils.isBound(s.eContainer) and (not s.eContainer.eParameters.isEmpty or asmUtils.annotatedAsTrue(s.eContainer, "stateful"))
        
        s.equivalent("CreateExposedServicePath").`post` = t;
}

@abstract
rule CreateExposedServiceOperationResponse
    transform s : ASM!EAnnotation
    to t : OPENAPI!OperationResponse {
        if (s.eContainer.eType.isDefined()) {
            t.code = "200";
        } else {
            t.code = "204";
            t.response = new OPENAPI!ResponseDefinition;
            t.response.description = "No content";
        }
}

rule CreateExposedServiceGetOperationResponse
    transform s : ASM!EAnnotation
    to t : OPENAPI!OperationResponse
    extends CreateExposedServiceOperationResponse {
        guard: s.eContainer.isKindOf(ASM!EOperation) and s.source == asmUtils.getAnnotationUri("exposedBy") and not asmUtils.isBound(s.eContainer) and s.eContainer.eParameters.isEmpty and asmUtils.annotatedAsFalse(s.eContainer, "stateful")

        s.equivalent("CreateExposedServiceGetOperation").responses.add(t);
}

rule CreateExposedServicePostOperationResponse
    transform s : ASM!EAnnotation
    to t : OPENAPI!OperationResponse
    extends CreateExposedServiceOperationResponse {
        guard: s.eContainer.isKindOf(ASM!EOperation) and s.source == asmUtils.getAnnotationUri("exposedBy") and not asmUtils.isBound(s.eContainer) and (not s.eContainer.eParameters.isEmpty or asmUtils.annotatedAsTrue(s.eContainer, "stateful"))

        s.equivalent("CreateExposedServicePostOperation").responses.add(t);
}

@abstract
rule CreateExposedServiceOperationResponseDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!ResponseDefinition {
        t.description = "Operation completed successfully";
}

rule CreateExposedServiceGetOperationResponseDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!ResponseDefinition
    extends CreateExposedServiceOperationResponseDefinition {
        guard: s.eContainer.isKindOf(ASM!EOperation) and s.source == asmUtils.getAnnotationUri("exposedBy") and not asmUtils.isBound(s.eContainer) and s.eContainer.eParameters.isEmpty and asmUtils.annotatedAsFalse(s.eContainer, "stateful")

        s.equivalent("CreateExposedServiceGetOperationResponse").response = t;
}

rule CreateExposedServicePostOperationResponseDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!ResponseDefinition
    extends CreateExposedServiceOperationResponseDefinition {
        guard: s.eContainer.isKindOf(ASM!EOperation) and s.source == asmUtils.getAnnotationUri("exposedBy") and asmUtils.isBound(s.eContainer) and (not s.eContainer.eParameters.isEmpty or asmUtils.annotatedAsTrue(s.eContainer, "stateful"))

        s.equivalent("CreateExposedServicePostOperationResponse").response = t;
}

rule CreateExposedServiceOperationResponseDefinitionSchema
    transform s : ASM!EAnnotation
    to t : OPENAPI!Schema {
        guard: s.eContainer.isKindOf(ASM!EOperation) and s.source == asmUtils.getAnnotationUri("exposedBy") and asmUtils.isBound(s.eContainer)
        
        if (s.eContainer.eParameters.isEmpty and asmUtils.annotatedAsFalse(s.eContainer, "stateful")) {
            s.equivalent("CreateExposedServiceGetOperationResponseDefinition").schema = t;
        } else if (not s.eContainer.eParameters.isEmpty or  asmUtils.annotatedAsTrue(s.eContainer, "stateful")) {
            s.equivalent("CreateExposedServicePostOperationResponseDefinition").schema = t;
        }
}

rule CreateExposedServiceOperationResponseDefinitionSchemaReference
    transform s : ASM!EAnnotation
    to t : OPENAPI!SchemaReference {
        guard: s.eContainer.isKindOf(ASM!EOperation) and s.source == asmUtils.getAnnotationUri("exposedBy") and asmUtils.isBound(s.eContainer)

        var operationTypeExposedByAnnotation = asmUtils.getExtensionAnnotationListByName(s.eContainer.eType, "exposedBy").selectOne(a | a.details.get("value") == s.details.get("value"));
        if (s.eContainer.many) {
            t.ref = operationTypeExposedByAnnotation.equivalent("CreateTransferObjectArraySchemaDeclaration").getReference();
        } else {
            t.ref = operationTypeExposedByAnnotation.equivalent("CreateTransferObjectSingleSchemaDeclaration").getReference();
        }
        
        s.equivalent("CreateExposedServiceOperationResponseDefinitionSchema").ref = t;
}
