import "../../../operations/asm/_importAll.eol";
import "../../../operations/asm/accesspoint/_importAll.eol";
import "../../../operations/openapi/_importAll.eol";

import "api.etl";
import "parameter.etl";
import "schema.etl";
import "tag.etl";

rule CreateExposedGraphEntryPointPath
    transform s : ASM!EClass
    to t : OPENAPI!Path {
        guard: s.isExposedGraph()
        
        var accessPoint = s.getResolvedExposedBy();
        
        t.relativePath = "/" + s.getExposedGraphName();
        
        accessPoint.equivalent("CreateOpenAPIAccessPoint").paths.add(t);
}

rule CreateExposedGraphEntryPointOperation
    transform s : ASM!EClass
    to t : OPENAPI!Operation {
        guard: s.isExposedGraph()
        
        t.tags.add(s.equivalent("CreateTag").name);
        
        s.equivalent("CreateExposedGraphEntryPointPath").`get` = t;
}

rule CreateExposedGraphEntryPointOperationResponse
    transform s : ASM!EClass
    to t : OPENAPI!OperationResponse {
        guard: s.isExposedGraph()
        
        t.code = "200";
        
        s.equivalent("CreateExposedGraphEntryPointOperation").responses.add(t);
}

rule CreateExposedGraphEntryPointOperationResponseDefinition
    transform s : ASM!EClass
    to t : OPENAPI!ResponseDefinition {
        guard: s.isExposedGraph()
        
        var accessPoint = s.getResolvedExposedBy();
        var root = s.getResolvedRoot();
        
        var collection = true;
        var aCollection = s.getAnnotationValue("root.collection", false);
        if (aCollection.isDefined()) {
            collection = aCollection.asBoolean();
        }

        t.schema = new OPENAPI!Schema;
        t.description = "Operation completed successfully";
        t.schema.ref = new OPENAPI!SchemaReference;
        
        var aAccessPoint = root.getAccessPointAnnotation(accessPoint.getFQName());
        if (collection) {
            t.schema.ref.ref = aAccessPoint.equivalent("CreateTransferObjectArraySchemaDeclaration").getReference();
        } else {
            t.schema.ref.ref = aAccessPoint.equivalent("CreateTransferObjectSingleSchemaDeclaration").getReference();
        }
        
        s.equivalent("CreateExposedGraphEntryPointOperationResponse").response = t;
}

rule CreateExposedGraphPath
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Path {
        guard: s.key.startsWith(".graphs.") and s.getAnnotatedOperation().isDefined()

        var op = s.getAnnotatedOperation();
        var opGroup = op.eContainingClass;
        var graph = s.value.resolve();
        var accessPoint = graph.getResolvedExposedBy();

        t.relativePath = "/" + graph.getExposedGraphName() + "/" + opGroup.getFQName().toOpenAPIPath() + "/" + op.name;

        accessPoint.equivalent("CreateOpenAPIAccessPoint").paths.add(t);
}

@abstract
rule CreateExposedGraphOperation
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Operation {
        var op = s.getAnnotatedOperation();
        var opGroup = op.eContainingClass;
        var graph = s.value.resolve();
        var accessPoint = graph.getResolvedExposedBy();
        
        t.tags.add(graph.equivalent("CreateTag").name);
        
        for (p in op.eParameters.select(p | p.eType.isDefined())) {
            var parameterReference = new OPENAPI!ParameterReference;
            
            parameterReference.ref = p.getAccessPointAnnotation(accessPoint.getFQName()).equivalent("CreateParameterDeclaration").getReference();
            t.parameters.add(parameterReference);
        }
}

rule CreateExposedGraphGetOperation
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Operation
    extends CreateExposedGraphOperation {
        guard: s.key.startsWith(".graphs.") and s.getAnnotatedOperation().isDefined() and (s.getAnnotatedOperation().eParameters.isEmpty() and s.getAnnotatedOperation().annotatedAsFalse("stateful"))

        s.equivalent("CreateExposedGraphPath").`get` = t;
}

rule CreateExposedGraphPostOperation
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Operation
    extends CreateExposedGraphOperation {
        guard: s.key.startsWith(".graphs.") and s.getAnnotatedOperation().isDefined() and (not s.getAnnotatedOperation().eParameters.isEmpty() or s.getAnnotatedOperation().annotatedAsTrue("stateful"))

        t.consumes.add("application/json");

        s.equivalent("CreateExposedGraphPath").`post` = t;
}

@abstract
rule CreateExposedGraphOperationEntityIdParameter
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!ParameterReference {
        var op = s.getAnnotatedOperation();
        var interface = op.eContainingClass;
        var graph = s.value.resolve();
        var accessPoint = graph.getResolvedExposedBy();
        
        while (interface.isDefined() and not interface.isMappedTransferObjectType()) {
            interface = interface.getContainerClass();
        }
        
        if (interface.isDefined()) {
	        var entityIdParameterDeclaration = interface.getEntityType().getAccessPointAnnotation(accessPoint.getFQName()).equivalent("CreateEntityIdParameterDeclaration");
	        t.ref = entityIdParameterDeclaration.getReference();
        } else {
            throw "No binding found for operation: " + op.getFQName();
        }
}

rule CreateExposedGraphGetOperationEntityIdParameter
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!ParameterReference
    extends CreateExposedGraphOperationEntityIdParameter {
        guard: s.key.startsWith(".graphs.") and s.getAnnotatedOperation().isDefined() and (s.getAnnotatedOperation().eParameters.isEmpty() and s.getAnnotatedOperation().annotatedAsFalse("stateful"))
        
        s.equivalent("CreateExposedGraphGetOperation").parameters.add(t);
}

rule CreateExposedGraphPostOperationEntityIdParameter
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!ParameterReference
    extends CreateExposedGraphOperationEntityIdParameter {
        guard: s.key.startsWith(".graphs.") and s.getAnnotatedOperation().isDefined() and (not s.getAnnotatedOperation().eParameters.isEmpty() or s.getAnnotatedOperation().annotatedAsTrue("stateful"))
        
        s.equivalent("CreateExposedGraphPostOperation").parameters.add(t);
}

@abstract
rule CreateExposedGraphOperationResponse
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!OperationResponse {
        var op = s.getAnnotatedOperation();

        if (op.eType.isDefined()) {
            t.code = "200";
        } else {
            t.code = "204";
            t.response = new OPENAPI!ResponseDefinition;
            t.response.description = "No content";
        }
}

rule CreateExposedGraphGetOperationResponse
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!OperationResponse
    extends CreateExposedGraphOperationResponse {
        guard: s.key.startsWith(".graphs.") and s.getAnnotatedOperation().isDefined() and (s.getAnnotatedOperation().eParameters.isEmpty() and s.getAnnotatedOperation().annotatedAsFalse("stateful"))
        
        s.equivalent("CreateExposedGraphGetOperation").responses.add(t);
}

rule CreateExposedGraphPostOperationResponse
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!OperationResponse
    extends CreateExposedGraphOperationResponse {
        guard: s.key.startsWith(".graphs.") and s.getAnnotatedOperation().isDefined() and (not s.getAnnotatedOperation().eParameters.isEmpty() or s.getAnnotatedOperation().annotatedAsTrue("stateful"))

        s.equivalent("CreateExposedGraphPostOperation").responses.add(t);
}

@abstract
rule CreateExposedGraphOperationResponseDefinition
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!OperationResponseDefinition {
        var op = s.getAnnotatedOperation();
        var opGroup = op.eContainingClass;
        var graph = s.value.resolve();
        var accessPoint = graph.getResolvedExposedBy();

        t.schema = new OPENAPI!Schema;
        t.description = "Operation completed successfully";
        t.schema.ref = new OPENAPI!SchemaReference;

        var aAccessPoint = op.eType.getAccessPointAnnotation(accessPoint.getFQName());
        if (op.many) {
            t.schema.ref.ref = aAccessPoint.equivalent("CreateTransferObjectArraySchemaDeclaration").getReference();
        } else {
            t.schema.ref.ref = aAccessPoint.equivalent("CreateTransferObjectSingleSchemaDeclaration").getReference();
        }
}

rule CreateExposedGraphGetOperationResponseDefinition
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!ResponseDefinition
    extends CreateExposedGraphOperationResponseDefinition {
        guard: s.key.startsWith(".graphs.") and s.getAnnotatedOperation().isDefined() and (s.getAnnotatedOperation().eParameters.isEmpty() and s.getAnnotatedOperation().annotatedAsFalse("stateful")) and s.getAnnotatedOperation().eType.isDefined()

        s.equivalent("CreateExposedGraphGetOperationResponse").response = t;
}

rule CreateExposedGraphPostOperationResponseDefinition
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!ResponseDefinition
    extends CreateExposedGraphOperationResponseDefinition {
        guard: s.key.startsWith(".graphs.") and s.getAnnotatedOperation().isDefined() and (not s.getAnnotatedOperation().eParameters.isEmpty() or s.getAnnotatedOperation().annotatedAsTrue("stateful")) and s.getAnnotatedOperation().eType.isDefined()

        s.equivalent("CreateExposedGraphPostOperationResponse").response = t;
}
