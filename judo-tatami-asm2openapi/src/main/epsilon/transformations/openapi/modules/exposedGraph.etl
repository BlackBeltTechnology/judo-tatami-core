import "../../../operations/openapi/_importAll.eol";

import "api.etl";
import "parameter.etl";
import "schema.etl";
import "tag.etl";

rule CreateExposedGraphEntryPointPath
    transform s : ASM!EAnnotation
    to t : OPENAPI!Path {
        guard: asmUtils.isGraph(s)
        
        t.relativePath = "/" + asmUtils.getGraphName(s).get();
        
        s.eContainer.equivalent("CreateOpenAPIAccessPoint").paths.add(t);
}

rule CreateExposedGraphEntryPointOperation
    transform s : ASM!EAnnotation
    to t : OPENAPI!Operation {
        guard: asmUtils.isGraph(s)
        
        t.tags.add(s.equivalent("CreateTag").name);
        
        s.equivalent("CreateExposedGraphEntryPointPath").`get` = t;
}

rule CreateExposedGraphEntryPointOperationResponse
    transform s : ASM!EAnnotation
    to t : OPENAPI!OperationResponse {
        guard: asmUtils.isGraph(s)
        
        t.code = "200";
        
        s.equivalent("CreateExposedGraphEntryPointOperation").responses.add(t);
}

rule CreateExposedGraphEntryPointOperationResponseDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!ResponseDefinition {
        guard: asmUtils.isGraph(s)
        
        t.description = "Operation completed successfully";
        
        s.equivalent("CreateExposedGraphEntryPointOperationResponse").response = t;
}

rule CreateExposedGraphEntryPointOperationResponseDefinitionSchema
    transform s : ASM!EAnnotation
    to t : OPENAPI!Schema {
        guard: asmUtils.isGraph(s)
        
        s.equivalent("CreateExposedGraphEntryPointOperationResponseDefinition").schema = t;
}

rule CreateExposedGraphEntryPointOperationResponseDefinitionSchemaReference
    transform s : ASM!EAnnotation
    to t : OPENAPI!SchemaReference {
        guard: asmUtils.isGraph(s)
        
        var root = asmUtils.getResolvedRoot(s);
        
        if (root.isPresent()) {
            var rootExposedByAnnotation = asmUtils.getExtensionAnnotationListByName(root.get(), "exposedBy").selectOne(a | a.details.get("value") == asmUtils.getClassifierFqName(s.eContainer));
            if (s.details.get("collection").isDefined() and s.details.get("collection").asBoolean()) {
	            t.ref = rootExposedByAnnotation.equivalent("CreateTransferObjectArraySchemaDeclaration").getReference();
	        } else {
	            t.ref = rootExposedByAnnotation.equivalent("CreateTransferObjectSingleSchemaDeclaration").getReference();
	        }
        }
        
        s.equivalent("CreateExposedGraphEntryPointOperationResponseDefinitionSchema").ref = t;
}

rule CreateExposedGraphPath
    transform s : ASM!EAnnotation
    to t : OPENAPI!Path {
        guard: s.eContainer.isKindOf(ASM!EOperation) and s.source == asmUtils.getAnnotationUri("exposedGraph") and asmUtils.isBuiltInOperation(s.eContainer)
        
        var graph = asmUtils.getExposedGraphByFqName(s.details.get("value"));
        if (graph.isPresent) {
	        t.relativePath = "/" + graph.get().details.get("value") + "/" + asmUtils.getOperationFqName(s.eContainer).toOpenAPIPath();
        
            if (graph.get().eContainer.isDefined()) {
            	graph.get().eContainer.equivalent("CreateOpenAPIAccessPoint").paths.add(t);
            } else {
                delete t;
            }
        } else {
            delete t;
        }
}

@abstract
rule CreateExposedGraphOperation
    transform s : ASM!EAnnotation
    to t : OPENAPI!Operation {
        var graph = asmUtils.getExposedGraphByFqName(s.details.get("value"));
        t.tags.add(graph.get().equivalent("CreateTag").name);
}

rule CreateExposedGraphOperationParameter
    transform s : ASM!EAnnotation
    to t : OPENAPI!ParameterReference {
        guard: s.eContainer.isKindOf(ASM!EParameter) and s.source == asmUtils.getAnnotationUri("exposedGraph") //and asmUtils.isBuiltInOperation(s.eContainer.eContainer)
        
        var graph = asmUtils.getExposedGraphByFqName(s.details.get("value"));
        var parameterExposedByAnnotation = asmUtils.getExtensionAnnotationListByName(s.eContainer, "exposedBy").selectOne(a | a.details.get("value") == asmUtils.getClassifierFqName(graph.get().eContainer));
        t.ref = parameterExposedByAnnotation.equivalent("CreateParameterDeclaration").getReference();
        
        var operationExposedGraphAnnotation = asmUtils.getExtensionAnnotationListByName(s.eContainer.eContainer, "exposedGraph").selectOne(a | a.details.get("value") == s.details.get("value"));
        if (s.eContainer.eContainer.eParameters.isEmpty and asmUtils.annotatedAsFalse(s.eContainer, "stateful")) {
            operationExposedGraphAnnotation.equivalent("CreateExposedGraphGetOperation").parameters.add(t);
        } else if (not s.eContainer.eContainer.eParameters.isEmpty or asmUtils.annotatedAsTrue(s.eContainer, "stateful")) {
            operationExposedGraphAnnotation.equivalent("CreateExposedGraphPostOperation").parameters.add(t);
        }
}

rule CreateExposedGraphGetOperation
    transform s : ASM!EAnnotation
    to t : OPENAPI!Operation
    extends CreateExposedGraphOperation {
        guard: s.eContainer.isKindOf(ASM!EOperation) and s.source == asmUtils.getAnnotationUri("exposedGraph") and asmUtils.isBuiltInOperation(s.eContainer) and s.eContainer.eParameters.isEmpty and asmUtils.annotatedAsFalse(s.eContainer, "stateful")

        s.equivalent("CreateExposedGraphPath").`get` = t;
}

rule CreateExposedGraphPostOperation
    transform s : ASM!EAnnotation
    to t : OPENAPI!Operation
    extends CreateExposedGraphOperation {
        guard: s.eContainer.isKindOf(ASM!EOperation) and s.source == asmUtils.getAnnotationUri("exposedGraph") and asmUtils.isBuiltInOperation(s.eContainer) and (not s.eContainer.eParameters.isEmpty or asmUtils.annotatedAsTrue(s.eContainer, "stateful"))
        
        t.consumes.add("application/json");

        s.equivalent("CreateExposedGraphPath").`post` = t;
}

/*@abstract
rule CreateExposedGraphOperationEntityIdParameter
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!ParameterReference {
        var op = s.getAnnotatedOperation();
        var interface = op.eContainingClass;
        var graph = asmUtils.resolve(s.value).orElse(null);
        var accessPoint = graph.getResolvedExposedBy();
        
        while (interface.isDefined() and not asmUtils.isMappedTransferObjectType(interface)) {
            interface = asmUtils.getContainerClass(interface);
        }
        
        if (interface.isDefined()) {
	        var entityIdParameterDeclaration = asmUtils.getEntityType(interface).get().getAccessPointAnnotation(asmUtils.getClassifierFQName(accessPoint)).equivalent("CreateEntityIdParameterDeclaration");
	        t.ref = entityIdParameterDeclaration.getReference();
        } else {
            throw "No binding found for operation: " + asmUtils.getOperationFQName(op);
        }
}

rule CreateExposedGraphGetOperationEntityIdParameter
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!ParameterReference
    extends CreateExposedGraphOperationEntityIdParameter {
        guard: s.key.startsWith(".graphs.") and s.getAnnotatedOperation().isDefined() and (s.getAnnotatedOperation().eParameters.isEmpty() and asmUtils.annotatedAsFalse(s.getAnnotatedOperation(), "stateful"))
        
        s.equivalent("CreateExposedGraphGetOperation").parameters.add(t);
}

rule CreateExposedGraphPostOperationEntityIdParameter
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!ParameterReference
    extends CreateExposedGraphOperationEntityIdParameter {
        guard: s.key.startsWith(".graphs.") and s.getAnnotatedOperation().isDefined() and (not s.getAnnotatedOperation().eParameters.isEmpty() or asmUtils.annotatedAsTrue(s.getAnnotatedOperation(), "stateful"))
        
        s.equivalent("CreateExposedGraphPostOperation").parameters.add(t);
} */

@abstract
rule CreateExposedGraphOperationResponse
    transform s : ASM!EAnnotation
    to t : OPENAPI!OperationResponse {
        if (s.eContainer.eType.isDefined()) {
            t.code = "200";
        } else {
            t.code = "204";
            t.response = new OPENAPI!ResponseDefinition;
            t.response.description = "No content";
        }
}

rule CreateExposedGraphGetOperationResponse
    transform s : ASM!EAnnotation
    to t : OPENAPI!OperationResponse
    extends CreateExposedGraphOperationResponse {
        guard: s.eContainer.isKindOf(ASM!EOperation) and s.eContainer.eType.isDefined() and s.source == asmUtils.getAnnotationUri("exposedGraph") and asmUtils.isBuiltInOperation(s.eContainer) and s.eContainer.eParameters.isEmpty and asmUtils.annotatedAsFalse(s.eContainer, "stateful")
        
        s.equivalent("CreateExposedGraphGetOperation").responses.add(t);
}

rule CreateExposedGraphPostOperationResponse
    transform s : ASM!EAnnotation
    to t : OPENAPI!OperationResponse
    extends CreateExposedGraphOperationResponse {
        guard: s.eContainer.isKindOf(ASM!EOperation) and s.eContainer.eType.isDefined() and s.source == asmUtils.getAnnotationUri("exposedGraph") and asmUtils.isBuiltInOperation(s.eContainer) and (not s.eContainer.eParameters.isEmpty or asmUtils.annotatedAsTrue(s.eContainer, "stateful"))

        s.equivalent("CreateExposedGraphPostOperation").responses.add(t);
}

@abstract
rule CreateExposedGraphOperationResponseDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!OperationResponseDefinition {
    
        t.description = "Operation completed successfully";
}

rule CreateExposedGraphGetOperationResponseDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!ResponseDefinition
    extends CreateExposedGraphOperationResponseDefinition {
        guard: s.eContainer.isKindOf(ASM!EOperation) and s.eContainer.eType.isDefined() and s.source == asmUtils.getAnnotationUri("exposedGraph") and asmUtils.isBuiltInOperation(s.eContainer) and s.eContainer.eParameters.isEmpty and asmUtils.annotatedAsFalse(s.eContainer, "stateful")

        s.equivalent("CreateExposedGraphGetOperationResponse").response = t;
}

rule CreateExposedGraphPostOperationResponseDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!ResponseDefinition
    extends CreateExposedGraphOperationResponseDefinition {
        guard: s.eContainer.isKindOf(ASM!EOperation) and s.eContainer.eType.isDefined() and s.source == asmUtils.getAnnotationUri("exposedGraph") and asmUtils.isBuiltInOperation(s.eContainer) and (not s.eContainer.eParameters.isEmpty or asmUtils.annotatedAsTrue(s.eContainer, "stateful"))

        s.equivalent("CreateExposedGraphPostOperationResponse").response = t;
}

rule CreateExposedGraphOperationResponseDefinitionSchema
    transform s : ASM!EAnnotation
    to t : OPENAPI!Schema {
        guard: s.eContainer.isKindOf(ASM!EOperation) and s.eContainer.eType.isDefined() and s.source == asmUtils.getAnnotationUri("exposedGraph") and asmUtils.isBuiltInOperation(s.eContainer)
        
        if (s.eContainer.eParameters.isEmpty and asmUtils.annotatedAsFalse(s.eContainer, "stateful")) {
            s.equivalent("CreateExposedGraphGetOperationResponseDefinition").schema = t;
        } else if (not s.eContainer.eParameters.isEmpty or asmUtils.annotatedAsTrue(s.eContainer, "stateful")) {
            s.equivalent("CreateExposedGraphPostOperationResponseDefinition").schema = t;
        }
}

rule CreateExposedGraphOperationResponseDefinitionSchemaReference
    transform s : ASM!EAnnotation
    to t : OPENAPI!SchemaReference {
        guard: s.eContainer.isKindOf(ASM!EOperation) and s.eContainer.eType.isDefined() and s.source == asmUtils.getAnnotationUri("exposedGraph") and asmUtils.isBuiltInOperation(s.eContainer)
        
        var graph = asmUtils.getExposedGraphByFqName(s.details.get("value"));

        var transferObjectTypeExposedByAnnotation = asmUtils.getExtensionAnnotationListByName(s.eContainer.eType, "exposedBy").selectOne(a | a.details.get("value") == asmUtils.getClassifierFqName(graph.get().eContainer));
        if (transferObjectTypeExposedByAnnotation.isDefined()) {
	        if (s.eContainer.many) {
	            t.ref = transferObjectTypeExposedByAnnotation.equivalent("CreateTransferObjectArraySchemaDeclaration").getReference();
	        } else {
	            t.ref = transferObjectTypeExposedByAnnotation.equivalent("CreateTransferObjectSingleSchemaDeclaration").getReference();
	        }
        }
        
        s.equivalent("CreateExposedGraphOperationResponseDefinitionSchema").ref = t;
}
