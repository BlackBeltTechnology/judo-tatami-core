import "../../../operations/asm/_importAll.eol";

@cached
operation getAllAccessPoints() : Collection {
    return ASM!EClass.all.select(c | c.isAccessPoint());
}

@cached
operation getAllStatelessOperations() : Collection {
    return ASM!EOperation.all.select(o | o.isStateless());
}

@cached
operation getAllMappedTransferObjectTypes() : Collection {
    return ASM!EClass.all.select(c | c.isMappedTransferObjectType());
}

@cached
operation getAllExposedGraphs() : Collection {
    return ASM!EClass.all.select(c | c.isExposedGraph());
}

@cached
operation ASM!EClass isAccessPoint() : Boolean {
    return self.interface and self.annotatedAsTrue("accessPoint");
}

@cached
operation ASM!EOperation isStateless() : Boolean {
    var exposedBy = self.getAnnotationValue("exposedBy", false);
    if (exposedBy.isDefined()) {
        return exposedBy.resolve().isAccessPoint() and self.annotatedAsFalse("stateful");
    } else {
        return false;
    }
}

@cached
operation ASM!EClass isMappedTransferObjectType() : Boolean {
    return self.hasAnnotation("mappedEntityType");    
}
@cached
operation ASM!EClass getResolvedExposedBy() : ASM!EClass {
    var exposedBy = self.getAnnotationValue("exposedBy", false);
    if (exposedBy.isDefined()) {
        return exposedBy.resolve();
    } else {
        return null;
    }
}

@cached
operation ASM!EClass getResolvedRoot() : ASM!EClass {
    var root = self.getAnnotationValue("root", false);
    if (root.isDefined()) {
        return root.resolve();
    } else {
        return null;
    } 
}

@cached
operation ASM!EClass isExposedGraph() : Boolean {
    var exposedBy = self.getResolvedExposedBy();
    var root = self.getResolvedRoot();
    
    if (exposedBy.isDefined() and root.isDefined()) {
        return exposedBy.isAccessPoint() and root.isMappedTransferObjectType() and self.interface;
    } else {
        return false;
    }
}

@cached
operation ASM!EClass getExposedGraphName() : String {
    if (self.isExposedGraph()) {
        return self.name.substring(self.getContainerClass().name.length + 1);
    } else {
        return null;
    }
}

@cached
operation ASM!EClass getGraphs() : Collection {
	var annotations = self.eAnnotations.selectOne(a | a.source = extendedMetadataURI);
	if (annotations.isDefined()) {
		return annotations.details.select(d | d.key.startsWith("graphs.")).collect(d | d.value.resolve());
	} else {
		return new Set;
	}
}

@cached
operation ASM!EClass getExposedMappedTransferObjectTypes() : Collection {
    if (self.isExposedGraph()) {
        return getAllMappedTransferObjectTypes().select(t | t.getGraphs().contains(self));
    } else {
        return new Sequence;
    }
}

@cached
operation ASM!EClass getNestedClasses() : Collection {
    return ASM!EClass.all.select(c | c.name.startsWith(self.name + "ʘ") and not "ʘ".isSubstringOf(c.name.substring(self.name.length() + 1)));
}

operation ASM!EClass getContainerClass() : ASM!EClass {
    return ASM!EClass.all.selectOne(c | self.name.startsWith(c.name + "ʘ") and not "ʘ".isSubstringOf(self.name.substring(c.name.length() + 1)));
}

@cached
operation ASM!EClass getExposedOperations() : Collection {
    if (self.isExposedGraph()) {
        return self.getExposedMappedTransferObjectTypes().collect(t | t.getNestedClasses()).flatten().select(og | og.interface).collect(og | og.eOperations).flatten();
    } else {
        return new Sequence;
    }
}

@cached
operation String toOpenAPIPath() : String {
    return self.replace("\\.ʘUnboundServices", "").replace("ʘ", "/").replace("\\.", "/");
}

@cached
operation ASM!EStringToStringMapEntry getAnnotation() : ASM!EAnnotation {
    return ASM!EAnnotation.all.selectOne(a | a.details.contains(self));
}

pre {
    // add graphs annotations to transfer object relations and built-in operations
    for (g in getAllExposedGraphs()) {
        log.debug("Exposed graph: " + g.getFQName());
        
        log.debug("  - access point: " + g.getResolvedExposedBy().getFQName());
        log.debug("  - mapped transfer object types: " + g.getExposedMappedTransferObjectTypes().collect(t | t.getFQName()));
        log.debug("  - operations: " + g.getExposedOperations().collect(o | o.eContainingClass.getFQName() + "#" + o.name));
        
        for (o in g.getExposedOperations()) {
            var annotation = o.eAnnotations.selectOne(a | a.source = extendedMetadataURI);
            if (not annotation.isDefined()) {
                annotation = new ASM!EAnnotation;
		        annotation.source = extendedMetadataURI;
		        o.eAnnotations.add(annotation);
            }
            var index = annotation.details.select(d | d.key.startsWith("graphs.")).size();
            var aGraph = new ASM!EStringToStringMapEntry;
		    aGraph.key = "graphs." + index;
		    aGraph.value = g.getFQName();
		    annotation.details.add(aGraph);
        }
    }
}

rule CreateOpenAPIAccessPoint
    transform s : ASM!EClass
    to t : OPENAPI!Root {
        guard: s.isAccessPoint()
        
        t.api = new OPENAPI!API;
        t.api.swagger = "2.0";

        t.api.info = new OPENAPI!Info;
        t.api.info.version = "1.0.0"; // TODO
        t.api.info.title = s.name;

        t.api.host = "localhost:8080"; // TODO
        t.api.basePath = "/" + s.getFQName().toOpenAPIPath();
}

rule ExposeUnboundOperaion
    transform s : ASM!EOperation
    to t : OPENAPI!Path {
        guard: s.isStateless()
        
        var accessPoint = s.getAnnotationValue("exposedBy").resolve();
        
        t.relativePath = "/" + s.eContainingClass.getFQName().toOpenAPIPath() + "/" + s.name;
        
        s.getAnnotationValue("exposedBy").resolve().equivalent("CreateOpenAPIAccessPoint").api.paths.add(t);
}

rule CreatePath
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Path {
        guard: s.key.startsWith("graphs.")
        
        var a = s.getAnnotation();
        if (a.isDefined() and a.eModelElement.isKindOf(ASM!EOperation)) {
            var op = a.eModelElement;
            var opGroup = op.eContainingClass;
            var graph = opGroup.getContainerClass().getGraphs().selectOne(g | g.getFQName() == s.value);
            var accessPoint = graph.getResolvedExposedBy();
            
            t.relativePath = "/" + graph.getExposedGraphName() + "/" + opGroup.getFQName().toOpenAPIPath() + "/" + op.name;
            
            accessPoint.equivalent("CreateOpenAPIAccessPoint").api.paths.add(t);
        } else {
            // no annotation found
            delete t;
        }
}
