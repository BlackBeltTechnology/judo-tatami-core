import "../../../operations/asm/_importAll.eol";

@cached
operation String toOpenAPIPath() : String {
    return self.replace("\\.ʘUnboundServices", "").replace("ʘ", "/").replace("\\.", "/");
}

@cached
operation ASM!EOperation getResolvedExposedBy() : ASM!EClass {
    var exposedBy = self.getAnnotationValue("exposedBy", false);
    if (exposedBy.isDefined()) {
        return exposedBy.resolve();
    } else {
        return null;
    }
}

@cached
operation String toOpenAPIName() : String {
    //return self.replaceAll("\\.", "\\$").replace("[^0-9a-zA-Z_\\$]", "");
    return self.replace("[^0-9a-zA-Z_]", "_");
}

pre {
    // add graphs annotations to transfer object relations and built-in operations
    for (g in getAllExposedGraphs()) {
        log.debug("Exposed graph: " + g.getFQName());
        
        log.debug("  - access point: " + g.getResolvedExposedBy().getFQName());
        log.debug("  - mapped transfer object types: " + g.getExposedMappedTransferObjectTypes().collect(t | t.getFQName()));
        log.debug("  - operations: " + g.getExposedOperations().collect(o | o.eContainingClass.getFQName() + "#" + o.name));
        
        for (o in g.getExposedOperations()) {
            // get (and create is not exists) annotation on exposed operation
            var annotation = o.getExtensionAnnotation(true);
            
            // add FQ name of exposed graph as annotation value (key: .graphs.*)
            var index = annotation.details.select(d | d.key.startsWith(".graphs.")).size();
            if (not annotation.details.selectOne(d | d.key.startsWith(".graphs.") and d.value == g.getFQName()).isDefined()) {
                var aGraphs = new ASM!EStringToStringMapEntry;
		        aGraphs.key = ".graphs." + index;
		        aGraphs.value = g.getFQName();
		        annotation.details.add(aGraphs);
            }
        }
    }
    
    for (ap in getAllAccessPoints()) {
        log.debug("Access point: ");
        log.debug("  - mapped transfer object types: " + ap.getExposedMappedTransferObjectTypes().collect(t | t.getFQName()));
        
        for (transferObject in ap.getExposedMappedTransferObjectTypes()) {
            // get (and create is not exists) annotation on exposed mapped transfer object type
            var annotation = transferObject.getExtensionAnnotation(true);
            
            // add FQ name of access point as annotation value (key: .accessPoints.*)
            var index = annotation.details.select(d | d.key.startsWith(".accessPoints.")).size();
            if (not annotation.details.selectOne(d | d.key.startsWith(".accessPoints.") and d.value == ap.getFQName()).isDefined()) {
                var aAccessPoints = new ASM!EStringToStringMapEntry;
		        aAccessPoints.key = ".accessPoints." + index;
		        aAccessPoints.value = ap.getFQName();
		        annotation.details.add(aAccessPoints);
            }
            
            // get (and create is not exists) annotation on entity type
            var entityAnnotation = transferObject.getEntityType().getExtensionAnnotation(true);
            
            // add FQ name of access point as annotation value (key: .accessPoints.*)
            var index = entityAnnotation.details.select(d | d.key.startsWith(".accessPoints.")).size();
            if (not entityAnnotation.details.selectOne(d | d.key.startsWith(".accessPoints.") and d.value == ap.getFQName()).isDefined()) {
                var aAccessPoints = new ASM!EStringToStringMapEntry;
		        aAccessPoints.key = ".accessPoints." + index;
		        aAccessPoints.value = ap.getFQName();
		        entityAnnotation.details.add(aAccessPoints);
            }
        }
    }
}

rule CreateOpenAPIAccessPoint
    transform s : ASM!EClass
    to t : OPENAPI!Root {
        guard: s.isAccessPoint()
        
        t.api = new OPENAPI!API;
        t.api.swagger = "2.0";

        t.api.info = new OPENAPI!Info;
        t.api.info.version = "1.0.0"; // TODO
        t.api.info.title = s.name;

        t.api.host = "localhost:8080"; // TODO
        t.api.basePath = "/" + s.getFQName().toOpenAPIPath();
        
        t.api.schemes.add(OPENAPI!SchemeType#http);
        t.api.schemes.add(OPENAPI!SchemeType#https);
        t.api.produces.add("application/json");
        
        var internalServerError = new OPENAPI!Response;
        internalServerError.description = "Internal server error";
        internalServerError.code = "500";
        internalServerError.referenceName = "_internalServerError";
        t.api.responses.add(internalServerError);
}

rule ExposeUnboundOperaion
    transform s : ASM!EOperation
    to t : OPENAPI!Path {
        guard: s.isStateless()
        
        var accessPoint = s.getAnnotationValue("exposedBy").resolve();
        
        t.relativePath = "/" + s.eContainingClass.getFQName().toOpenAPIPath() + "/" + s.name;
        
        var apiOperation;
        if (s.eParameters.isEmpty() and s.annotatedAsFalse("stateful")) {
            t.`get` = new OPENAPI!Operation;
            apiOperation = t.`get`;
        } else {
            t.`post` = new OPENAPI!Operation;
            apiOperation = t.`post`;
            if (not s.eParameters.isEmpty()) {
                apiOperation.consumes.add("application/json");
            }
        }

        // TODO - produces property is defined globally (but not serilized)
        if (s.eType.isDefined()) {
            apiOperation.produces.add("application/json");
        }

        apiOperation.responses.add(accessPoint.equivalent("CreateOpenAPIAccessPoint").api.responses.selectOne(r | r.code == "500"));
        
        s.getResolvedExposedBy().equivalent("CreateOpenAPIAccessPoint").api.paths.add(t);
}

@cached
operation ASM!EStringToStringMapEntry getOperation() : ASM!EOperation {
    var a = self.getAnnotation();
    if (a.isDefined() and a.eModelElement.isKindOf(ASM!EOperation)) {
        return a.eModelElement;
    } else {
        return null;
    }
}

@cached
operation ASM!EStringToStringMapEntry getClass() : ASM!EClass {
    var a = self.getAnnotation();
    if (a.isDefined() and a.eModelElement.isKindOf(ASM!EClass)) {
        return a.eModelElement;
    } else {
        return null;
    }
}

rule CreateEntityIdParameter
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Parameter {
        guard: s.key.startsWith(".accessPoints.") and s.getClass().isDefined() and s.getClass().isEntity()
        
        var accessPoint = getAllAccessPoints().selectOne(ap | ap.getFQName() == s.value);
        
        t.name = "__id"; // s.getClass().getFQName().toOpenAPIName();
        t.location = OPENAPI!ParameterLocation#header;
        t.type = OPENAPI!JSONDataType#string;
        t.description = "ID of " + s.getClass().name + " instance";
        t.required = true;
        
        //t.referenceName = s.getClass().name; // FIXME
        
        accessPoint.equivalent("CreateOpenAPIAccessPoint").paramters.add(t);
        t.declaringContext = accessPoint.equivalent("CreateOpenAPIAccessPoint").api;
}

rule CreateSingleSchema
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Schema {
        guard: s.key.startsWith(".accessPoints.") and s.getClass().isDefined() and s.getClass().isMappedTransferObjectType()
        
        var accessPoint = getAllAccessPoints().selectOne(ap | ap.getFQName() == s.value);
        
        t.name = "__single__" + s.getClass().getFQName().toOpenAPIName();
        t.type = OPENAPI!JSONDataType#object;
        
        var idProperty = new OPENAPI!Schema;
        idProperty.name = "__id";
        idProperty.type = OPENAPI!JSONDataType#string;
        
        t.properties.add(idProperty);
        t.required.add(idProperty);
        
        accessPoint.equivalent("CreateOpenAPIAccessPoint").schemas.addAll(Set{idProperty});
        accessPoint.equivalent("CreateOpenAPIAccessPoint").schemas.add(t);
        
        accessPoint.equivalent("CreateOpenAPIAccessPoint").api.definitions.add(t);
        t.declaringContext = accessPoint.equivalent("CreateOpenAPIAccessPoint").api;
}

rule CreateArraySchema
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Schema {
        guard: s.key.startsWith(".accessPoints.") and s.getClass().isDefined() and s.getClass().isMappedTransferObjectType()
        
        var accessPoint = getAllAccessPoints().selectOne(ap | ap.getFQName() == s.value);
        
        t.name = "__array__" + s.getClass().getFQName().toOpenAPIName();
        t.type = OPENAPI!JSONDataType#array;
        t.items = s.equivalent("CreateSingleSchema");
        
        accessPoint.equivalent("CreateOpenAPIAccessPoint").schemas.add(t);
}

rule CreateSingleResponse
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Response {
        guard: s.key.startsWith(".accessPoints.") and s.getClass().isDefined() and s.getClass().isMappedTransferObjectType()
        
        var accessPoint = getAllAccessPoints().selectOne(ap | ap.getFQName() == s.value);
        
        t.code = "200";
        t.description = "Single " + s.getClass().name + " object";
        
        t.schema = s.equivalent("CreateSingleSchema");
        
        accessPoint.equivalent("CreateOpenAPIAccessPoint").api.responses.add(t);
}

rule CreateArrayResponse
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Response {
        guard: s.key.startsWith(".accessPoints.") and s.getClass().isDefined() and s.getClass().isMappedTransferObjectType()
        
        var accessPoint = getAllAccessPoints().selectOne(ap | ap.getFQName() == s.value);
        
        t.code = "200";
        t.description = "Array of " + s.getClass().name + " objects";
        
        t.schema = s.equivalent("CreateArraySchema");
        
        accessPoint.equivalent("CreateOpenAPIAccessPoint").api.responses.add(t);
}

// TODO - create GET method for graph (entry point)

rule CreatePath
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Path {
        guard: s.key.startsWith(".graphs.") and s.getOperation().isDefined()

        var op = s.getOperation();
        var opGroup = op.eContainingClass;
        var graph = opGroup.getContainerClass().getGraphs().selectOne(g | g.getFQName() == s.value);
        var accessPoint = graph.getResolvedExposedBy();

        t.relativePath = "/" + graph.getExposedGraphName() + "/" + opGroup.getFQName().toOpenAPIPath() + "/" + op.name;

        var apiOperation;
        if (op.eParameters.isEmpty() and op.annotatedAsFalse("stateful")) {
            t.`get` = new OPENAPI!Operation;
            apiOperation = t.`get`;
        } else {
            t.`post` = new OPENAPI!Operation;
            apiOperation = t.`post`;
            if (not op.eParameters.isEmpty()) {
                apiOperation.consumes.add("application/json");
            }
        }
        apiOperation.tagReferences.add(graph.equivalent("CreateTag").name);
        // apiOperation.operationId = ... // TODO
        var entityAnnotation = opGroup.getContainerClass().getEntityType().getExtensionAnnotation(false);
        if (not entityAnnotation.isDefined()) {
            throw "Entity of operation is not prepared with annotation";
        }
        apiOperation.parameters.add(entityAnnotation.details.selectOne(d | d.value == accessPoint.getFQName()).equivalent("CreateEntityIdParameter"));
        
        if (op.eType.isDefined()) {
            // TODO - produces property is defined globally (but not serilized)
            apiOperation.produces.add("application/json");
            
            if (op.eType.isMappedTransferObjectType()) {
                var transferObjectAnnotation = op.eType.getExtensionAnnotation(false);
                if (not transferObjectAnnotation.isDefined()) {
                    throw "Transfer object is not prepared with annotation";
                }
                
                if (op.many) {
                    apiOperation.responses.add(transferObjectAnnotation.details.selectOne(d | d.value == accessPoint.getFQName()).equivalent("CreateArrayResponse"));
                } else {
                    apiOperation.responses.add(transferObjectAnnotation.details.selectOne(d | d.value == accessPoint.getFQName()).equivalent("CreateSingleResponse"));
                }
            }
        }
            
        for (p in op.eParameters) {
            var p = op.eParameters.first();
            
            // TODO: check is p.eType is not null
            if (p.eType.isDefined() and p.eType.isMappedTransferObjectType()) {
                // create ID parameter (it is mandatory because path is related to bound operation)
                
                var input = new OPENAPI!Parameter;
                
                if (p.eType.eAttributes.isEmpty()) {
	                input.name = "__id__" + p.name;
	                // FIXME - add to body!
	                input.location = OPENAPI!ParameterLocation#header;
	                input.description = "ID of " + opGroup.getContainerClass().getEntityType().name + " instance";
	                
	                if (p.isMany) {
	                    input.type = OPENAPI!JSONDataType#string;
	                    
	                    // TODO - create array, add 
	                    //input.type = OPENAPI!JSONDataType#array;
	                    //input.items = new OPENAPI!Schema;
	                    //input.items.type = OPENAPI!JSONDataType#string;
	                } else {
	                    input.type = OPENAPI!JSONDataType#string;
	                }
                } else {
	                //input.name = p.name;
	                //input.location = OPENAPI!ParameterLocation#body;
	                
                    throw "Not supported yet";
	                /*if (p.isMany) {
	                } else {
	                } */
                }
	            input.required = p.required;
                
                apiOperation.parameters.add(input);
                
                accessPoint.equivalent("CreateOpenAPIAccessPoint").paramters.add(input);
                input.declaringContext = accessPoint.equivalent("CreateOpenAPIAccessPoint").api;
            } else {
                throw "Not supported yet";
            }
        }

        apiOperation.responses.add(accessPoint.equivalent("CreateOpenAPIAccessPoint").api.responses.selectOne(r | r.code == "500"));

        accessPoint.equivalent("CreateOpenAPIAccessPoint").api.paths.add(t);
}

rule CreateTag
    transform s : ASM!EClass
    to t : OPENAPI!Tag {
        guard: s.isExposedGraph()
        
        t.name = s.getExposedGraphName().toOpenAPIName();
        
        s.getResolvedExposedBy().equivalent("CreateOpenAPIAccessPoint").api.tags.add(t);
}
