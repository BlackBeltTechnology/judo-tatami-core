import "../../../operations/asm/_importAll.eol";

@cached
operation String toOpenAPIPath() : String {
    return self.replace("\\.ʘUnboundServices", "").replace("ʘ", "/").replace("\\.", "/");
}

@cached
operation ASM!EOperation getResolvedExposedBy() : ASM!EClass {
    var exposedBy = self.getAnnotationValue("exposedBy", false);
    if (exposedBy.isDefined()) {
        return exposedBy.resolve();
    } else {
        return null;
    }
}

pre {
    // add graphs annotations to transfer object relations and built-in operations
    for (g in getAllExposedGraphs()) {
        log.debug("Exposed graph: " + g.getFQName());
        
        log.debug("  - access point: " + g.getResolvedExposedBy().getFQName());
        log.debug("  - mapped transfer object types: " + g.getExposedMappedTransferObjectTypes().collect(t | t.getFQName()));
        log.debug("  - operations: " + g.getExposedOperations().collect(o | o.eContainingClass.getFQName() + "#" + o.name));
        
        for (o in g.getExposedOperations()) {
            var annotation = o.eAnnotations.selectOne(a | a.source = extendedMetadataURI);
            if (not annotation.isDefined()) {
                annotation = new ASM!EAnnotation;
		        annotation.source = extendedMetadataURI;
		        o.eAnnotations.add(annotation);
            }
            var index = annotation.details.select(d | d.key.startsWith("graphs.")).size();
            var aGraph = new ASM!EStringToStringMapEntry;
		    aGraph.key = "graphs." + index;
		    aGraph.value = g.getFQName();
		    annotation.details.add(aGraph);
        }
    }
}

rule CreateOpenAPIAccessPoint
    transform s : ASM!EClass
    to t : OPENAPI!Root {
        guard: s.isAccessPoint()
        
        t.api = new OPENAPI!API;
        t.api.swagger = "2.0";

        t.api.info = new OPENAPI!Info;
        t.api.info.version = "1.0.0"; // TODO
        t.api.info.title = s.name;

        t.api.host = "localhost:8080"; // TODO
        t.api.basePath = "/" + s.getFQName().toOpenAPIPath();
        
        var internalServerError = new OPENAPI!Response;
        internalServerError.description = "Internal server error";
        internalServerError.code = "500";
        t.api.responses.add(internalServerError);
}

rule ExposeUnboundOperaion
    transform s : ASM!EOperation
    to t : OPENAPI!Path {
        guard: s.isStateless()
        
        var accessPoint = s.getAnnotationValue("exposedBy").resolve();
        
        t.relativePath = "/" + s.eContainingClass.getFQName().toOpenAPIPath() + "/" + s.name;
        
        s.getResolvedExposedBy().equivalent("CreateOpenAPIAccessPoint").api.paths.add(t);
}

rule CreatePath
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Path {
        guard: s.key.startsWith("graphs.")
        
        var a = s.getAnnotation();
        if (a.isDefined() and a.eModelElement.isKindOf(ASM!EOperation)) {
            var op = a.eModelElement;
            var opGroup = op.eContainingClass;
            var graph = opGroup.getContainerClass().getGraphs().selectOne(g | g.getFQName() == s.value);
            var accessPoint = graph.getResolvedExposedBy();
            
            t.relativePath = "/" + graph.getExposedGraphName() + "/" + opGroup.getFQName().toOpenAPIPath() + "/" + op.name;
            
            var apiOperation;
            if (op.eParameters.isEmpty() and op.annotatedAsFalse("stateful")) {
                t.`get` = new OPENAPI!Operation;
                apiOperation = t.`get`;
            } else {
                t.`post` = new OPENAPI!Operation;
                apiOperation = t.`post`;
                if (not op.eParameters.isEmpty()) {
                    apiOperation.consumes.add("application/json");
                }
            }
            apiOperation.tagReferences.add(graph.equivalent("CreateTag").name);
            if (op.eType.isDefined()) {
                apiOperation.produces.add("application/json");
            }
            
            apiOperation.responses.add(accessPoint.equivalent("CreateOpenAPIAccessPoint").api.responses.selectOne(r | r.code == "500"));
            
            accessPoint.equivalent("CreateOpenAPIAccessPoint").api.paths.add(t);
        } else {
            // no annotation found
            delete t;
        }
}

rule CreateTag
    transform s : ASM!EClass
    to t : OPENAPI!Tag {
        guard: s.isExposedGraph()
        
        t.name = s.getExposedGraphName();
        
        s.getResolvedExposedBy().equivalent("CreateOpenAPIAccessPoint").api.tags.add(t);
}
