import "../../../operations/asm/_importAll.eol";

@cached
operation String toOpenAPIPath() : String {
    return self.replace("\\.ʘUnboundServices", "").replace("[ʘ#\\.]", "/").replace("[^0-9a-zA-Z_/]", "_");
}

@cached
operation ASM!EOperation getResolvedExposedBy() : ASM!EClass {
    var exposedBy = self.getAnnotationValue("exposedBy", false);
    if (exposedBy.isDefined()) {
        return exposedBy.resolve();
    } else {
        return null;
    }
}

@cached
operation String toOpenAPIName() : String {
    return self.replace("[^0-9a-zA-Z_]", "_");
}

@cached
operation ASM!EStringToStringMapEntry getOperation() : ASM!EOperation {
    var a = self.getAnnotation();
    if (a.isDefined() and a.eModelElement.isKindOf(ASM!EOperation)) {
        return a.eModelElement;
    } else {
        return null;
    }
}

@cached
operation ASM!EStringToStringMapEntry getAttribute() : ASM!EAttribute {
    var a = self.getAnnotation();
    if (a.isDefined() and a.eModelElement.isKindOf(ASM!EAttribute)) {
        return a.eModelElement;
    } else {
        return null;
    }
}

@cached
operation ASM!EStringToStringMapEntry getReference() : ASM!EReference {
    var a = self.getAnnotation();
    if (a.isDefined() and a.eModelElement.isKindOf(ASM!EReference)) {
        return a.eModelElement;
    } else {
        return null;
    }
}

@cached
operation ASM!EStringToStringMapEntry getParameter() : ASM!EParameter {
    var a = self.getAnnotation();
    if (a.isDefined() and a.eModelElement.isKindOf(ASM!EParameter)) {
        return a.eModelElement;
    } else {
        return null;
    }
}

@cached
operation ASM!EStringToStringMapEntry getClass() : ASM!EClass {
    var a = self.getAnnotation();
    if (a.isDefined() and a.eModelElement.isKindOf(ASM!EClass)) {
        return a.eModelElement;
    } else {
        return null;
    }
}

operation ASM!EClass getAccessPointAnnotation(accessPointFQName : String) : ASM!EStringToStringMapEntry {
    var annotation = self.getExtensionAnnotation(true);
    if (annotation.isDefined()) {
        return annotation.details.selectOne(d | d.key.startsWith(".accessPoints.") and d.value == accessPointFQName);
    }
}

operation ASM!EModelElement addAnnotationIfNotExists(prefix: String, value: String) {
    // get (and create is not exists) annotation
    var annotation = self.getExtensionAnnotation(true);
    
    // add values as annotation detail (key is prefixed)
    var index = annotation.details.select(d | d.key.startsWith(prefix)).size();
    if (not annotation.details.selectOne(d | d.key.startsWith(prefix) and d.value == value).isDefined()) {
        var aDetail = new ASM!EStringToStringMapEntry;
        aDetail.key = prefix + index;
        aDetail.value = value;
        annotation.details.add(aDetail);
    }
}

pre {
    // add graphs and access point annotations to transfer object relations and built-in operations
    for (g in getAllExposedGraphs()) {
        log.debug("Exposed graph: " + g.getFQName());
        log.debug("  - access point: " + g.getResolvedExposedBy().getFQName());
        log.debug("  - mapped transfer object types: " + g.getExposedMappedTransferObjectTypes().collect(t | t.getFQName()));
        
        for (o in g.getExposedOperations()) {
            log.debug("  - exposed operation: " + o.getFQName());
            o.addAnnotationIfNotExists(".graphs.", g.getFQName());
            
            if (o.eType.isDefined()) {
                log.debug("    - return type: " + o.eType.getFQName());
                o.addAnnotationIfNotExists(".accessPoints.", g.getResolvedExposedBy().getFQName());
                for (a in o.eType.eAttributes) {
                    log.debug("      - attribute: " + a.getFQName());
                    a.addAnnotationIfNotExists(".accessPoints.", g.getResolvedExposedBy().getFQName());
                }
                for (r in o.eType.eReferences) {
                    log.debug("      - reference: " + r.getFQName());
                    r.addAnnotationIfNotExists(".accessPoints.", g.getResolvedExposedBy().getFQName());
                }
            }
            
            for (p in o.eParameters.select(p | p.eType.isDefined())) {
                log.debug("    - parameter: " + p.name + ", type: " + p.eType.getFQName());
                p.addAnnotationIfNotExists(".accessPoints.", g.getResolvedExposedBy().getFQName());
                p.eType.addAnnotationIfNotExists(".accessPoints.", g.getResolvedExposedBy().getFQName());
                
                for (a in p.eType.eAttributes) {
                    log.debug("      - attribute: " + a.getFQName());
                    a.addAnnotationIfNotExists(".accessPoints.", g.getResolvedExposedBy().getFQName());
                }
                for (r in p.eType.eReferences) {
                    log.debug("      - reference: " + r.getFQName());
                    r.addAnnotationIfNotExists(".accessPoints.", g.getResolvedExposedBy().getFQName());
                }
            }
        }
    }

    for (ap in getAllAccessPoints()) {
        log.debug("Access point: " + ap.getFQName());
        
        for (transferObject in ap.getExposedMappedTransferObjectTypes()) {
            log.debug("  - transfer object type: " + transferObject.getFQName());
            transferObject.addAnnotationIfNotExists(".accessPoints.", ap.getFQName());
            transferObject.getEntityType().addAnnotationIfNotExists(".accessPoints.", ap.getFQName());
        }

        for (exposedService in ap.getExposedServices()) {
            log.debug("  - exposed service: " + exposedService.getFQName());
            exposedService.addAnnotationIfNotExists(".accessPoints.", ap.getFQName());
            
            if (exposedService.eType.isDefined()) {
                log.debug("    - return type: " + exposedService.eType.getFQName());
                exposedService.addAnnotationIfNotExists(".accessPoints.", ap.getFQName());
                for (a in exposedService.eType.eAttributes) {
                    log.debug("      - attribute: " + a.getFQName());
                    a.addAnnotationIfNotExists(".accessPoints.", ap.getFQName());
                }
                for (r in exposedService.eType.eReferences) {
                    log.debug("      - reference: " + r.getFQName());
                    r.addAnnotationIfNotExists(".accessPoints.", ap.getFQName());
                }
            }
            
            for (p in exposedService.eParameters.select(p | p.eType.isDefined())) {
                log.debug("    - parameter: " + p.name + ",  type: " + p.eType.getFQName());
                p.addAnnotationIfNotExists(".accessPoints.", ap.getFQName());
                p.eType.addAnnotationIfNotExists(".accessPoints.", ap.getFQName());
                for (a in p.eType.eAttributes) {
                    log.debug("      - attribute: " + a.getFQName());
                    a.addAnnotationIfNotExists(".accessPoints.", ap.getFQName());
                }
                for (r in p.eType.eReferences) {
                    log.debug("      - reference: " + r.getFQName());
                    r.addAnnotationIfNotExists(".accessPoints.", ap.getFQName());
                }
            }
        }
    }
}

rule CreateOpenAPIAccessPoint
    transform s : ASM!EClass
    to t : OPENAPI!API {
        guard: s.isAccessPoint()
        
        t.swagger = "2.0";

        t.host = "localhost:8080"; // TODO
        t.basePath = "/" + s.getFQName().toOpenAPIPath();
        
        t.schemes.add(OPENAPI!SchemeType#http);
        t.schemes.add(OPENAPI!SchemeType#https);
        t.produces.add("application/json");
}

rule CreateOpenAPIAccessPointInfo
    transform s : ASM!EClass
    to t : OPENAPI!Info {
        guard: s.isAccessPoint()
        
        t.version = "1.0.0"; // TODO
        t.title = s.name;
        
        s.equivalent("CreateOpenAPIAccessPoint").info = t;
}

rule CreateInternalServerErrorDeclaration
    transform s : ASM!EClass
    to t : OPENAPI!ResponseDeclaration {
        guard: s.isAccessPoint()

        t.name = "InternalServerError";
        
        s.equivalent("CreateOpenAPIAccessPoint").responses.add(t);
}

rule CreateInternalServerErrorDefinition
    transform s : ASM!EClass
    to t : OPENAPI!ResponseDefinition {
        guard: s.isAccessPoint()

        t.description = "Internal server error";
        
        s.equivalent("CreateInternalServerErrorDeclaration").response = t;
}
