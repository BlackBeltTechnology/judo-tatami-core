import "../../../operations/openapi/_importAll.eol";

import "api.etl";

rule CreateTransferObjectSingleSchemaDeclaration
    transform s : ASM!EAnnotation
    to t : OPENAPI!SchemaDeclaration {
        guard: s.eContainer.isKindOf(ASM!EClass) and s.source == asmUtils.getAnnotationUri("exposedBy") and (not asmUtils.isEntityType(s.eContainer) or asmUtils.isMappedTransferObjectType(s.eContainer))
        
        t.name = asmUtils.getClassifierFQName(s.eContainer).toOpenAPIName();
        
        var accessPoint = asmUtils.getResolvedExposedBy(s);
        if (accessPoint.isPresent()) {
		    accessPoint.get().equivalent("CreateOpenAPIAccessPoint").definitions.add(t);
        }
}

rule CreateTransferObjectSingleSchemaDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!Schema {
        guard: s.eContainer.isKindOf(ASM!EClass) and s.source == asmUtils.getAnnotationUri("exposedBy") and (not asmUtils.isEntityType(s.eContainer) or asmUtils.isMappedTransferObjectType(s.eContainer))
        s.eContainer.getEAllSuperTypes().collect(superType | t.allOf.add(asmUtils.getExtensionAnnotationByName(superType, "exposedBy", false).get().equivalent("CreateTransferObjectSingleSchemaDefinition")));
             
        t.description = "Schema of " + s.eContainer.name + " instance";
        t.type = OPENAPI!JSONDataType#object;

        if (asmUtils.isMappedTransferObjectType(s.eContainer)) {
            var id = new OPENAPI!PropertyDeclaration;
            id.name = "__identifier";

            id.property = new OPENAPI!Property;
            id.property.description = "ID of " + asmUtils.getMappedEntityType(s.eContainer).get().name + " instance";
            id.property.type = OPENAPI!JSONDataType#string;

            t.properties.add(id);
        }
        
        s.equivalent("CreateTransferObjectSingleSchemaDeclaration").schema = t;
}

rule CreateTransferObjectArraySchemaDeclaration
    transform s : ASM!EAnnotation
    to t : OPENAPI!SchemaDeclaration {
        guard: s.eContainer.isKindOf(ASM!EClass) and s.source == asmUtils.getAnnotationUri("exposedBy") and (not asmUtils.isEntityType(s.eContainer) or asmUtils.isMappedTransferObjectType(s.eContainer))
        
        t.name = "arrayOf__" + asmUtils.getClassifierFQName(s.eContainer).toOpenAPIName();
        
        var accessPoint = asmUtils.getResolvedExposedBy(s);
        if (accessPoint.isPresent()) {
            accessPoint.get().equivalent("CreateOpenAPIAccessPoint").definitions.add(t);
        } else {
            delete t;
        }
}

rule CreateTransferObjectArraySchemaDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!Schema {
        guard: s.eContainer.isKindOf(ASM!EClass) and s.source == asmUtils.getAnnotationUri("exposedBy") and (not asmUtils.isEntityType(s.eContainer) or asmUtils.isMappedTransferObjectType(s.eContainer))
        
        t.description = "Array of " + s.eContainer.name + " instances";
        t.type = OPENAPI!JSONDataType#array;
        
        s.equivalent("CreateTransferObjectArraySchemaDeclaration").schema = t;
}

rule CreateTransferObjectArrayItemsDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!Property {
        guard: s.eContainer.isKindOf(ASM!EClass) and s.source == asmUtils.getAnnotationUri("exposedBy") and (not asmUtils.isEntityType(s.eContainer) or asmUtils.isMappedTransferObjectType(s.eContainer))
        
        t.ref = new OPENAPI!SchemaReference;
        t.ref.ref = s.equivalent("CreateTransferObjectSingleSchemaDeclaration").getReference();
        
        s.equivalent("CreateTransferObjectArraySchemaDefinition").items = t;
}
