import "../../../operations/asm/_importAll.eol";
import "../../../operations/asm/accesspoint/_importAll.eol";

import "api.etl";

rule CreateTransferObjectSingleSchemaDeclaration
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!SchemaDeclaration {
        guard: s.key.startsWith(".accessPoints.") and s.getAnnotatedClass().isDefined() and not s.getAnnotatedClass().isEntity()
        
        var accessPoint =  s.value.resolve();
        
        t.name = "__single__" + s.getAnnotatedClass().getFQName().toOpenAPIName();
        
        accessPoint.equivalent("CreateOpenAPIAccessPoint").definitions.add(t);
}

rule CreateTransferObjectSingleSchemaDefinition
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Schema {
        guard: s.key.startsWith(".accessPoints.") and s.getAnnotatedClass().isDefined() and not s.getAnnotatedClass().isEntity()
        
        t.description = "Schema of " + s.getAnnotatedClass().name;
        t.type = OPENAPI!JSONDataType#object;

        if (s.getAnnotatedClass().isMappedTransferObjectType()) {
            var id = new OPENAPI!PropertyDeclaration;
            id.name = "__id";

            id.property = new OPENAPI!Property;
            id.property.description = "ID of " + s.getAnnotatedClass().getEntityType().name + " instance";
            id.property.type = OPENAPI!JSONDataType#string;

            t.properties.add(id);
        }
        
        s.equivalent("CreateTransferObjectSingleSchemaDeclaration").schema = t;
}

rule CreateTransferObjectArraySchemaDeclaration
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!SchemaDeclaration {
        guard: s.key.startsWith(".accessPoints.") and s.getAnnotatedClass().isDefined() and not s.getAnnotatedClass().isEntity()
        
        var accessPoint = s.value.resolve();
        
        t.name = "__array__" + s.getAnnotatedClass().getFQName().toOpenAPIName();
        
        accessPoint.equivalent("CreateOpenAPIAccessPoint").definitions.add(t);
}

rule CreateTransferObjectArraySchemaDefinition
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Schema {
        guard: s.key.startsWith(".accessPoints.") and s.getAnnotatedClass().isDefined() and not s.getAnnotatedClass().isEntity()
        
        t.description = "Arrays of " + s.getAnnotatedClass().name + "s";
        t.type = OPENAPI!JSONDataType#array;
        
        s.equivalent("CreateTransferObjectArraySchemaDeclaration").schema = t;
}

rule CreateTransferObjectArrayItemsDefinition
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!Property {
        guard: s.key.startsWith(".accessPoints.") and s.getAnnotatedClass().isDefined() and not s.getAnnotatedClass().isEntity()
        
        t.ref = new OPENAPI!SchemaReference;
        t.ref.ref = s.equivalent("CreateTransferObjectSingleSchemaDeclaration").getReference();
        
        s.equivalent("CreateTransferObjectArraySchemaDefinition").items = t;
}
