import "../../../operations/openapi/_importAll.eol";

import "api.etl";

rule CreateTransferObjectSingleSchemaDeclaration
    transform s : ASM!EAnnotation
    to t : OPENAPI!SchemaDeclaration {
        guard: s.eContainer.isKindOf(ASM!EClass) and s.source == asmUtils.getAnnotationUri("exposedBy") and (not asmUtils.isEntityType(s.eContainer) or asmUtils.isMappedTransferObjectType(s.eContainer))
        
        t.name = asmUtils.getClassifierFQName(s.eContainer).toOpenAPIName();
        
        var actorType = asmUtils.getResolvedExposedBy(s);
        if (actorType.isPresent()) {
		    actorType.get().equivalent("CreateOpenAPIActorType").definitions.add(t);
        } else {
            delete t;
        }
}

rule CreateTransferObjectSingleSchemaDeclarationForDelete
    transform s : ASM!EClass
    to t : OPENAPI!SchemaDeclaration {
        guard: asmUtils.isActorType(s)

        t.name = asmUtils.getModel().get().name + "__identifier";

        t.schema = new OPENAPI!Schema;
        t.schema.description = "Schema of instance reference";
        t.schema.type = OPENAPI!JSONDataType#object;

        var signedId = new OPENAPI!PropertyDeclaration;
        signedId.name = "__signedIdentifier";

        signedId.property = new OPENAPI!Property;
        signedId.property.description = "Signed ID of instance";
        signedId.property.type = OPENAPI!JSONDataType#string;

        t.schema.properties.add(signedId);

        s.equivalent("CreateOpenAPIActorType").definitions.add(t);
}

rule CreateTransferObjectSingleSchemaDefinitionForCreateAndUpdate
    transform s : ASM!EAnnotation
    to t : OPENAPI!Schema {
        guard: s.eContainer.isKindOf(ASM!EClass) and
            s.isForCreateOrUpdate() and
            (not asmUtils.isEntityType(s.eContainer) or asmUtils.isMappedTransferObjectType(s.eContainer))

        t.description = "Schema of " + s.eContainer.name + " instance (for creation and updating)";
        t.type = OPENAPI!JSONDataType#object;

        if (asmUtils.isMappedTransferObjectType(s.eContainer) and not s.eContainer.eSuperTypes.exists(sup | asmUtils.isMappedTransferObjectType(sup))) {
            var referenceId = new OPENAPI!PropertyDeclaration;
            referenceId.name = "__referenceId";

            referenceId.property = new OPENAPI!Property;
            referenceId.property.description = "Reference ID of " + asmUtils.getMappedEntityType(s.eContainer).get().name + " instance";
            referenceId.property.type = OPENAPI!JSONDataType#string;

            t.properties.add(referenceId);
        }

        s.equivalent("CreateTransferObjectSingleSchemaDeclarationForCreateAndUpdate").schema = t;
}

rule CreateTransferObjectSingleSchemaDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!Schema {
        guard: s.eContainer.isKindOf(ASM!EClass) and s.source == asmUtils.getAnnotationUri("exposedBy") and (not asmUtils.isEntityType(s.eContainer) or asmUtils.isMappedTransferObjectType(s.eContainer))
        s.eContainer.getEAllSuperTypes().collect(superType | t.allOf.add(asmUtils.getExtensionAnnotationByName(superType, "exposedBy", false).get().equivalent("CreateTransferObjectSingleSchemaDefinition")));
             
        t.description = "Schema of " + s.eContainer.name + " instance";
        t.type = OPENAPI!JSONDataType#object;

        if (asmUtils.isMappedTransferObjectType(s.eContainer) and not s.eContainer.eSuperTypes.exists(sup | asmUtils.isMappedTransferObjectType(sup))) {
            var id = new OPENAPI!PropertyDeclaration;
            id.name = "__identifier";

            id.property = new OPENAPI!Property;
            id.property.description = "ID of " + asmUtils.getMappedEntityType(s.eContainer).get().name + " instance";
            id.property.type = OPENAPI!JSONDataType#string;
            id.property.readonly = true;

            t.properties.add(id);

            var signedId = new OPENAPI!PropertyDeclaration;
            signedId.name = "__signedIdentifier";

            signedId.property = new OPENAPI!Property;
            signedId.property.description = "Signed ID of " + asmUtils.getMappedEntityType(s.eContainer).get().name + " instance";
            signedId.property.type = OPENAPI!JSONDataType#string;

            t.properties.add(signedId);

            var referenceId = new OPENAPI!PropertyDeclaration;
            referenceId.name = "__referenceId";

            referenceId.property = new OPENAPI!Property;
            referenceId.property.description = "Reference ID of " + asmUtils.getMappedEntityType(s.eContainer).get().name + " instance";
            referenceId.property.type = OPENAPI!JSONDataType#string;

            t.properties.add(referenceId);

            var updateable = new OPENAPI!PropertyDeclaration;
            updateable.name = "__updateable";

            updateable.property = new OPENAPI!Property;
            updateable.property.type = OPENAPI!JSONDataType#boolean;
            updateable.property.readonly = true;

            t.properties.add(updateable);

            var deleteable = new OPENAPI!PropertyDeclaration;
            deleteable.name = "__deleteable";

            deleteable.property = new OPENAPI!Property;
            deleteable.property.type = OPENAPI!JSONDataType#boolean;
            deleteable.property.readonly = true;

            t.properties.add(deleteable);
        }
        
        s.equivalent("CreateTransferObjectSingleSchemaDeclaration").schema = t;
}

rule CreateTransferObjectArraySchemaDeclaration
    transform s : ASM!EAnnotation
    to t : OPENAPI!SchemaDeclaration {
        guard: s.eContainer.isKindOf(ASM!EClass) and s.source == asmUtils.getAnnotationUri("exposedBy") and (not asmUtils.isEntityType(s.eContainer) or asmUtils.isMappedTransferObjectType(s.eContainer))
        
        t.name = "arrayOf__" + asmUtils.getClassifierFQName(s.eContainer).toOpenAPIName();
        
        var actorType = asmUtils.getResolvedExposedBy(s);
        if (actorType.isPresent()) {
            actorType.get().equivalent("CreateOpenAPIActorType").definitions.add(t);
        } else {
            delete t;
        }
}

rule CreateTransferObjectArraySchemaDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!Schema {
        guard: s.eContainer.isKindOf(ASM!EClass) and s.source == asmUtils.getAnnotationUri("exposedBy") and (not asmUtils.isEntityType(s.eContainer) or asmUtils.isMappedTransferObjectType(s.eContainer))
        
        t.description = "Array of " + s.eContainer.name + " instances";
        t.type = OPENAPI!JSONDataType#array;
        
        s.equivalent("CreateTransferObjectArraySchemaDeclaration").schema = t;
}

rule CreateTransferObjectArrayItemsDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!Property {
        guard: s.eContainer.isKindOf(ASM!EClass) and s.source == asmUtils.getAnnotationUri("exposedBy") and (not asmUtils.isEntityType(s.eContainer) or asmUtils.isMappedTransferObjectType(s.eContainer))
        
        t.ref = new OPENAPI!SchemaReference;
        t.ref.ref = s.equivalent("CreateTransferObjectSingleSchemaDeclaration").getReference();
        
        s.equivalent("CreateTransferObjectArraySchemaDefinition").items = t;
}

rule CreateTransferObjectSingleSchemaDeclarationForCreateAndUpdate
    transform s : ASM!EAnnotation
    to t : OPENAPI!SchemaDeclaration {
        guard: s.eContainer.isKindOf(ASM!EClass) and
            s.isForCreateOrUpdate() and
            (not asmUtils.isEntityType(s.eContainer) or asmUtils.isMappedTransferObjectType(s.eContainer))

        t.name = asmUtils.getClassifierFQName(s.eContainer).toOpenAPIName() + "__forCreateAndUpdate";

        var actorType = asmUtils.getResolvedExposedBy(s);
        if (actorType.isPresent()) {
		    actorType.get().equivalent("CreateOpenAPIActorType").definitions.add(t);
        } else {
            delete t;
        }
}

rule CreateTransferObjectArraySchemaDeclarationForCreateAndUpdate
    transform s : ASM!EAnnotation
    to t : OPENAPI!SchemaDeclaration {
        guard: s.eContainer.isKindOf(ASM!EClass) and
            s.isForCreateOrUpdate() and
            (not asmUtils.isEntityType(s.eContainer) or asmUtils.isMappedTransferObjectType(s.eContainer))

        t.name = "arrayOf__" + asmUtils.getClassifierFQName(s.eContainer).toOpenAPIName() + "__forCreateAndUpdate";

        var actorType = asmUtils.getResolvedExposedBy(s);
        if (actorType.isPresent()) {
            actorType.get().equivalent("CreateOpenAPIActorType").definitions.add(t);
        } else {
            delete t;
        }
}

rule CreateTransferObjectArraySchemaDefinitionForCreateAndUpdate
    transform s : ASM!EAnnotation
    to t : OPENAPI!Schema {
        guard: s.eContainer.isKindOf(ASM!EClass) and
            s.isForCreateOrUpdate() and
            (not asmUtils.isEntityType(s.eContainer) or asmUtils.isMappedTransferObjectType(s.eContainer))

        t.description = "Array of " + s.eContainer.name + " instances (for creation and updating)";
        t.type = OPENAPI!JSONDataType#array;

        s.equivalent("CreateTransferObjectArraySchemaDeclarationForCreateAndUpdate").schema = t;
}

rule CreateTransferObjectArrayItemsDefinitionForCreateAndUpdate
    transform s : ASM!EAnnotation
    to t : OPENAPI!Property {
        guard: s.eContainer.isKindOf(ASM!EClass) and
            s.isForCreateOrUpdate() and
            (not asmUtils.isEntityType(s.eContainer) or asmUtils.isMappedTransferObjectType(s.eContainer))

        t.ref = new OPENAPI!SchemaReference;
        t.ref.ref = s.equivalent("CreateTransferObjectSingleSchemaDeclarationForCreateAndUpdate").getReference();

        s.equivalent("CreateTransferObjectArraySchemaDefinitionForCreateAndUpdate").items = t;
}
