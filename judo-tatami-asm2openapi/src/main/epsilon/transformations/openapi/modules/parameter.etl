import "api.etl";
import "schema.etl";

rule CreateEntityIdParameterDeclaration
    transform s : ASM!EAnnotation
    to t : OPENAPI!ParameterDeclaration {
        guard: s.eContainer.isKindOf(ASM!EClass) and s.source == asmUtils.getAnnotationUri("exposedBy") and asmUtils.isEntityType(s.eContainer)
        
        t.name = "__identifier__" + asmUtils.getClassifierFQName(s.eContainer).toOpenAPIName();
        
        var accessPoint = asmUtils.getResolvedExposedBy(s);
        if (accessPoint.isPresent()) {
            accessPoint.get().equivalent("CreateOpenAPIAccessPoint").parameters.add(t);
        } else {
            delete t;
        }
}

rule CreateEntityIdParameterDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!ParameterDefinition {
        guard: s.eContainer.isKindOf(ASM!EClass) and s.source == asmUtils.getAnnotationUri("exposedBy") and asmUtils.isEntityType(s.eContainer)
        
        t.name = "__identifier";
        t.`in` = OPENAPI!ParameterLocation#header;
        t.type = OPENAPI!JSONDataType#string;
        t.description = "ID of " + s.eContainer.name + " instance";
        t.required = true;
        
        s.equivalent("CreateEntityIdParameterDeclaration").parameter = t;
}

rule CreateParameterDeclaration
    transform s : ASM!EAnnotation
    to t : OPENAPI!ParameterDeclaration {
        guard: s.eContainer.isKindOf(ASM!EParameter) and s.source == asmUtils.getAnnotationUri("exposedBy")
        
        t.name = (asmUtils.getOperationFQName(s.eContainer.eOperation) + "__" + s.eContainer.name).toOpenAPIName();
        
        var accessPoint = asmUtils.getResolvedExposedBy(s);
        if (accessPoint.isPresent()) {
            accessPoint.get().equivalent("CreateOpenAPIAccessPoint").parameters.add(t);
        } else {
            delete t;
        }
}

rule CreateParameterDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!ParameterDefinition {
        guard: s.eContainer.isKindOf(ASM!EParameter) and s.source == asmUtils.getAnnotationUri("exposedBy")
        
        t.name = s.eContainer.name;
        t.required = true;
        t.`in` = OPENAPI!ParameterLocation#body;
        t.schema = new OPENAPI!Schema;
        t.schema.ref = new OPENAPI!SchemaReference();
        t.schema.ref.ref="TODO";
        
        // TODO
        
        /*var annotation = asmUtils.getExtensionAnnotation(s.getAnnotatedParameter().eType, false);
        if (annotation.isPresent()) {
            var a = annotation.get().details.selectOne(d | d.key.startsWith(".accessPoints.") and d.value = s.value);

	        if (s.getAnnotatedParameter().many) {
	            t.schema.ref.ref = a.equivalent("CreateTransferObjectArraySchemaDeclaration").getReference();
	        } else {
	            t.schema.ref.ref = a.equivalent("CreateTransferObjectSingleSchemaDeclaration").getReference();
	        }
        } else {
            throw "Parameter is not prepared";
        } */
        
        s.equivalent("CreateParameterDeclaration").parameter = t;
}
