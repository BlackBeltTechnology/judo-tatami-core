import "../../../operations/asm/_importAll.eol";
import "api.etl";

rule CreateEntityIdParameterDeclaration
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!ParameterDeclaration {
        guard: s.key.startsWith(".accessPoints.") and s.getClass().isDefined() and s.getClass().isEntity()
        
        var accessPoint = getAllAccessPoints().selectOne(ap | ap.getFQName() == s.value);
        
        t.name = "__id__" + s.getClass().getFQName().toOpenAPIName();
        
        accessPoint.equivalent("CreateOpenAPIAccessPoint").parameters.add(t);
}

rule CreateEntityIdParameterDefinition
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!ParameterDefinition {
        guard: s.key.startsWith(".accessPoints.") and s.getClass().isDefined() and s.getClass().isEntity()
        
        t.name = "__id";
        t.`in` = OPENAPI!ParameterLocation#header;
        t.type = OPENAPI!JSONDataType#string;
        t.description = "ID of " + s.getClass().name + " instance";
        t.required = true;
        
        s.equivalent("CreateEntityIdParameterDeclaration").parameter = t;
}

rule CreateParameterDeclaration
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!ParameterDeclaration {
        guard: s.key.startsWith(".accessPoints.") and s.getParameter().isDefined()
        
        var accessPoint = s.value.resolve();
        
        t.name = (s.getParameter().eOperation.getFQName() + "__" + s.getParameter().name).toOpenAPIName();
        
        accessPoint.equivalent("CreateOpenAPIAccessPoint").parameters.add(t);
}

rule CreateParameterDefinition
    transform s : ASM!EStringToStringMapEntry
    to t : OPENAPI!ParameterDefinition {
        guard: s.key.startsWith(".accessPoints.") and s.getParameter().isDefined()
        
        t.name = s.getParameter().name;
        t.required = true;
        t.`in` = OPENAPI!ParameterLocation#body;
        t.schema = new OPENAPI!Schema;
        t.schema.ref = new OPENAPI!SchemaReference();
        
        var annotation = s.getParameter().eType.getExtensionAnnotation(false);
        if (annotation.isDefined()) {
            var a = annotation.details.selectOne(d | d.key.startsWith(".accessPoints.") and d.value = s.value);

	        if (s.getParameter().many) {
	            t.schema.ref.ref = a.equivalent("CreateTransferObjectSingleSchemaDeclaration").getReference();
	        } else {
	            t.schema.ref.ref = a.equivalent("CreateTransferObjectArraySchemaDeclaration").getReference();
	        }
        } else {
            throw "Parameter is not prepared";
        }
        
        s.equivalent("CreateParameterDeclaration").parameter = t;
}
