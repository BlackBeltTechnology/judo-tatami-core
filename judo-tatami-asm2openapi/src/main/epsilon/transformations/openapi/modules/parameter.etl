import "api.etl";
import "schema.etl";

rule CreateEntityIdParameterDeclaration
    transform s : ASM!EAnnotation
    to t : OPENAPI!ParameterDeclaration {
        guard: s.eContainer.isKindOf(ASM!EClass) and s.source == asmUtils.getAnnotationUri("exposedBy") and asmUtils.isEntityType(s.eContainer)
        
        t.name = "__identifier__" + asmUtils.getClassifierFQName(s.eContainer).toOpenAPIName();
        
        var actorType = asmUtils.getResolvedExposedBy(s);
        if (actorType.isPresent()) {
            actorType.get().equivalent("CreateOpenAPIActorType").parameters.add(t);
        } else {
            delete t;
        }
}

rule CreateEntityIdParameterDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!ParameterDefinition {
        guard: s.eContainer.isKindOf(ASM!EClass) and s.source == asmUtils.getAnnotationUri("exposedBy") and asmUtils.isEntityType(s.eContainer)
        
        t.name = "__signedIdentifier";
        t.`in` = OPENAPI!ParameterLocation#header;
        t.type = OPENAPI!JSONDataType#string;
        t.description = "Signed ID of " + s.eContainer.name + " instance";
        t.required = true;
        
        s.equivalent("CreateEntityIdParameterDeclaration").parameter = t;
}

rule CreateParameterDeclaration
    transform s : ASM!EAnnotation
    to t : OPENAPI!ParameterDeclaration {
        guard: s.eContainer.isKindOf(ASM!EParameter) and s.source == asmUtils.getAnnotationUri("exposedBy")
        
        t.name = (asmUtils.getOperationFQName(s.eContainer.eOperation) + "__" + s.eContainer.name).toOpenAPIName();
        
        var actorType = asmUtils.getResolvedExposedBy(s);
        if (actorType.isPresent()) {
            actorType.get().equivalent("CreateOpenAPIActorType").parameters.add(t);
        } else {
            delete t;
        }
}

rule CreateParameterDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!ParameterDefinition {
        guard: s.eContainer.isKindOf(ASM!EParameter) and s.source == asmUtils.getAnnotationUri("exposedBy")
        
        t.name = s.eContainer.name;
        t.required = s.eContainer.required;
        t.`in` = OPENAPI!ParameterLocation#body;
        
        s.equivalent("CreateParameterDeclaration").parameter = t;
}

rule CreateParameterDefinitionSchema
    transform s : ASM!EAnnotation
    to t : OPENAPI!Schema {
        guard: s.eContainer.isKindOf(ASM!EParameter) and s.source == asmUtils.getAnnotationUri("exposedBy")
        
        s.equivalent("CreateParameterDefinition").schema = t;
}

rule CreateParameterDefinitionSchemaReference
    transform s : ASM!EAnnotation
    to t : OPENAPI!SchemaReference {
        guard: s.eContainer.isKindOf(ASM!EParameter) and s.source == asmUtils.getAnnotationUri("exposedBy") and s.eContainer.eType.isDefined()

        if (s.eContainer.eType.isKindOf(ASM!EClass)) {
            var transferObjectTypeExposedByAnnotation = asmUtils.getExtensionAnnotationListByName(s.eContainer.eType, "exposedBy").selectOne(a | a.details.get("value") == s.details.get("value"));
		    if (transferObjectTypeExposedByAnnotation.isDefined()) {
		        var behaviour = asmUtils.getBehaviour(s.eContainer.eOperation);
		        var behaviourRelation = asmUtils.getRelationOfOperationWithDefaultBehaviour(s.eContainer.eOperation);

		        if (behaviour.present and (behaviour.get().toString() == "CREATE" or behaviour.get().toString() == "CREATE_INSTANCE" or behaviour.get().toString() == "VALIDATE_INSTANCE")) {
                    if (s.eContainer.many) {
                        t.ref = transferObjectTypeExposedByAnnotation.equivalent("CreateTransferObjectArraySchemaDeclarationExtended").getReference();
                    } else {
                        t.ref = transferObjectTypeExposedByAnnotation.equivalent("CreateTransferObjectSingleSchemaDeclarationExtended").getReference();
                    }
                } else if (behaviour.present and (behaviour.get().toString() == "DELETE" or behaviour.get().toString() == "UNSET" or behaviour.get().toString() == "DELETE_INSTANCE")) {
                    if (s.eContainer.many) {
                        throw "Unsupported parameter";
                    } else {
                        t.ref = asmUtils.getAllActorTypes().selectOne(ap | asmUtils.getClassifierFQName(ap) == s.details.get("value")).equivalent("CreateTransferObjectSingleSchemaDeclarationForDelete").getReference();
                    }
                } else if (behaviour.present and (behaviour.get().toString() == "SET" or behaviour.get().toString() == "ADD_ALL" or behaviour.get().toString() == "REMOVE_ALL") and behaviourRelation.present) {
                    if (s.eContainer.many) {
                        throw "Unsupported parameter";
                    } else {
                        t.ref = s.equivalent("CreateParameterDefinitionSchemaReferenceForReferenceChange").getReference();
                    }
                } else if (behaviour.present and (behaviour.get().toString() == "SET_REFERENCE" or behaviour.get().toString() == "UNSET_REFERENCE" or behaviour.get().toString() == "ADD_REFERENCE" or behaviour.get().toString() == "REMOVE_REFERENCE")) {
                    var ap = asmUtils.getAllActorTypes().selectOne(ap | asmUtils.getClassifierFQName(ap) == s.details.get("value"));
                    if (s.eContainer.many) {
                        t.ref = ap.equivalent("CreateCollectionReferenceSchema").getReference();
                    } else {
                        t.ref = ap.equivalent("CreateSingleReferenceSchema").getReference();
                    }
		        } else {
                    if (s.eContainer.many) {
                        t.ref = transferObjectTypeExposedByAnnotation.equivalent("CreateTransferObjectArraySchemaDeclaration").getReference();
                    } else {
                        t.ref = transferObjectTypeExposedByAnnotation.equivalent("CreateTransferObjectSingleSchemaDeclaration").getReference();
                    }
		        }
		    }
        }
        
        s.equivalent("CreateParameterDefinitionSchema").ref = t;
}

@lazy
rule CreateParameterDefinitionSchemaReferenceForReferenceChange
    transform s : ASM!EAnnotation
    to t : OPENAPI!SchemaDeclaration {
        guard: s.eContainer.isKindOf(ASM!EParameter) and s.source == asmUtils.getAnnotationUri("exposedBy") and s.eContainer.eType.isDefined() and s.eContainer.eType.isKindOf(ASM!EClass)

        t.name = (asmUtils.getOperationFQName(s.eContainer.eOperation) + "__" + s.eContainer.name).toOpenAPIName();

        t.schema = new OPENAPI!Schema;
        t.schema.description = "Schema of change instance reference";
        t.schema.type = OPENAPI!JSONDataType#object;

        var signedId = new OPENAPI!PropertyDeclaration;
        signedId.name = "__signedIdentifier";

        signedId.property = new OPENAPI!Property;
        signedId.property.description = "Signed ID of instance";
        signedId.property.type = OPENAPI!JSONDataType#string;

        t.schema.properties.add(signedId);

        var ref = new OPENAPI!PropertyDeclaration;

        var reference = asmUtils.getRelationOfOperationWithDefaultBehaviour(s.eContainer.eOperation).get();
        ref.name = reference.name;

        ref.property = new OPENAPI!Property;
        ref.property.description = "Referenced element(s)";

        var refId = new OPENAPI!PropertyDeclaration;
        refId.name = "__signedIdentifier";

        refId.property = new OPENAPI!Property;
        refId.property.description = "Signed ID of referenced instance";
        refId.property.type = OPENAPI!JSONDataType#string;

        if (reference.many) {
            ref.property.type = OPENAPI!JSONDataType#array;
            ref.property.items = new OPENAPI!Property;
            ref.property.items.type = OPENAPI!JSONDataType#object;
            ref.property.items.properties.add(refId);
        } else {
            ref.property.type = OPENAPI!JSONDataType#object;
            ref.property.properties.add(refId);
        }

        t.schema.properties.add(ref);

        var ap = asmUtils.getAllActorTypes().selectOne(ap | asmUtils.getClassifierFQName(ap) == s.details.get("value"));
        ap.equivalent("CreateOpenAPIActorType").definitions.add(t);
}

@lazy
rule CreateSingleReferenceSchema
    transform s : ASM!EClass
    to t : OPENAPI!SchemaDeclaration {
        guard: asmUtils.isActorType(s)

        t.name = "__SingleReference";

        t.schema = new OPENAPI!Schema;
        t.schema.description = "Schema used to set single reference";
        t.schema.type = OPENAPI!JSONDataType#object;

        var signedId = new OPENAPI!PropertyDeclaration;
        signedId.name = "__signedIdentifier";

        signedId.property = new OPENAPI!Property;
        signedId.property.description = "Signed ID of referenced instance";
        signedId.property.type = OPENAPI!JSONDataType#string;

        t.schema.properties.add(signedId);

        s.equivalent("CreateOpenAPIActorType").definitions.add(t);
}

@lazy
rule CreateCollectionReferenceSchema
    transform s : ASM!EClass
    to t : OPENAPI!SchemaDeclaration {
        guard: asmUtils.isActorType(s)

        t.name = "__CollectionReference";

        t.schema = new OPENAPI!Schema;
        t.schema.description = "Schema used to set collection reference";
        t.schema.type = OPENAPI!JSONDataType#array;

        var refId = new OPENAPI!PropertyDeclaration;
        refId.name = "__signedIdentifier";

        refId.property = new OPENAPI!Property;
        refId.property.description = "Signed ID of referenced instance";
        refId.property.type = OPENAPI!JSONDataType#string;

        t.schema.items = new OPENAPI!Property;
        t.schema.items.type = OPENAPI!JSONDataType#object;
        t.schema.items.properties.add(refId);

        s.equivalent("CreateOpenAPIActorType").definitions.add(t);
}
