import "api.etl";
import "schema.etl";

rule CreateEntityIdParameterDeclaration
    transform s : ASM!EAnnotation
    to t : OPENAPI!ParameterDeclaration {
        guard: s.eContainer.isKindOf(ASM!EClass) and s.source == asmUtils.getAnnotationUri("exposedBy") and asmUtils.isEntityType(s.eContainer)
        
        t.name = "__identifier__" + asmUtils.getClassifierFQName(s.eContainer).toOpenAPIName();
        
        var accessPoint = asmUtils.getResolvedExposedBy(s);
        if (accessPoint.isPresent()) {
            accessPoint.get().equivalent("CreateOpenAPIAccessPoint").parameters.add(t);
        } else {
            delete t;
        }
}

rule CreateEntityIdParameterDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!ParameterDefinition {
        guard: s.eContainer.isKindOf(ASM!EClass) and s.source == asmUtils.getAnnotationUri("exposedBy") and asmUtils.isEntityType(s.eContainer)
        
        t.name = "__identifier";
        t.`in` = OPENAPI!ParameterLocation#header;
        t.type = OPENAPI!JSONDataType#string;
        t.description = "ID of " + s.eContainer.name + " instance";
        t.required = true;
        
        s.equivalent("CreateEntityIdParameterDeclaration").parameter = t;
}

rule CreateParameterDeclaration
    transform s : ASM!EAnnotation
    to t : OPENAPI!ParameterDeclaration {
        guard: s.eContainer.isKindOf(ASM!EParameter) and s.source == asmUtils.getAnnotationUri("exposedBy")
        
        t.name = (asmUtils.getOperationFQName(s.eContainer.eOperation) + "__" + s.eContainer.name).toOpenAPIName();
        
        var accessPoint = asmUtils.getResolvedExposedBy(s);
        if (accessPoint.isPresent()) {
            accessPoint.get().equivalent("CreateOpenAPIAccessPoint").parameters.add(t);
        } else {
            delete t;
        }
}

rule CreateParameterDefinition
    transform s : ASM!EAnnotation
    to t : OPENAPI!ParameterDefinition {
        guard: s.eContainer.isKindOf(ASM!EParameter) and s.source == asmUtils.getAnnotationUri("exposedBy")
        
        t.name = s.eContainer.name;
        t.required = true;
        t.`in` = OPENAPI!ParameterLocation#body;
        
        s.equivalent("CreateParameterDeclaration").parameter = t;
}

rule CreateParameterDefinitionSchema
    transform s : ASM!EAnnotation
    to t : OPENAPI!Schema {
        guard: s.eContainer.isKindOf(ASM!EParameter) and s.source == asmUtils.getAnnotationUri("exposedBy")
        
        s.equivalent("CreateParameterDefinition").schema = t;
}

rule CreateParameterDefinitionSchemaReference
    transform s : ASM!EAnnotation
    to t : OPENAPI!SchemaReference {
        guard: s.eContainer.isKindOf(ASM!EParameter) and s.source == asmUtils.getAnnotationUri("exposedBy")
        
        if (s.eContainer.eType.isKindOf(ASM!EClass)) {
            var transferObjectTypeExposedByAnnotation = asmUtils.getExtensionAnnotationListByName(s.eContainer.eType, "exposedBy").selectOne(a | a.details.get("value") == s.details.get("value"));
		    if (transferObjectTypeExposedByAnnotation.isDefined()) {
		        if (s.eContainer.many) {
		            t.ref = transferObjectTypeExposedByAnnotation.equivalent("CreateTransferObjectArraySchemaDeclaration").getReference();
		        } else {
		        	t.ref = transferObjectTypeExposedByAnnotation.equivalent("CreateTransferObjectSingleSchemaDeclaration").getReference();
		        }
		    }
        }
        
        s.equivalent("CreateParameterDefinitionSchema").ref = t;
}
