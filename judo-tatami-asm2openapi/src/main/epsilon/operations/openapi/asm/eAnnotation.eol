@cached
operation getExposedByAnnotationsOfParameters() : Sequence {
    return ASM!EParameter.all()
        .select(p | p.eOperation.isCreateOrUpdateBehaviour())
        .select(p | asmUtils.getExtensionAnnotationByName(p, "exposedBy", false).present)
        .collect(p | asmUtils.getExtensionAnnotationListByName(p, "exposedBy"))
        .flatten();
}

@cached
operation ASM!EAnnotation isForCreateOrUpdate() : Boolean {
    
    if (self.source <> asmUtils.getAnnotationUri("exposedBy")) {
        return false;
    }
    
    var annotations = self.details.get("value").getAnnotationsOfParameters();
    
    if (self.eContainer.isKindOf(ASM!EClass)) {
        return annotations.select(a | a.eContainer.eType == self.eContainer
                or a.eContainer.eType.eAllContainments.collect(c | c.eReferenceType).includes(self.eContainer)).notEmpty();
    }
    
    if (self.eContainer.isKindOf(ASM!EReference) or self.eContainer.isKindOf(ASM!EAttribute)) {
        return annotations.select(a | a.eContainer.eType == self.eContainer.eContainer
                or a.eContainer.eType.eAllContainments.collect(c | c.eReferenceType).includes(self.eContainer.eContainer)).notEmpty();
    }
    
    return false;
}

@cached
operation String getAnnotationsOfParameters() : Sequence {
    return getExposedByAnnotationsOfParameters().select(a | a.details.get("value") == self);
}
