// convert a string (ie. FQName) to OpenAPI Path
@cached
operation ASM!EOperation toOpenAPIPath() : String {
    var path = asmUtils.getOperationFQName(self);

    var behaviour = asmUtils.getBehaviour(self);
    if (behaviour.present) {
        var owner = asmUtils.getOwnerOfOperationWithDefaultBehaviour(self);

        switch (behaviour.get().toString()) {
            case "LIST":
                if (owner.get.many) {
                    path = asmUtils.getReferenceFQName(owner.get) + "/~list";
                } else {
                    path = asmUtils.getReferenceFQName(owner.get) + "/~get";
                }
            case "CREATE_INSTANCE":
                if (asmUtils.isBound(self)) {
                    path = asmUtils.getClassifierFQName(owner.get.eContainer) + "/~update/" + owner.get.name + "/~create";
                } else {
                    path = asmUtils.getReferenceFQName(owner.get) + "/~create";
                }
            case "VALIDATE_CREATE":
                if (asmUtils.isBound(self)) {
                    path = asmUtils.getClassifierFQName(owner.get.eContainer) + "/~update/" + owner.get.name + "/~validate";
                } else {
                    path = asmUtils.getReferenceFQName(owner.get) + "/~validate";
                }
            case "REFRESH": path = asmUtils.getClassifierFQName(owner.get) + "/~get";
            case "UPDATE_INSTANCE": path = asmUtils.getClassifierFQName(owner.get) + "/~update";
            case "VALIDATE_UPDATE": path = asmUtils.getClassifierFQName(owner.get) + "/~validate";
            case "DELETE_INSTANCE": path = asmUtils.getClassifierFQName(owner.get) + "/~delete";
            case "SET_REFERENCE": path = asmUtils.getClassifierFQName(owner.get.eContainer) + "/~update/" + owner.get.name + "/~set";
            case "UNSET_REFERENCE": path = asmUtils.getClassifierFQName(owner.get.eContainer) + "/~update/" + owner.get.name + "/~unset";
            case "ADD_REFERENCE": path = asmUtils.getClassifierFQName(owner.get.eContainer) + "/~update/" + owner.get.name + "/~add";
            case "REMOVE_REFERENCE": path = asmUtils.getClassifierFQName(owner.get.eContainer) + "/~update/" + owner.get.name + "/~remove";
            case "GET_REFERENCE_RANGE": path = asmUtils.getReferenceFQName(owner.get) + "/~range";
            case "GET_TEMPLATE": path = asmUtils.getClassifierFQName(owner.get) + "/~template";
            case "GET_PRINCIPAL": path = asmUtils.getClassifierFQName(owner.get) + "/~principal";
        }
    }

    return path.replaceFirst("^" + asmUtils.getModel().get().name + "\\.", "").replace("[#\\.]", "/").replace("[^0-9a-zA-Z_~/]", "_");
}

// convert a string (ie. name) to OpenAPI name (key)
@cached
operation String toOpenAPIName() : String {
    var result = self.replace("[^0-9a-zA-Z_]", "_");
    return result;
}
