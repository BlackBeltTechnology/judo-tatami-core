import "service.eol";

@cached
operation getAllAccessPoints() : Set {
    return ASM!EClass.all.select(c | c.isAccessPoint()).asSet();
}

@cached
operation getAllExposedGraphs() : Set {
    return ASM!EClass.all.select(c | c.isExposedGraph()).asSet();
}

@cached
operation getAllExposedServices() : Set {
    return ASM!EOperation.all.select(c | c.isExposedService()).asSet();
}

@cached
operation ASM!EClass isAccessPoint() : Boolean {
    return self.interface and self.annotatedAsTrue("accessPoint");
}

@cached
operation ASM!EClass getResolvedExposedBy() : ASM!EClass {
    var exposedBy = self.getAnnotationValue("exposedBy", false);
    if (exposedBy.isDefined()) {
        return exposedBy.resolve();
    } else {
        return null;
    }
}

@cached
operation ASM!EClass getResolvedRoot() : ASM!EClass {
    var root = self.getAnnotationValue("root", false);
    if (root.isDefined()) {
        return root.resolve();
    } else {
        return null;
    }
}

@cached
operation ASM!EClass isExposedGraph() : Boolean {
    var exposedBy = self.getResolvedExposedBy();
    var root = self.getResolvedRoot();
    
    if (exposedBy.isDefined() and root.isDefined()) {
        return exposedBy.isAccessPoint() and root.isMappedTransferObjectType() and self.interface;
    } else {
        return false;
    }
}

@cached
operation ASM!EOperation isExposedService() : Boolean {
    var exposedBy = self.getResolvedExposedBy();

    if (exposedBy.isDefined()) {
        return exposedBy.isAccessPoint() and self.eContainer.interface;
    } else {
        return false;
    }
}

@cached
operation ASM!EClass getExposedGraphName() : String {
    if (self.isExposedGraph()) {
        return self.name.substring(self.getContainerClass().name.length + 1);
    } else {
        return null;
    }
}

@cached
operation ASM!EClass getExposedGraphs() : Set {
    if (self.isAccessPoint()) {
        return getAllExposedGraphs().select(g | g.getResolvedExposedBy() == self);
    } else {
        return new Set;
    }
}

@cached
operation ASM!EClass getExposedServices() : Set {
    if (self.isAccessPoint()) {
        return getAllExposedServices().select(s | s.getResolvedExposedBy() == self);
    } else {
        return new Set;
    }
}

@cached
operation ASM!EClass getGraphs() : Set {
	var annotation = self.getExtensionAnnotation(false);
	if (annotation.isDefined()) {
		return annotation.details.select(d | d.key.startsWith("graphs.")).collect(d | d.value.resolve()).asSet();
	} else {
		return new Set;
	}
}

@cached
operation ASM!EClass getExposedMappedTransferObjectTypes() : Set {
    if (self.isExposedGraph()) {
        return getAllMappedTransferObjectTypes().select(t | t.getGraphs().contains(self)).asSet();
    } else if (self.isAccessPoint()) {
        return self.getExposedGraphs().collect(g | g.getExposedMappedTransferObjectTypes()).flatten().asSet();
    } else {
        return new Set;
    }
}

@cached
operation ASM!EClass getExposedOperations() : Set {
    if (self.isExposedGraph()) {
        return self.getExposedMappedTransferObjectTypes().collect(t | t.getNestedClasses()).flatten().select(og | og.interface).collect(og | og.eOperations).flatten()
            .includingAll(self.getExposedMappedTransferObjectTypes().collect(t | t.eOperations).flatten())
            .asSet();
    } else {
        return new Set;
    }
}
