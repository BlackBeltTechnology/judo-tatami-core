// get annotation in which string to string map entry can be found as details entry
@cached
operation ASM!EStringToStringMapEntry getAnnotation() : ASM!EAnnotation {
    var container = self.eContainer();
    if (container.isKindOf(ASM!EAnnotation)) {
        return container;
    } else {
        return null;
    }
}

// get JUDO extension annotation, create it is createIfNotExists is true (and not exists yet)
operation ASM!EModelElement getExtensionAnnotation(createIfNotExists : Boolean) {
    var annotation = self.eAnnotations.selectOne(a | a.source = extendedMetadataURI);
    if (not annotation.isDefined() and createIfNotExists) {
        annotation = new ASM!EAnnotation;
        annotation.source = extendedMetadataURI;
        self.eAnnotations.add(annotation);
    }
    return annotation;
}

// set a new annotation value to a given model element, create JUDO extension annotation it not exists yet
operation ASM!EModelElement addAnnotationIfNotExists(prefix: String, value: String) {
    // get (and create is not exists) annotation
    var annotation = self.getExtensionAnnotation(true);

    // add values as annotation detail (key is prefixed)
    var index = annotation.details.select(d | d.key.startsWith(prefix)).size();
    if (not annotation.details.selectOne(d | d.key.startsWith(prefix) and d.value == value).isDefined()) {
        var aDetail = new ASM!EStringToStringMapEntry;
        aDetail.key = prefix + index;
        aDetail.value = value;
        annotation.details.add(aDetail);
    }
}

// get annotated EOperation
@cached
operation ASM!EStringToStringMapEntry getAnnotatedOperation() : ASM!EOperation {
    var a = self.getAnnotation();
    if (a.isDefined() and a.source = extendedMetadataURI and a.eModelElement.isKindOf(ASM!EOperation)) {
        return a.eModelElement;
    } else {
        return null;
    }
}

// get annotated EAttribute
@cached
operation ASM!EStringToStringMapEntry getAnnotatedAttribute() : ASM!EAttribute {
    var a = self.getAnnotation();
    if (a.isDefined() and a.source = extendedMetadataURI and a.eModelElement.isKindOf(ASM!EAttribute)) {
        return a.eModelElement;
    } else {
        return null;
    }
}

// get annotated EReference
@cached
operation ASM!EStringToStringMapEntry getAnnotatedReference() : ASM!EReference {
    var a = self.getAnnotation();
    if (a.isDefined() and a.source = extendedMetadataURI and a.eModelElement.isKindOf(ASM!EReference)) {
        return a.eModelElement;
    } else {
        return null;
    }
}

// get annotated EParameter
@cached
operation ASM!EStringToStringMapEntry getAnnotatedParameter() : ASM!EParameter {
    var a = self.getAnnotation();
    if (a.isDefined() and a.source = extendedMetadataURI and a.eModelElement.isKindOf(ASM!EParameter)) {
        return a.eModelElement;
    } else {
        return null;
    }
}

// get annotated EClass
@cached
operation ASM!EStringToStringMapEntry getAnnotatedClass() : ASM!EClass {
    var a = self.getAnnotation();
    if (a.isDefined() and a.source = extendedMetadataURI and a.eModelElement.isKindOf(ASM!EClass)) {
        return a.eModelElement;
    } else {
        return null;
    }
}
