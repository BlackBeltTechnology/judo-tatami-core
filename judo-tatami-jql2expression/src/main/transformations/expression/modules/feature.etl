import "../../../operations/asm/_importAll.eol";
import "../../../operations/jqlextract/_importAll.eol";
import "../../../operations/jqlextract2asm/_importAll.eol";

@cached
operation JQLEXTRACT!Feature transformToExpression() : EXPR!Expression {
    if (self.isObjectToObject()) {
        return self.equivalent("FeatureToObjectNavigationExpression");
    } else if (self.isObjectToCollection()) {
        return self.equivalent("FeatureToCollectionNavigationFromObjectExpression");
    } else if (self.isCollectionToCollection()) {
        return self.equivalent("FeatureToCollectionNavigationFromCollectionExpression");
    } else if (self.isCollectionToObject()) {
        return self.equivalent("FeatureToObjectNavigationFromCollectionExpression");
    } else if (self.isString()) {
        return self.equivalent("FeatureToStringAttribute");
    } else if (self.isInteger()) {
        return self.equivalent("FeatureToIntegerAttribute");
    } else if (self.isDecimal()) {
        return self.equivalent("FeatureToDecimalAttribute");
    } else if (self.isBoolean()) {
        return self.equivalent("FeatureToBooleanAttribute");
    } else if (self.isEnumeration()) {
        return self.equivalent("FeatureToEnumerationAttribute");
    } else {
        // not supported
        return null;
    }
}

@abstract
@greedy
rule FeatureToExpression
  transform s : JQLEXTRACT!Feature
  to t : EXPR!Expression {
   	var featureBase = s.getFeatureBase();
   	if (featureBase.isDefined()) {
	   	if (featureBase.isKindOf(JQLEXTRACT!NavigationExpression)) {
	   		t.objectExpression = featureBase.transformBaseToExpression();
	   	} else {
	   	    t.objectExpression = featureBase.transformToExpression();
	   	}
   	}
}

@abstract
@greedy
rule FeatureToNavigationExpression
  transform s : JQLEXTRACT!Feature
  to t : EXPR!NavigationExpression 
  extends FeatureToExpression {
    t.referenceName = s.name;
}

rule FeatureToObjectNavigationExpression
  transform s : JQLEXTRACT!Feature
  to t : EXPR!ObjectNavigationExpression 
  extends FeatureToNavigationExpression {
  	guard: s.isObjectToObject()
}

rule FeatureToCollectionNavigationFromObjectExpression
  transform s : JQLEXTRACT!Feature
  to t : EXPR!CollectionNavigationFromObjectExpression 
  extends FeatureToNavigationExpression {
  	guard: s.isObjectToCollection()
}

rule FeatureToCollectionNavigationFromCollectionExpression
  transform s : JQLEXTRACT!Feature
  to t : EXPR!CollectionNavigationFromCollectionExpression 
  extends FeatureToNavigationExpression {
  	guard: s.isCollectionToCollection()
}

rule FeatureToObjectNavigationFromCollectionExpression
  transform s : JQLEXTRACT!Feature
  to t : EXPR!ObjectNavigationFromCollectionExpression 
  extends FeatureToNavigationExpression {
  	guard: s.isCollectionToObject()
}

@abstract
@greedy
rule FeatureToAttributeSelector
  transform s : JQLEXTRACT!Feature
  to t : EXPR!AttributeSelector
  extends FeatureToExpression {
    t.attributeName = s.name;
}

rule FeatureToStringAttribute
  transform s : JQLEXTRACT!Feature
  to t : EXPR!StringAttribute
  extends FeatureToAttributeSelector {
  	guard: s.isString()
}

rule FeatureToIntegerAttribute
  transform s : JQLEXTRACT!Feature
  to t : EXPR!IntegerAttribute
  extends FeatureToAttributeSelector {
  	guard: s.isInteger()
}

rule FeatureToDecimalAttribute
  transform s : JQLEXTRACT!Feature
  to t : EXPR!DecimalAttribute
  extends FeatureToAttributeSelector {
  	guard: s.isDecimal()
}

rule FeatureToBooleanAttribute
  transform s : JQLEXTRACT!Feature
  to t : EXPR!BooleanAttribute
  extends FeatureToAttributeSelector {
  	guard: s.isBoolean()
}

rule FeatureToEnumerationAttribute
  transform s : JQLEXTRACT!Feature
  to t : EXPR!EnumerationAttribute
  extends FeatureToAttributeSelector {
  	guard: s.isEnumeration()
}
