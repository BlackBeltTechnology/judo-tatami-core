@cached
operation JQLEXTRACT!NavigationExpression getVariable() : JQLEXTRACT!Variable {
    var extractedExpression = JQLEXTRACT!ExtractedExpression.all.selectOne(e | e.jqlExpression == self);
    if (extractedExpression.isDefined() and extractedExpression.context.isDefined()) {
    	return extractedExpression.context.variables.selectOne(v | v.name = self.base);
    } else {
    	return null;
    }
}

@cached
operation JQLEXTRACT!Expression getOperands() : Collection {
	return Set{};
}

@cached
operation JQLEXTRACT!NavigationExpression getOperands() : Collection {
	return Set{};
}

@cached
operation JQLEXTRACT!BinaryOperation getOperands() : Collection {
	return Set{self.leftOperand, self.rightOperand};
}

@cached
operation JQLEXTRACT!UnaryOperation getOperands() : Collection {
	return Set{self.operand};
}

@cached
operation JQLEXTRACT!Expression getContainer() : JQLEXTRACT!Expression {
	return JQLEXTRACT!Expression.all.selectOne(e | e.getOperands().contains(self));
}

@cached
operation JQLEXTRACT!Expression isRoot() : Boolean {
	return not self.getContainer().isDefined();
}

@cached
operation JQLEXTRACT!Variable isInstanceVariable() : Boolean {
	return self.name == "self";
}

@cached
operation JQLEXTRACT!Feature getNavigationExpression() : JQLEXTRACT!NavigationExpression {
	return JQLEXTRACT!NavigationExpression.all.selectOne(e | e.features.contains(self));
}

@cached
operation JQLEXTRACT!Feature getFeatureBase() {
	var navigationExpression = self.getNavigationExpression();
	if (navigationExpression.isDefined()) {
		var index = navigationExpression.features.indexOf(self);
		
		if (index == 0) {
			return navigationExpression.getVariable();
		} else {
			return navigationExpression.features.at(index - 1);
		}
	} else {
		return null;
	}
}

@cached
operation JQLEXTRACT!Feature isReferenceFromObject() : Boolean {
	var featureBase = self.getFeatureBase();
	if (not featureBase.isDefined()) {
		// feature base is unknown
		return false;
	}
	if (featureBase.isKindOf(JQLEXTRACT!Variable)) {
		if (featureBase.isInstanceVariable()) {
			return true;
		} else {
			// variable that is not representing an object instance
			return false;
		}
	} else if (featureBase.isKindOf(JQLEXTRACT!Feature)) {
		return featureBase.isReferenceToObject();
	} else {
		return false;
	}
}

@cached
operation JQLEXTRACT!Feature isReferenceFromCollection() : Boolean {
	var featureBase = self.getFeatureBase();
	if (not featureBase.isDefined()) {
		// feature base is unknown
		return false;
	}
	if (featureBase.isKindOf(JQLEXTRACT!Variable)) {
		if (featureBase.isInstanceVariable()) {
			return false;
		} else {
			// variable that is not representing an object instance
			return false;
		}
	} else if (featureBase.isKindOf(JQLEXTRACT!Feature)) {
		return featureBase.isReferenceToCollection();
	} else {
		return false;
	}
}

@cached
operation String getNamespace() : ASM!EPackage {
	var ns : ASM!EPackage;

	for (nsName in self.split("\\s*\\::\\s*")) {
        if (ns.isDefined()) {
            ns = ns.eSubpackages.selectOne(p | p.name == nsName);
        } else {
            ns = ASM!EPackage.all.selectOne(p | p.name == nsName);
        }
    }
    
    return ns;
}

@cached
operation JQLEXTRACT!Variable getObjectType() : ASM!EClass {
	return self.typeNamespace.getNamespace().eClassifiers.selectOne(e | e.name == self.typeName);
}

@cached
operation JQLEXTRACT!Feature getFeatureBaseObjectType() : ASM!EClass {
	var featureBase = self.getFeatureBase();
	if (not featureBase.isDefined()) {
		// feature base is unknown
		return null;
	}
	if (featureBase.isKindOf(JQLEXTRACT!Variable)) {
		if (featureBase.isInstanceVariable()) {
			return featureBase.getObjectType();
		} else {
			return null;
		}
	} else if (featureBase.isKindOf(JQLEXTRACT!Feature)) {
		return featureBase.getReferenceContainer();
	}
}

@cached
operation JQLEXTRACT!Feature getReferenceType() : ASM!EReference {
	var featureBaseObjectType = self.getFeatureBaseObjectType();
	if (featureBaseObjectType.isDefined()) {
		return featureBaseObjectType.eAllReferences.selectOne(r | r.name == self.name);
	} else {
		return null;
	}
}

@cached
operation JQLEXTRACT!Feature getAttribute() : ASM!EAttribute {
	var featureBaseObjectType = self.getFeatureBaseObjectType();
	if (featureBaseObjectType.isDefined()) {
		return featureBaseObjectType.eAllAttributes.selectOne(a | a.name == self.name);
	} else {
		return null;
	}
}

@cached
operation JQLEXTRACT!Feature getReferenceContainer() : ASM!EClass {
	var featureBase = self.getFeatureBase();
	var objectType;
  	if (featureBase.isKindOf(JQLEXTRACT!Variable) and featureBase.isInstanceVariable()) {
  		objectType = featureBase.getObjectType();
  	} else if (featureBase.isKindOf(JQLEXTRACT!Feature)) {
  		objectType = featureBase.getReferenceContainer();
  	}
  	
  	if (objectType.isDefined()) {
	  	var ref = objectType.eAllReferences.selectOne(r | r.name == self.name);
	  	if (ref.isDefined()) {
	  		return ref.eReferenceType;
	  	} else {
	  		// unknown target
	  		return null;
	  	}
  	} else {
  		// unknown kind of base
  		return null;
  	}
}

@cached
operation JQLEXTRACT!Feature getAttributeType() : ASM!EDataType {
	var attribute = self.getAttribute();
	if (attribute.isDefined()) {
		return attribute.eAttributeType;
	} else {
		return null;
	}
}

@cached
operation String getDataTypeByName() : ASM!EDataType {
    return ASM!EDataType.all.selectOne(t | t.name == self);
}

@cached
operation ASM!EDataType isNumeric() : Boolean {
    return self.isInteger() or self.isDecimal();
}

@cached
operation ASM!EDataType isInteger() : Boolean {
    return "JInteger".getDataTypeByName() == self
        or "JLong".getDataTypeByName() == self
        or "JBigInteger".getDataTypeByName() == self
        or "EFloat".getDataTypeByName() == self
        or "EDouble".getDataTypeByName() == self
        or "EFloatObject".getDataTypeByName() == self
        or "EDoubleObject".getDataTypeByName() == self
        or "EBigInteger".getDataTypeByName() == self;
}

@cached
operation ASM!EDataType isDecimal() : Boolean {
	return Set{"java.lang.Float", "java.lang.Double", "java.math.BigDecimal", "float", "double"}.contains(self.instanceClassName);
}

@cached
operation ASM!EDataType isBoolean() : Boolean {
	return self.instanceClassName == "java.lang.Boolean";
}

@cached
operation ASM!EDataType isString() : Boolean {
	return self.instanceClassName == "java.lang.String";
}

@cached
operation ASM!EDataType isEnumeration() : Boolean {
    return self.isKindOf(ASM!EEnum);
}

@cached
operation ASM!EDataType isCustom() : Boolean {
    return not self.isNumeric() and not self.isBoolean() and not self.isString() and not self.isEnumeration();
}

@cached
operation JQLEXTRACT!Feature isReferenceToObject() : Boolean {
	return self.getReferenceType().isDefined() and not self.getReferenceType().isCollection();
}

@cached
operation JQLEXTRACT!Feature isReferenceToCollection() : Boolean {
	return self.getReferenceType().isDefined() and self.getReferenceType().isCollection();
}

@cached
operation ASM!EReference isCollection() : Boolean {
    return self.upperBound > 1 or self.upperBound == -1;
}

@cached
operation JQLEXTRACT!Feature isObjectToObject() {
	return self.isReferenceFromObject() and self.isReferenceToObject();
}

@cached
operation JQLEXTRACT!Feature isObjectToCollection() {
	return self.isReferenceFromObject() and self.isReferenceToCollection();
}

@cached
operation JQLEXTRACT!Feature isCollectionToObject() {
	return self.isReferenceFromCollection() and self.isReferenceToObject();
}

@cached
operation JQLEXTRACT!Feature isCollectionToCollection() {
	return self.isReferenceFromCollection() and self.isReferenceToCollection();
}

rule VariableToInstance
  transform s : JQLEXTRACT!Variable
  to t : EXPR!Instance {
  	guard: s.isInstanceVariable()
  	
  	t.elementName = s.equivalent("VariableToTypeName");
}

rule VariableToTypeName
  transform s : JQLEXTRACT!Variable
  to t : EXPR!TypeName {
  	t.name = s.typeName;
  	t.namespace = s.typeNamespace;
}

@abstract
@greedy
rule FeatureToExpression
  transform s : JQLEXTRACT!Feature
  to t : EXPR!Expression {  	
  
  	var featureBase = s.getFeatureBase();
  	if (featureBase.isKindOf(JQLEXTRACT!Variable) and featureBase.isInstanceVariable()) {
  		t.objectExpression = featureBase.equivalent("VariableToInstance");
  	} else if (featureBase.isKindOf(JQLEXTRACT!Feature)) {
  		if (featureBase.isObjectToObject()) {
  			t.objectExpression = featureBase.equivalent("FeatureToObjectNavigationExpression");
  		} else if (featureBase.isObjectToCollection()) {
  			t.objectExpression = featureBase.equivalent("FeatureToCollectionNavigationFromObjectExpression");
  		} else if (featureBase.isCollectionToCollection()) {
  			t.objectExpression = featureBase.equivalent("FeatureToCollectionNavigationFromCollectionExpression");
  		} else if (featureBase.isCollectionToObject()) {
  			t.objectExpression = featureBase.equivalent("FeatureToObjectNavigationFromCollectionExpression");
  		}
  	}
}

@abstract
@greedy
rule FeatureToNavigationExpression
  transform s : JQLEXTRACT!Feature
  to t : EXPR!NavigationExpression 
  extends FeatureToExpression {
    t.referenceName = s.name;
}

rule FeatureToObjectNavigationExpression
  transform s : JQLEXTRACT!Feature
  to t : EXPR!ObjectNavigationExpression 
  extends FeatureToNavigationExpression {
  	guard: s.isObjectToObject()
}

rule FeatureToCollectionNavigationFromObjectExpression
  transform s : JQLEXTRACT!Feature
  to t : EXPR!CollectionNavigationFromObjectExpression 
  extends FeatureToNavigationExpression {
  	guard: s.isObjectToCollection()
}

rule FeatureToCollectionNavigationFromCollectionExpression
  transform s : JQLEXTRACT!Feature
  to t : EXPR!CollectionNavigationFromCollectionExpression 
  extends FeatureToNavigationExpression {
  	guard: s.isCollectionToCollection()
}

rule FeatureToObjectNavigationFromCollectionExpression
  transform s : JQLEXTRACT!Feature
  to t : EXPR!ObjectNavigationFromCollectionExpression 
  extends FeatureToNavigationExpression {
  	guard: s.isCollectionToObject()
}

@abstract
@greedy
rule FeatureToAttributeSelector
  transform s : JQLEXTRACT!Feature
  to t : EXPR!AttributeSelector
  extends FeatureToExpression {
  	guard: s.isReferenceFromObject() and s.getAttributeType().isDefined() 
    t.attributeName = s.name;
}

rule FeatureToStringAttribute
  transform s : JQLEXTRACT!Feature
  to t : EXPR!StringAttribute
  extends FeatureToAttributeSelector {
  	guard: s.isReferenceFromObject() and s.getAttributeType().isDefined() and s.getAttributeType().isString()
}

rule FeatureToIntegerAttribute
  transform s : JQLEXTRACT!Feature
  to t : EXPR!IntegerAttribute
  extends FeatureToAttributeSelector {
  	guard: s.isReferenceFromObject() and s.getAttributeType().isDefined() and s.getAttributeType().isInteger()
}

rule FeatureToDecimalAttribute
  transform s : JQLEXTRACT!Feature
  to t : EXPR!DecimalAttribute
  extends FeatureToAttributeSelector {
  	guard: s.isReferenceFromObject() and s.getAttributeType().isDefined() and s.getAttributeType().isDecimal()
}

rule FeatureToBooleanAttribute
  transform s : JQLEXTRACT!Feature
  to t : EXPR!BooleanAttribute
  extends FeatureToAttributeSelector {
  	guard: s.isReferenceFromObject() and s.getAttributeType().isDefined() and s.getAttributeType().isBoolean()
}

rule FeatureToEnumerationAttribute
  transform s : JQLEXTRACT!Feature
  to t : EXPR!EnumerationAttribute
  extends FeatureToAttributeSelector {
  	guard: s.isReferenceFromObject() and s.getAttributeType().isDefined() and s.getAttributeType().isEnumeration()
}
