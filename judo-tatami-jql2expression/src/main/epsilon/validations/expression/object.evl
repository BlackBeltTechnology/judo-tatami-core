context EXPR!ObjectNavigationExpression {
    constraint Resolved {
        guard: self.objectExpression.satisfiesAll("Resolved")
        
        check: self.getObjectType(modelAdapter).isDefined()
        message: "Reference named " + self.referenceName + " of object type " + self.objectExpression.getObjectType(modelAdapter).getName() + " not found"
    }
    
    constraint TargetIsCollection {
        guard: self.satisfiesAll("Resolved")
        
        check: not modelAdapter.isCollection(self)
        message: "Reference named " + self.referenceName + " of object type " + self.objectExpression.getObjectType(modelAdapter).getName() + " is collection"
    }
}

context EXPR!ObjectSelectorExpression {
    constraint Resolved {
        guard: self.collectionExpression.satisfiesAll("Resolved")
        
        check: self.getObjectType(modelAdapter).isDefined()
        message: "Type of object selector expression is not defined: " + self
    }
}

context EXPR!ObjectFilterExpression {
    constraint Resolved {
        guard: self.objectExpression.satisfiesAll("Resolved")
        
        check: self.getObjectType(modelAdapter).isDefined()
        message: "Type of object filter expression is not defined: " + self
    }
}

context EXPR!ObjectVariableReference {
    constraint Resolved {
        check: self.variable.type().isDefined()
        message: "Variable is unknown: " + self
    }

    constraint TypeIsDefined {
        guard: self.satisfiesAll("Resolved") and self.variable.satisfiesAll("Resolved")
        
        check: self.getObjectType(modelAdapter).isDefined()
        message: "Type of variable " + self.variable.name + " is unknown"
    }
}

context EXPR!CastObject {
    constraint Resolved {
        guard: self.objectExpression.satisfiesAll("Resolved")
        
        check: self.getObjectType(modelAdapter).isDefined()
        message: "Type of cast object expression is not defined: " + self
    }

    constraint CastedTypeIsCompatible {
        guard: self.satisfiesAll("Resolved") and self.objectExpression.satisfiesAll("Resolved")
        
        check: modelAdapter.getSuperTypes(self.getObjectType(modelAdapter)).contains(self.objectExpression.getObjectType(modelAdapter))
        message: "Invalid casting type: " + self.objectExpression.getObjectType(modelAdapter).getName() + " is not supertype of " + self.getObjectType(modelAdapter).getName()
    }
}
