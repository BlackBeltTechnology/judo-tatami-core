@cached
operation JQLEXTRACT!NavigationExpression transformToExpression() : EXPR!Expression {
    if (self.features.isEmpty()) {
        return self.equivalent("NavigationExpressionBaseToInstance");
    } else {
        return self.features.last().transformToExpression();
    }
}

@cached
operation JQLEXTRACT!NavigationExpression transformBaseToExpression() : EXPR!Expression {
    if (self.isBasedOnObject() and self.isBasedOnVariable()) {
        return self.equivalent("NavigationExpressionBaseToInstance");
    } else if (self.isBasedOnCollection() and self.isBasedOnStructuredType()) {
        return self.equivalent("NavigationExpressionBaseToImmutableCollection");
    } else if (self.isBasedOnCollection() and not self.isBasedOnStructuredType()) {
        return self.equivalent("NavigationExpressionBaseToCollection");
    }
}

rule NavigationExpressionBaseToInstance
  transform s : JQLEXTRACT!NavigationExpression
  to t : EXPR!ObjectVariableReference {
  	guard: s.isBasedOnObject() and s.isBasedOnVariable()
  	
  	var instance = transferObjectInstances.selectOne(i | s.getVariable().typeName == i.elementName.name and
  	                                                     s.getVariable().typeNamespace == i.elementName.namespace and
  	                                                     s.getVariable().name == i.`alias`);
  	
  	t.variable = instance;
}

rule NavigationExpressionBaseToImmutableCollection
  transform s : JQLEXTRACT!NavigationExpression
  to t : EXPR!ImmutableCollection {
  	guard: s.isBasedOnCollection() and s.isBasedOnStructuredType()
  	
  	t.elementName = s.equivalent("NavigationExpressionBaseToTypeName");
}

rule NavigationExpressionBaseToCollection
  transform s : JQLEXTRACT!NavigationExpression
  to t : EXPR!ObjectVariableReference {
  	guard: s.isBasedOnCollection() and not s.isBasedOnStructuredType()
  	
  	var instance = transferObjectInstances.selectOne(i | s.getVariable().typeName == i.elementName.name and
  	                                                     s.getVariable().typeNamespace == i.elementName.namespace and
  	                                                     s.getVariable().name == i.`alias`);
  	                                                     
  	t.variable = instance;
}

rule NavigationExpressionBaseToTypeName
  transform s : JQLEXTRACT!NavigationExpression
  to t : EXPR!TypeName {
  	guard: s.isBasedOnStructuredType()
  	
  	var objectType = s.base.getStructuredTypeByName();
  	t.name = objectType.name;
  	if (objectType.ePackage.isDefined()) {
  	    t.namespace = objectType.ePackage.asString();
  	}
}
