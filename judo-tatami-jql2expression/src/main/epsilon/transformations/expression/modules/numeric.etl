import "../../../operations/asm/_importAll.eol";
import "../../../operations/jqlextract/_importAll.eol";
import "../../../operations/jqlextract2asm/_importAll.eol";

@cached
operation JQLEXTRACT!BinaryOperation transformToExpression() : EXPR!Expression {
    if (self.isDecimal()) {
    	return self.equivalent("BinaryOperationToDecimalAritmeticExpression");
    } else if (self.isInteger()) {
    	return self.equivalent("BinaryOperationToIntegerAritmeticExpression");
    } else {
    	return null;
    } 
}

@abstract
@greedy
rule BinaryOperationToExpression
  transform s : JQLEXTRACT!BinaryOperation
  to t : EXPR!Expression {
}

rule BinaryOperationToDecimalAritmeticExpression
  transform s : JQLEXTRACT!BinaryOperation
  to t : EXPR!DecimalAritmeticExpression
  extends BinaryOperationToExpression {
    guard: s.isDecimal()
    
    switch (s.operator) {
        case "+": t.operator = EXPR!DecimalOperator#add;
        case "-": t.operator = EXPR!DecimalOperator#substract;
        case "*": t.operator = EXPR!DecimalOperator#multiply;
        case "/": t.operator = EXPR!DecimalOperator#divide;
    }
    t.left = s.leftOperand.transformToExpression();
    t.right = s.rightOperand.transformToExpression();
}

rule BinaryOperationToIntegerAritmeticExpression
  transform s : JQLEXTRACT!BinaryOperation
  to t : EXPR!IntegerAritmeticExpression
  extends BinaryOperationToExpression {
    guard: s.isInteger()
    
    switch (s.operator) {
        case "+": t.operator = EXPR!IntegerOperator#add;
        case "-": t.operator = EXPR!IntegerOperator#substract;
        case "*": t.operator = EXPR!IntegerOperator#multiply;
        case "/": t.operator = EXPR!IntegerOperator#divide;
        case "%": t.operator = EXPR!IntegerOperator#modulo;
    }
    t.left = s.leftOperand.transformToExpression();
    t.right = s.rightOperand.transformToExpression();
}
