operation String anchor(anchor1 : String, anchor2 : String) : String {
	if (anchor1.isUndefined()) {
		return self;
	} else {
		if (anchor2.isUndefined()) {
			return self + "#" + anchor1;
		} else {
			return self.anchor(anchor1, null) + "/" + anchor2;
		}
	}
} 

operation String anchor(anchor1 : String) : String {
	return self.anchor(anchor1, null);
}

operation createBlankApplicationForPreview() : UI!ui::Application {
	
	var application : UI!ui::Application = new UI!ui::Application();
	
	var defaultLayout = new UI!ui::LayoutType();
    defaultLayout.cols = applicationColumns;
    defaultLayout.name = "default";
    defaultLayout.original = true;
    
    var dashboardForPreview = new UI!ui::PageDefinition();
    dashboardForPreview.name = previewElement.getName().anchor("preview","dashboard");
    dashboardForPreview.pageType = UI!ui::PageType#DASHBOARD;
    
    var pageContainerForPreview : UI!ui::PageContainer = new UI!ui::PageContainer();
    pageContainerForPreview.name = previewElement.getName().anchor("preview","pageContainer");
    pageContainerForPreview.layoutType = defaultLayout;
    
    dashboardForPreview.containers.add(pageContainerForPreview);
    
    application.layoutTypes.add(defaultLayout);
    application.name = previewElement.getName().anchor("preview","application");
    application.navigationController = new UI!ui::NavigationController();
    application.navigationController.name = previewElement.getName().anchor("preview","navigationController");
    application.dashboard = dashboardForPreview;
    application.pages.add(dashboardForPreview);
    
    application.actor = new UI!ui::data::ClassType();
    application.actor.name = previewElement.getName().anchor("preview","classType");
    application.dataElements.add(application.actor);

    var relation : UI!ui::data::RelationType = new UI!ui::data::RelationType();
    relation.name = "previewRelation";
    application.actor.relations.add(relation);
    
    for (b in rootElement.eContainer().getAllPossibleRelationBehaviours()){
    	relation.behaviours.add(b);
    }

    return application;
}

operation createHorizontalFlex(name : String, col : Real) : UI!ui::Flex {
	var ret : UI!ui::Flex = new UI!ui::Flex();
	ret.name = name;
	ret.col = col;
	ret.direction = UI!ui::Axis#HORIZONTAL;
	return ret;
}

operation createVerticalFlex(name : String, col : Real) : UI!ui::Flex {
	var ret : UI!ui::Flex = new UI!ui::Flex();
	ret.name = name;
	ret.col = col;
	ret.direction = UI!ui::Axis#VERTICAL;
	return ret;
}

operation createButton(name : String, label : String, col : Real, action : UI!ui::Action) : UI!ui::Button {
	var ret : UI!ui::Button = new UI!ui::Button();
	ret.name = name;
	ret.label = label;
	ret.col = col;
	ret.action = action;
	return ret;
}
