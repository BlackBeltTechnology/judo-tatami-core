operation String anchor(anchor1 : String, anchor2 : String) : String {
	if (anchor1.isUndefined()) {
		return self;
	} else {
		if (anchor2.isUndefined()) {
			return self + "#" + anchor1;
		} else {
			return self.anchor(anchor1, null) + "/" + anchor2;
		}
	}
} 

operation String anchor(anchor1 : String) : String {
	return self.anchor(anchor1, null);
}

operation createBlankApplicationForPreview() : UI!ui::Application {
	
	var application : UI!ui::Application = new UI!ui::Application();
	
	var defaultLayout = new UI!ui::LayoutType();
    defaultLayout.cols = applicationColumns;
    defaultLayout.name = "default";
    defaultLayout.original = true;
    
    var dashboardForPreview = new UI!ui::PageDefinition();
    dashboardForPreview.name = previewElement.getName().anchor("preview","dashboard");
    
    var pageContainerForPreview : UI!ui::PageContainer = new UI!ui::PageContainer();
    pageContainerForPreview.name = previewElement.getName().anchor("preview","pageContainer");
    pageContainerForPreview.layoutType = defaultLayout;
    
    dashboardForPreview.containers.add(pageContainerForPreview);
    
    application.layoutTypes.add(defaultLayout);
    application.name = previewElement.getName().anchor("preview","application");
    application.navigationController = new UI!ui::NavigationController();
    application.navigationController.name = previewElement.getName().anchor("preview","navigationController");
    application.dashboard = dashboardForPreview;
    application.pages.add(dashboardForPreview);
    
    application.actor = new UI!ui::data::ClassType();
    application.actor.name = previewElement.getName().anchor("preview","classType");
    
    return application;
}

operation clonePagesOfInheritedRelations(application : UI!ui::Application) {

	var classTypes = application.dataElements.select(d | d.isKindOf(UI!ui::data::ClassType));
	
	for (classType : UI!ui::data::ClassType in classTypes) {
		for (relation : UI!ui::data::RelationType in classType.relations) {
			if (relation.~originalRelation.isDefined() and relation.~originalRelation.eContainer() <> classType.~originalClass) {
	
				var viewPage = application.pages.selectOne(p | p.~originalRelation == relation.~originalRelation and p.pageType == UI!ui::PageType#VIEW);
				if (viewPage.isDefined()) {
					var clone = ecoreUtil.copy(viewPage);
					clone.name = (esmUtils.getNamespaceElementFQName(classType.~originalClass) + "." + relation.~originalRelation.name).anchor("View");
					clone.dataElement = relation;
					application.pages.add(clone);
				}
				
				var createPage = application.pages.selectOne(p | p.~originalRelation == relation.~originalRelation and p.pageType == UI!ui::PageType#CREATE);
				if (createPage.isDefined()) {
					var clone = ecoreUtil.copy(createPage);
					clone.name = (esmUtils.getNamespaceElementFQName(classType.~originalClass) + "." + relation.~originalRelation.name).anchor("Create");
					clone.dataElement = relation;
					application.pages.add(clone);
				}
				
				var updatePage = application.pages.selectOne(p | p.~originalRelation == relation.~originalRelation and p.pageType == UI!ui::PageType#UPDATE);
				if (updatePage.isDefined()) {
					var clone = ecoreUtil.copy(updatePage);
					clone.name = (esmUtils.getNamespaceElementFQName(classType.~originalClass) + "." + relation.~originalRelation.name).anchor("Edit");
					clone.dataElement = relation;
					application.pages.add(clone);
				}
				
				var tablePage = application.pages.selectOne(p | p.~originalRelation == relation.~originalRelation and p.pageType == UI!ui::PageType#TABLE);
				if (tablePage.isDefined()) {
					var clone = ecoreUtil.copy(tablePage);
					clone.name = (esmUtils.getNamespaceElementFQName(classType.~originalClass) + "." + relation.~originalRelation.name).anchor("Table");
					clone.dataElement = relation;
					application.pages.add(clone);
				}
			}
		}
	}
}

