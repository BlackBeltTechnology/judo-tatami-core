operation UI!ui::VisualElement updateInheritedReferences(pageDef : UI!ui::PageDefinition) {
    
    log.debug("Updating visual element: " + self.name);
    
    var relation : UI!ui::data::RelationType = pageDef.dataElement;
    
    if (self.isKindOf(UI!ui::Container)) {
        for (child in self.children) {
            child.updateInheritedReferences(pageDef);
        }
    } else if (self.isKindOf(UI!ui::TabController)) {
        for (tab in self.tabs) {
            tab.element.updateInheritedReferences(pageDef);
        }
    } else if (self.isKindOf(UI!ui::Table) or self.isKindOf(UI!ui::Link)) {
        
        var old = self.dataElement; 
        
        if (pageDef.pageType == UI!ui::PageType#TABLE) {
            if (relation <> self.dataElement) {
                self.dataElement = relation;
                log.debug("Changed table page's data element from " + old.eContainer.name + "." + old.name + " to " + self.dataElement.eContainer.name + "." + self.dataElement.name );
            }
        }
        if (self.isKindOf(UI!ui::Table)) {
            for (col in self.columns) {
                col.updateInheritedReferences(pageDef);
            }
        } else {
            for (part in self.parts) {
                part.updateInheritedReferences(pageDef);
            }
        }

    } else if (self.isKindOf(UI!ui::Button)) {
        if (self.action.isKindOf(UI!ui::PageAction)) {
            if (self.dataElement <> self.action.target.dataElement) {
                var application = self.action.target.~application;
                var clonedPage = application.pages.selectOne(p | p.~original.isDefined() and p.~original == self.action.target and  relation.target == p.dataElement.eContainer());
                if (clonedPage.isDefined()) {
                    self.action.target = clonedPage;
                }    
            }
        }
    }
}

operation UI!ui::VisualElement setVisualProperties(component : ESM!esm::ui::Component, application : UI!ui::Application) {

    self.name = component.name;
    self.label = component.getUiLabel();
    self.createIconForLabeledElement(component.iconName);
    self.showLabel = component.showLabel;
    self.showIcon = component.showIcon;
    self.col = component.col.asReal();
    self.row = component.row.asReal();
    
    if (component.fit == ESM!esm::ui::Fit#LOOSE) {
        self.fit = UI!ui::Fit#LOOSE;
    } else if (component.fit == ESM!esm::ui::Fit#TIGHT) {
        self.fit = UI!ui::Fit#TIGHT;
    }
    
    if (component.stretch == ESM!esm::ui::Stretch#NONE) {
        self.stretch = UI!ui::Stretch#NONE;
    } else if (component.stretch == ESM!esm::ui::Stretch#HORIZONTAL) {
        self.stretch = UI!ui::Stretch#HORIZONTAL;
    } else if (component.stretch == ESM!esm::ui::Stretch#VERTICAL) {
        self.stretch = UI!ui::Stretch#VERTICAL;
    } else {
        self.stretch = UI!ui::Stretch#BOTH;
    }
    
    if (component.enabledBy.isDefined()) {
        self.enabledBy = component.enabledBy.mapAttributeType(application, component.getRoot().eContainer.mapClassType(application));
    }
}

operation UI!ui::VisualElement wrapAndLabelVisualElement() : UI!ui::Flex {
    var wrapper = createVerticalFlex(self.name, self.col, self.row + 1d);
    wrapper.crossAxisAlignment = UI!ui::CrossAxisAlignment#CENTER;
    wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#START;
    
    wrapper.stretch = self.stretch;
    self.stretch = UI!ui::Stretch#BOTH;
    
    var label : UI!ui::Label = new UI!ui::Label();
    label.row = 1d;
    label.col = self.col;
    label.stretch = UI!ui::Stretch#HORIZONTAL;
    label.name = self.name.anchor("Label");
    
    if (self.getIsLabelVisible()) {
        label.label = self.label;
        label.showLabel = true;
    }
    
    if (self.getIsIconVisible()) {
        var icon : UI!ui::Icon = new UI!ui::Icon();
        icon.name = self.icon.name;
        label.icon = icon;
        label.showIcon = true;
    }
    
    wrapper.children.add(label);
    wrapper.children.add(self);
    return wrapper;
}
