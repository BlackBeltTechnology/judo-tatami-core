
operation UI!ui::data::RelationType mapRelationBehaviour(behaviour : Any) {

	// Handle inheritence on API level. 
	var ownerTargetRelationType = UI!ui::data::RelationType.all()
		.selectOne(s | s.~application == self.~application 
			and self.~original == s.~original 
			and s.~original.eContainer == s.eContainer.~original);		

	var selfBehaviour = self.behaviours
		.selectOne(b | b.targetRelationType = ownerTargetRelationType);


	if (selfBehaviour.isUndefined()) {
		selfBehaviour = new UI!ui::data::RelationBehaviour();		
		selfBehaviour.targetRelationType = ownerTargetRelationType;
	}
	selfBehaviour.behaviourTypes.add(behaviour);
	self.behaviours.add(selfBehaviour);
}

operation UI!ui::data::RelationType mapTargetRelationBehaviour(behaviour : Any,
   targetRelationType : UI!ui::data::RelationType) {

	// Handle inheritence on API level. 
	var ownerTargetRelationType = UI!ui::data::RelationType.all()
		.selectOne(s | s.~application == self.~application 
			and targetRelationType.~original == s.~original 
			and s.~original.eContainer == s.eContainer.~original);		

	var targetBehaviour = self.targetBehaviours
		.selectOne(b | b.targetRelationType = ownerTargetRelationType);


	if (targetBehaviour.isUndefined()) {
		targetBehaviour = new UI!ui::data::RelationBehaviour();		
		targetBehaviour.targetRelationType = ownerTargetRelationType;
	}
	targetBehaviour.behaviourTypes.add(behaviour);	
	self.targetBehaviours.add(targetBehaviour);
}


operation UI!ui::data::RelationType mapSourceRelationBehaviour(behaviour : Any,
   sourceRelationType : UI!ui::data::RelationType) {

	// Handle inheritence on API level. 
	var ownerTargetRelationType = sourceRelationType;
//	var ownerTargetRelationType = UI!ui::data::RelationType.all()
//		.selectOne(s | s.~application == self.~application 
//			and sourceRelationType.~original == s.~original 
//			and s.~original.eContainer == s.eContainer.~original);		
//
	var sourceBehaviour = self.sourceBehaviours
		.selectOne(b | b.targetRelationType = ownerTargetRelationType);


	if (sourceBehaviour.isUndefined()) {
		sourceBehaviour = new UI!ui::data::RelationBehaviour();		
		sourceBehaviour.targetRelationType = ownerTargetRelationType;
	}
	sourceBehaviour.behaviourTypes.add(behaviour);	
	self.sourceBehaviours.add(sourceBehaviour);
}
