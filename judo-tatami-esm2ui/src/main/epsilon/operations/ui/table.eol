operation UI!ui::Table calculateActions(application : UI!ui::Application, preview : Boolean) {
	var relationType = self.getRelationType();
	var classType = self.getTargetClassType();
	
	var pageDefinition = self.getPageDefinition();
	var isChangeable = not ((relationType.relationKind == UI!ui::data::RelationKind#COMPOSITION or relationType.relationKind == UI!ui::data::RelationKind#AGGREGATION)
	               and (pageDefinition.pageType == UI!ui::PageType#VIEW or pageDefinition.pageType == UI!ui::PageType#OPERATION_OUTPUT));

	if (relationType.isDefined()) {
		if (preview) {
			var viewAction = new UI!ui::ViewAction();
			viewAction.target = application.pages.selectOne(p | p.pageType = UI!ui::PageType#DASHBOARD);
			self.rowActions.add(viewAction);
		} else {
			var page = application.pages.selectOne(p | p.pageType = UI!ui::PageType#VIEW and p.getRelationType() == relationType);
			if (page.isDefined()) {
				log.debug(" ========= TABLE DEF: VIEW: " + relationType.name + " - " + page.name);
			    var viewAction = new UI!ui::ViewAction();
				viewAction.target = page;
				self.rowActions.add(viewAction);
			} else {
				log.warn("No view page defined for: " + self.name + " - " + relationType.eContainer.name + "." + relationType.name);
			}
		}

	    if (isChangeable) {
	        if (classType.getIsClassBehaviourTypeDeletable()) {
	            self.rowActions.add(new UI!ui::DeleteAction()); 
	        }
	    
	        if (classType.getIsClassBehaviourTypeUpdatable()) {
	            if (preview) {
	                var editAction = new UI!ui::EditAction();
	                editAction.target = application.pages.selectOne(p | p.pageType = UI!ui::PageType#DASHBOARD);
	                self.rowActions.add(editAction);
	            } else {
	                var page = application.pages.selectOne(p | p.pageType = UI!ui::PageType#UPDATE and p.getRelationType() == relationType);
	                if (page.isDefined()) {
	                    log.debug(" ========= TABLE DEF: EDIT: " + relationType.name + " - " + page.name);
	                    var editAction = new UI!ui::EditAction();
	                    editAction.target = page;
	                    self.rowActions.add(editAction);
	                } else {
	                    log.warn("No update page defined for: " + self.name  + " - " + relationType.eContainer.name + "." + relationType.name);
	                }
	            }
	        }
	        
	        if (relationType.getIsRelationBehaviourTypeRemovable()
	        	//or (relationType.eContainer.isMapped and (pageDefinition.pageType == UI!ui::PageType#OPERATION_INPUT or pageDefinition.pageType == UI!ui::PageType#CREATE))
	        	) {
	            self.rowActions.add(new UI!ui::RemoveAction());
	            
	            /*if (not relationType.getIsRelationBehaviourTypeRemovable()) {
	            	relationType.behaviours.add(UI!ui::data::RelationBehaviourType#REMOVE);
	            }*/
	        }
	        
	        if (relationType.getIsRelationBehaviourTypeUnsetable()
	        	//or (relationType.eContainer.isMapped and (pageDefinition.pageType == UI!ui::PageType#OPERATION_INPUT or pageDefinition.pageType == UI!ui::PageType#CREATE))
	        	) {
	            self.rowActions.add(new UI!ui::UnsetAction());
	            
	            /*if (not relationType.getIsRelationBehaviourTypeUnsetable()) {
	            	relationType.behaviours.add(UI!ui::data::RelationBehaviourType#UNSET);
	            }*/
	        }
	        
	        if (not self.isTablePage() and
	                (
	                relationType.getIsRelationBehaviourTypeCreatable() or
	                relationType.getIsRelationBehaviourTypeSetable() or
	                relationType.getIsRelationBehaviourTypeAddable()
	                //or (relationType.eContainer.isMapped and (pageDefinition.pageType == UI!ui::PageType#OPERATION_INPUT or pageDefinition.pageType == UI!ui::PageType#CREATE))
	                )
	            ) {
	            self.createRelationActionButtonsForTable(application, preview);
	        }
	    
	    }

	}
	// TODO: Handling Input/Output operation parameters.
}

operation UI!ui::Table createRelationActionButtonsForTable(application : UI!ui::Application, preview : Boolean) {
	
	var relationType = self.getRelationType();
	var tableContainer : UI!ui::Flex = self.eContainer();
	var tableIndex : Integer = tableContainer.children.indexOf(self);
	
	var buttonGroup : UI!ui::Flex = createHorizontalFlex("instanceActions", self.col, 1d);
	buttonGroup.mainAxisAlignment = UI!ui::MainAxisAlignment#START;
	buttonGroup.crossAxisAlignment = UI!ui::CrossAxisAlignment#CENTER;
	buttonGroup.stretch = UI!ui::Stretch#BOTH;

	if (tableContainer.children.size() == 2 and tableContainer.children.get(0).isKindOf(UI!ui::Label)) {
		tableContainer.children.add(1, buttonGroup);
	} else if (tableContainer.children.size() == 1 and tableContainer.children.get(0).isKindOf(UI!ui::Table)) {
		tableContainer.children.add(0, buttonGroup);
	} else {
		tableContainer.children.add(tableIndex, buttonGroup);
	}
	
	//var pageDefinition = self.getPageDefinition();
	
	if (relationType.getIsRelationBehaviourTypeCreatable()) {
		if (preview) {
			var button : UI!ui::Button = createButton("create", "CREATE", 2d, new UI!ui::CreateAction());
		    button.action.target = application.pages.selectOne(p | p.pageType = UI!ui::PageType#DASHBOARD);
		    button.action.dataElement = relationType;
		    buttonGroup.children.add(button);
		} else {
			var page = application.pages.selectOne(p | p.pageType = UI!ui::PageType#CREATE and p.getRelationType() == relationType);
			if (page.isDefined()) {
				log.debug(" ========= PAGE DEF: CREATE: " + relationType.eContainer.name + "." + relationType.name + " - " + page.name);
			    var button : UI!ui::Button = createButton("create", "CREATE", 2d, new UI!ui::CreateAction());
			    button.action.target = page;
			    button.action.dataElement = relationType;
			    buttonGroup.children.add(button);
			} else {
				log.warn("No update page defined for: " + self.name + " - " + relationType.eContainer.name + "." + relationType.name);
			}
		}
	}
	
	if (relationType.getIsRelationBehaviourTypeSetable()
		//or (relationType.eContainer.isMapped and (pageDefinition.pageType == UI!ui::PageType#OPERATION_INPUT or pageDefinition.pageType == UI!ui::PageType#CREATE))
		) {
		var button : UI!ui::Button = createButton("set", "SET", 2d, new UI!ui::SetAction());
	    button.action.dataElement = relationType;
	    buttonGroup.children.add(button);
	    
	    /*if (not relationType.getIsRelationBehaviourTypeSetable()) {
	        relationType.behaviours.add(UI!ui::data::RelationBehaviourType#SET);
	        relationType.behaviours.add(UI!ui::data::RelationBehaviourType#RANGE);
	    }*/
	}

	if (relationType.getIsRelationBehaviourTypeAddable()
		//or (relationType.eContainer.isMapped and (pageDefinition.pageType == UI!ui::PageType#OPERATION_INPUT or pageDefinition.pageType == UI!ui::PageType#CREATE))
		) {
		var button : UI!ui::Button = createButton("add", "ADD", 2d, new UI!ui::AddAction());
		button.action.dataElement = relationType;
		buttonGroup.children.add(button);
		
		/*if (not relationType.getIsRelationBehaviourTypeAddable()) {
	         relationType.behaviours.add(UI!ui::data::RelationBehaviourType#ADD);
	         relationType.behaviours.add(UI!ui::data::RelationBehaviourType#RANGE);
	    }*/
	}
}

operation UI!ui::Table isTablePage() : Boolean {
	
	var pageDef = self.getPageDefinition();
	
	if (pageDef.isDefined()) {
		var dataElement = self.getPageDefinition().dataElement;
		if (dataElement.isDefined() and dataElement.isKindOf(UI!ui::data::RelationType)) {
			return pageDef.pageType == UI!ui::PageType#TABLE or	(pageDef.pageType == UI!ui::PageType#DASHBOARD and dataElement.isCollection);
		}
		return pageDef.pageType == UI!ui::PageType#TABLE; 
	}
	
	return false;
}

operation UI!ui::Table wrapAndLabelTable() {
	var tableContainer : UI!ui::Container = self.eContainer();
	var tableIndex : Integer = tableContainer.children.indexOf(self);
	var wrapper = createVerticalFlex(self.name, self.col, self.row + 1d);
	
	if (tableContainer.direction == UI!ui::Axis#HORIZONTAL) {
		if (tableContainer.crossAxisAlignment == UI!ui::CrossAxisAlignment#START) {
			wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#START;
		} else if (tableContainer.crossAxisAlignment == UI!ui::CrossAxisAlignment#END) {
			wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#END;
		} else {
			wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#CENTER;
		}
		wrapper.crossAxisAlignment = UI!ui::CrossAxisAlignment#CENTER;
	} else {
		if (tableContainer.mainAxisAlignment == UI!ui::MainAxisAlignment#START) {
			wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#START;
		} else if (tableContainer.mainAxisAlignment == UI!ui::MainAxisAlignment#END) {
			wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#END;
		} else {
			wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#CENTER;
		}
		wrapper.crossAxisAlignment = UI!ui::CrossAxisAlignment#CENTER;
	}
	
	wrapper.stretch = self.stretch;
	self.stretch = UI!ui::Stretch#HORIZONTAL;
	
	if (not self.dataElement.isCollection or self.row < 2d) {
		self.row = 2d;
	}
	
	if (self.dataElement.isCollection) {
		self.stretch = UI!ui::Stretch#BOTH;
	}

	wrapper.children.add(self);
	tableContainer.children.add(tableIndex, wrapper);
	
	if (not self.isTablePage() and (self.label.isDefined() or self.icon.isDefined())) {
		var tableIndex : Integer = wrapper.children.indexOf(self);
		var label : UI!ui::Label = new UI!ui::Label();
		label.row = 1d;
		label.col = self.col;
		label.stretch = self.stretch;
		label.name = self.name.anchor("Label");

		if (self.label.isDefined()) {
			label.label = self.label;
		}
		
		if (self.icon.isDefined() and self.icon.trim().length() > 0) {
			var icon : UI!ui::Icon = new UI!ui::Icon();
			icon.name = self.icon;
			label.icon = icon;
		}
		
		wrapper.children.add(tableIndex, label);
	}
}
