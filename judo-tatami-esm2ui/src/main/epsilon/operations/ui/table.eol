operation UI!ui::Table calculateActions(application : UI!ui::Application, preview : Boolean) {
    var relationType = self.getRelationType();
    var pageDefinition = self.getPageDefinition();
    var pageType = pageDefinition.pageType;

    if (relationType.isDefined()) {
        
        // **** VIEW: view, create, update, delete (add, set, remove - optional) ****
        if (pageType == UI!ui::PageType#VIEW or
            (pageType == UI!ui::PageType#DASHBOARD and not relationType.isCollection)) {
            
            self.createViewUpdateDeleteActions(relationType, application, preview);
            
            if (relationType.getIsRelationBehaviourTypeCreatable()){
                 var buttonGroup : UI!ui::Flex = self.createActionButtonGroupForTable();
                 self.createCreateAction(relationType, application, preview, buttonGroup);
            }
            
            if (allRowActions) {
                self.createRemoveAddSetActions(relationType);
            }
        }
        
        if (pageType == UI!ui::PageType#CREATE) {
            if (not self.disabled) {
                var buttonGroup : UI!ui::Flex = self.createActionButtonGroupForTable();
                self.createRemoveAction();
                self.createSetAction(relationType, buttonGroup);
                self.createAddAction(relationType, buttonGroup);
            }
        }
        
        if (pageType == UI!ui::PageType#UPDATE) {
            if (not self.disabled) {
                self.createRemoveAddSetActions(relationType);
            }
        }
        // **** INPUT PAGE:
        if (pageType == UI!ui::PageType#OPERATION_INPUT) {
            if (not self.disabled and relationType.memberType <> UI!ui::data::MemberType#TRANSIENT) {
                var buttonGroup : UI!ui::Flex = self.createActionButtonGroupForTable();
                self.createRemoveAction();
                self.createSetAction(relationType, buttonGroup);
                self.createAddAction(relationType, buttonGroup);
            }
            //TODO: review behaviour of transient relations on input pages
            /*if (relationType.memberType == UI!ui::data::MemberType#TRANSIENT) {
                var buttonGroup : UI!ui::Flex = self.createActionButtonGroupForTable();
                self.createCreateAction(relationType, application, preview, buttonGroup);
                self.createViewActionForTransientInput(relationType, application);
                self.createDeleteAction(relationType);
            }*/
        }
        // **** OUTPUT PAGE:
        if (pageType == UI!ui::PageType#OPERATION_OUTPUT) {
            self.createViewAction(relationType, application, preview);
        }
        
        // **** CREATE/UPDATE: view, update, delete, remove (create, add, set buttons are created for the Table Page - see 'pageDefinition.eol') ****
        if (pageType == UI!ui::PageType#TABLE or (pageType == UI!ui::PageType#DASHBOARD and relationType.isCollection)) {
            
            self.createViewUpdateDeleteActions(relationType, application, preview);
            
            if (relationType.getIsRelationBehaviourTypeRemovable()) {
                self.createRemoveAction();
            }
        }
    
        if (pageType == UI!ui::PageType#CUSTOM) {
        
        }
    }
}

//to many relations Set, Remove, Add actions are applicable (Unset is only applicable to single relation)
operation UI!ui::Table createRemoveAddSetActions(relationType : UI!ui::data::RelationType) {
    if (relationType.getIsRelationBehaviourTypeRemovable()) {
        self.createRemoveAction();
    }
    if (relationType.getIsRelationBehaviourTypeSetable() or relationType.getIsRelationBehaviourTypeAddable()){
        var buttonGroup : UI!ui::Flex = self.createActionButtonGroupForTable();
        if (relationType.getIsRelationBehaviourTypeSetable()) {
            self.createSetAction(relationType, buttonGroup);
        }
        if (relationType.getIsRelationBehaviourTypeAddable()) {
            self.createAddAction(relationType, buttonGroup);
        }
    }
}

//adding remove action to table
operation UI!ui::Table createRemoveAction() {
    self.rowActions.add(new UI!ui::RemoveAction());
}

//adding set action to table
operation UI!ui::Table createSetAction(relationType : UI!ui::data::RelationType, buttonGroup : UI!ui::Flex) {
    var button : UI!ui::Button = createButton("set", "Set", 2d, new UI!ui::SetAction());
    button.action.dataElement = relationType;
    buttonGroup.children.add(button);
}

//adding add action to table
operation UI!ui::Table createAddAction(relationType : UI!ui::data::RelationType, buttonGroup : UI!ui::Flex) {
    var button : UI!ui::Button = createButton("add", "Add", 2d, new UI!ui::AddAction());
    button.action.dataElement = relationType;
    buttonGroup.children.add(button);
}

//creating View, Update and Delete Actions - row actions applicable to View and Table pages
operation UI!ui::Table createViewUpdateDeleteActions(relationType : UI!ui::data::RelationType, application : UI!ui::Application, preview : Boolean) {
    self.createViewAction(relationType, application, preview);
    if (relationType.getIsRelationBehaviourTypeUpdatable()) {
        self.createUpdateAction(relationType, application, preview);
    }
    if (relationType.getIsRelationBehaviourTypeDeletable()) {
        self.createDeleteAction(relationType);
    }
}

//create view action button
operation UI!ui::Table createViewAction(relationType : UI!ui::data::RelationType, application : UI!ui::Application, preview : Boolean) {
    if (preview) {
        var action = createViewAction(application.pages.selectOne(p | p.pageType = UI!ui::PageType#DASHBOARD),
                relationType, relationType.memberType == UI!ui::data::MemberType#TRANSIENT);
        self.rowActions.add(action);
    } else {
        var page = application.pages.selectOne(p | p.pageType = UI!ui::PageType#VIEW and p.getRelationType() == relationType);
        if (page.isDefined()) {
            log.debug(" ========= Found view page for TABLE " + relationType.name + " - " + page.name);
            var action = createViewAction(page, relationType, relationType.memberType == UI!ui::data::MemberType#TRANSIENT);
            self.rowActions.add(action);
        } else {
            log.warn("No view page defined for: " + self.name + " - " + relationType.eContainer.name + "." + relationType.name);
        }
    }
}

operation UI!ui::Table createViewActionForTransientInput(relationType : UI!ui::data::RelationType, application : UI!ui::Application) {
    var page = application.pages.selectOne(p | p.pageType = UI!ui::PageType#UPDATE and p.getRelationType() == relationType);
    if (page.isDefined()) {
        log.debug(" ========= Found view page for transient TABLE " + relationType.name + " - " + page.name);
        var action = createViewAction(page, relationType, relationType.memberType == UI!ui::data::MemberType#TRANSIENT);
        self.rowActions.add(action);
    } else {
        log.warn("No view page defined for transient input: " + self.name + " - " + relationType.eContainer.name + "." + relationType.name);
    }
}

//create delete action button
operation UI!ui::Table createDeleteAction(relationType : UI!ui::data::RelationType) {
    var deleteAction = new UI!ui::DeleteAction();
    deleteAction.isTransient = relationType.memberType == UI!ui::data::MemberType#TRANSIENT;
    self.rowActions.add(deleteAction);
}

//create update action button
operation UI!ui::Table createUpdateAction(relationType : UI!ui::data::RelationType, application : UI!ui::Application, preview : Boolean) {
    if (preview) {
        var action = createEditAction(application.pages.selectOne(p | p.pageType = UI!ui::PageType#DASHBOARD),
                relationType, relationType.memberType == UI!ui::data::MemberType#TRANSIENT);
        self.rowActions.add(action);
    } else {
        var page = application.pages.selectOne(p | p.pageType = UI!ui::PageType#UPDATE and p.getRelationType() == relationType);
        if (page.isDefined()) {
            log.debug(" ========= Found update page for TABLE " + relationType.name + " - " + page.name);
            var action = createEditAction(page, relationType, relationType.memberType == UI!ui::data::MemberType#TRANSIENT);
            self.rowActions.add(action);
        } else {
            log.warn("No update page defined for: " + self.name  + " - " + relationType.eContainer.name + "." + relationType.name);
        }
    }
}

//create create action - applicable to view page only
operation UI!ui::Table createCreateAction(relationType : UI!ui::data::RelationType, application : UI!ui::Application, preview : Boolean, buttonGroup : UI!ui::Flex) {
    if (preview) {
        var action = createCreateAction(application.pages.selectOne(p | p.pageType = UI!ui::PageType#DASHBOARD),
                relationType, relationType.memberType == UI!ui::data::MemberType#TRANSIENT);
        var button : UI!ui::Button = createButton("create", "Create", 2d, action);
        buttonGroup.children.add(button);
    } else {
        var page = application.pages.selectOne(p | p.pageType = UI!ui::PageType#CREATE and p.getRelationType() == relationType);
        if (page.isDefined()) {
            log.debug(" ========= Found create page for TABLE " + relationType.name + " - " + page.name);
            var action = createCreateAction(page, relationType, relationType.memberType == UI!ui::data::MemberType#TRANSIENT);
            var button : UI!ui::Button = createButton("create", "Create", 2d, action);
            buttonGroup.children.add(button);
        } else {
            log.warn("No update page defined for: " + self.name + " - " + relationType.eContainer.name + "." + relationType.name);
        }
    }
}

//creating a flex for instance action buttons
operation UI!ui::Table createActionButtonGroupForTable() : UI!ui::Flex {

    var tableContainer : UI!ui::Flex = self.eContainer();
    var tableIndex : Integer = tableContainer.children.indexOf(self);
    
    var buttonGroup : UI!ui::Flex = createHorizontalFlex("instanceActions", self.col, 1d);
    buttonGroup.mainAxisAlignment = UI!ui::MainAxisAlignment#START;
    buttonGroup.crossAxisAlignment = UI!ui::CrossAxisAlignment#CENTER;
    buttonGroup.stretch = UI!ui::Stretch#BOTH;

    if (tableContainer.children.size() == 2 and tableContainer.children.get(0).isKindOf(UI!ui::Label)) {
        tableContainer.children.add(1, buttonGroup);
    } else if (tableContainer.children.size() == 1 and tableContainer.children.get(0).isKindOf(UI!ui::Table)) {
        tableContainer.children.add(0, buttonGroup);
    } else {
        tableContainer.children.add(tableIndex, buttonGroup);
    }
    
    return buttonGroup;
}

operation UI!ui::Table isTablePage() : Boolean {
    
    var pageDef = self.getPageDefinition();
    
    if (pageDef.isDefined()) {
        var dataElement = self.getPageDefinition().dataElement;
        if (dataElement.isDefined() and dataElement.isKindOf(UI!ui::data::RelationType)) {
            return pageDef.pageType == UI!ui::PageType#TABLE or (pageDef.pageType == UI!ui::PageType#DASHBOARD and dataElement.isCollection);
        }
        return pageDef.pageType == UI!ui::PageType#TABLE; 
    }
    
    return false;
}

operation UI!ui::Table wrapAndLabelTable() {
    var tableContainer : UI!ui::Container = self.eContainer();
    var tableIndex : Integer = tableContainer.children.indexOf(self);
    var wrapper = createVerticalFlex(self.name, self.col, self.row + 1d);
    
    if (tableContainer.direction == UI!ui::Axis#HORIZONTAL) {
        if (tableContainer.crossAxisAlignment == UI!ui::CrossAxisAlignment#START) {
            wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#START;
        } else if (tableContainer.crossAxisAlignment == UI!ui::CrossAxisAlignment#END) {
            wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#END;
        } else {
            wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#CENTER;
        }
        wrapper.crossAxisAlignment = UI!ui::CrossAxisAlignment#CENTER;
    } else {
        if (tableContainer.mainAxisAlignment == UI!ui::MainAxisAlignment#START) {
            wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#START;
        } else if (tableContainer.mainAxisAlignment == UI!ui::MainAxisAlignment#END) {
            wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#END;
        } else {
            wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#CENTER;
        }
        wrapper.crossAxisAlignment = UI!ui::CrossAxisAlignment#CENTER;
    }
    
    wrapper.stretch = self.stretch;
    self.stretch = UI!ui::Stretch#HORIZONTAL;
    
    if (not self.dataElement.isCollection or self.row < 2d) {
        self.row = 2d;
    }
    
    if (self.dataElement.isCollection) {
        self.stretch = UI!ui::Stretch#BOTH;
    }

    wrapper.children.add(self);
    tableContainer.children.add(tableIndex, wrapper);
    
    if (not self.isTablePage() and (self.label.isDefined() or self.icon.isDefined())) {
        var tableIndex : Integer = wrapper.children.indexOf(self);
        var label : UI!ui::Label = new UI!ui::Label();
        label.row = 1d;
        label.col = self.col;
        label.stretch = self.stretch;
        label.name = self.name.anchor("Label");

        if (self.label.isDefined()) {
            label.label = self.label;
        }
        
        if (self.icon.isDefined() and self.icon.trim().length() > 0) {
            var icon : UI!ui::Icon = new UI!ui::Icon();
            icon.name = self.icon;
            label.icon = icon;
        }
        
        wrapper.children.add(tableIndex, label);
    }
}
