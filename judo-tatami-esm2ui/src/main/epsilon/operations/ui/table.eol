operation UI!ui::Table calculateActions(application : UI!ui::Application, preview : Boolean) {
	var relationType = self.getRelationType();
	var pageDefinition = self.getPageDefinition();
	var pageType = pageDefinition.pageType;

	if (relationType.isDefined()) {
		if (pageType == UI!ui::PageType#VIEW or
			pageType == UI!ui::PageType#OPERATION_OUTPUT or
			(pageType == UI!ui::PageType#DASHBOARD and not relationType.isCollection)) {
			self.createViewAction(relationType, application, preview);
		}
		
		if (pageType == UI!ui::PageType#CREATE or pageType == UI!ui::PageType#UPDATE) {
			self.createViewAction(relationType, application, preview);
			if (relationType.getIsRelationBehaviourTypeDeletable()) {
	        	self.createDeleteAction(relationType);
	        }
	        if (relationType.getIsRelationBehaviourTypeUpdatable()) {
	        	self.createUpdateAction(relationType, application, preview);
	        }
	        if (relationType.getIsRelationBehaviourTypeRemovable()) {
	            self.createRemoveAction();
	        }
	        if (relationType.getIsRelationBehaviourTypeUnsetable()) {
	            self.createUnsetAction();
	        }
	        if (relationType.getIsRelationBehaviourTypeCreatable() or
	                relationType.getIsRelationBehaviourTypeSetable() or
	                relationType.getIsRelationBehaviourTypeAddable()){
	         	var buttonGroup : UI!ui::Flex = self.createActionButtonGroupForTable();
	         	
	         	if (relationType.getIsRelationBehaviourTypeCreatable()) {
					self.createCreateAction(relationType, application, preview, buttonGroup);
				}
				if (relationType.getIsRelationBehaviourTypeSetable()) {
					self.createSetAction(relationType, buttonGroup);
				}
				if (relationType.getIsRelationBehaviourTypeAddable()) {
					self.createAddAction(relationType, buttonGroup);
				}
	        }
		}
		
		if (pageType == UI!ui::PageType#OPERATION_INPUT and (relationType.getIsRelationKindAggregation() or relationType.getIsRelationKindComposition())) {
			self.createUpdateAction(relationType, application, preview);
			self.createRemoveAction();
			self.createUnsetAction();
			var buttonGroup : UI!ui::Flex = self.createActionButtonGroupForTable();
	        self.createCreateAction(relationType, application, preview, buttonGroup);
			self.createSetAction(relationType, buttonGroup);
			self.createAddAction(relationType, buttonGroup);
		}
	
		if (pageType == UI!ui::PageType#TABLE or (pageType == UI!ui::PageType#DASHBOARD and relationType.isCollection)) {
			self.createViewAction(relationType, application, preview);
			if (relationType.getIsRelationBehaviourTypeDeletable()) {
	        	self.createDeleteAction(relationType);
	        }
	        if (relationType.getIsRelationBehaviourTypeUpdatable()) {
	        	self.createUpdateAction(relationType, application, preview);
	        }
	        if (relationType.getIsRelationBehaviourTypeRemovable()) {
	            self.createRemoveAction();
	        }
	        if (relationType.getIsRelationBehaviourTypeUnsetable()) {
	            self.createUnsetAction();
	        }
		}
	
		if (pageType == UI!ui::PageType#CUSTOM) {
		
		}
	}
}

operation UI!ui::Table createViewAction(relationType : UI!ui::data::RelationType, application : UI!ui::Application, preview : Boolean) {
	if (preview) {
		var viewAction = new UI!ui::ViewAction();
		viewAction.target = application.pages.selectOne(p | p.pageType = UI!ui::PageType#DASHBOARD);
		viewAction.isTransient = relationType.memberType == UI!ui::data::MemberType#TRANSIENT;
		self.rowActions.add(viewAction);
	} else {
		var page = application.pages.selectOne(p | p.pageType = UI!ui::PageType#VIEW and p.getRelationType() == relationType);
		if (page.isDefined()) {
			log.debug(" ========= TABLE DEF: VIEW: " + relationType.name + " - " + page.name);
		    var viewAction = new UI!ui::ViewAction();
			viewAction.target = page;
			viewAction.isTransient = relationType.memberType == UI!ui::data::MemberType#TRANSIENT;
			self.rowActions.add(viewAction);
		} else {
			log.warn("No view page defined for: " + self.name + " - " + relationType.eContainer.name + "." + relationType.name);
		}
	}
}

operation UI!ui::Table createDeleteAction(relationType : UI!ui::data::RelationType) {
	var deleteAction = new UI!ui::DeleteAction();
    deleteAction.isTransient = relationType.memberType == UI!ui::data::MemberType#TRANSIENT;
    self.rowActions.add(deleteAction);
}

operation UI!ui::Table createUpdateAction(relationType : UI!ui::data::RelationType, application : UI!ui::Application, preview : Boolean) {
	if (preview) {
        var editAction = new UI!ui::EditAction();
        editAction.target = application.pages.selectOne(p | p.pageType = UI!ui::PageType#DASHBOARD);
        editAction.isTransient = relationType.memberType == UI!ui::data::MemberType#TRANSIENT;
        self.rowActions.add(editAction);
    } else {
        var page = application.pages.selectOne(p | p.pageType = UI!ui::PageType#UPDATE and p.getRelationType() == relationType);
        if (page.isDefined()) {
            log.debug(" ========= TABLE DEF: EDIT: " + relationType.name + " - " + page.name);
            var editAction = new UI!ui::EditAction();
            editAction.target = page;
            editAction.isTransient = relationType.memberType == UI!ui::data::MemberType#TRANSIENT;
            self.rowActions.add(editAction);
        } else {
            log.warn("No update page defined for: " + self.name  + " - " + relationType.eContainer.name + "." + relationType.name);
        }
    }
}

operation UI!ui::Table createRemoveAction() {
	self.rowActions.add(new UI!ui::RemoveAction());
}

operation UI!ui::Table createUnsetAction() {
	self.rowActions.add(new UI!ui::UnsetAction());
}

operation UI!ui::Table createSetAction(relationType : UI!ui::data::RelationType, buttonGroup : UI!ui::Flex) {
	var button : UI!ui::Button = createButton("set", "SET", 2d, new UI!ui::SetAction());
	button.action.dataElement = relationType;
	buttonGroup.children.add(button);
}

operation UI!ui::Table createAddAction(relationType : UI!ui::data::RelationType, buttonGroup : UI!ui::Flex) {
	var button : UI!ui::Button = createButton("add", "ADD", 2d, new UI!ui::AddAction());
	button.action.dataElement = relationType;
	buttonGroup.children.add(button);
}

operation UI!ui::Table createCreateAction(relationType : UI!ui::data::RelationType, application : UI!ui::Application, preview : Boolean, buttonGroup : UI!ui::Flex) {
	if (preview) {
		var button : UI!ui::Button = createButton("create", "CREATE", 2d, new UI!ui::CreateAction());
	    button.action.target = application.pages.selectOne(p | p.pageType = UI!ui::PageType#DASHBOARD);
	    button.action.dataElement = relationType;
	    buttonGroup.children.add(button);
	} else {
		var page = application.pages.selectOne(p | p.pageType = UI!ui::PageType#CREATE and p.getRelationType() == relationType);
		if (page.isDefined()) {
			log.debug(" ========= PAGE DEF: CREATE: " + relationType.eContainer.name + "." + relationType.name + " - " + page.name);
		    var button : UI!ui::Button = createButton("create", "CREATE", 2d, new UI!ui::CreateAction());
		    button.action.target = page;
		    button.action.dataElement = relationType;
		    buttonGroup.children.add(button);
		} else {
			log.warn("No update page defined for: " + self.name + " - " + relationType.eContainer.name + "." + relationType.name);
		}
	}
}

operation UI!ui::Table createActionButtonGroupForTable() : UI!ui::Flex {

	var tableContainer : UI!ui::Flex = self.eContainer();
	var tableIndex : Integer = tableContainer.children.indexOf(self);
	
	var buttonGroup : UI!ui::Flex = createHorizontalFlex("instanceActions", self.col, 1d);
	buttonGroup.mainAxisAlignment = UI!ui::MainAxisAlignment#START;
	buttonGroup.crossAxisAlignment = UI!ui::CrossAxisAlignment#CENTER;
	buttonGroup.stretch = UI!ui::Stretch#BOTH;

	if (tableContainer.children.size() == 2 and tableContainer.children.get(0).isKindOf(UI!ui::Label)) {
		tableContainer.children.add(1, buttonGroup);
	} else if (tableContainer.children.size() == 1 and tableContainer.children.get(0).isKindOf(UI!ui::Table)) {
		tableContainer.children.add(0, buttonGroup);
	} else {
		tableContainer.children.add(tableIndex, buttonGroup);
	}
	
	return buttonGroup;
}

operation UI!ui::Table isTablePage() : Boolean {
	
	var pageDef = self.getPageDefinition();
	
	if (pageDef.isDefined()) {
		var dataElement = self.getPageDefinition().dataElement;
		if (dataElement.isDefined() and dataElement.isKindOf(UI!ui::data::RelationType)) {
			return pageDef.pageType == UI!ui::PageType#TABLE or	(pageDef.pageType == UI!ui::PageType#DASHBOARD and dataElement.isCollection);
		}
		return pageDef.pageType == UI!ui::PageType#TABLE; 
	}
	
	return false;
}

operation UI!ui::Table wrapAndLabelTable() {
	var tableContainer : UI!ui::Container = self.eContainer();
	var tableIndex : Integer = tableContainer.children.indexOf(self);
	var wrapper = createVerticalFlex(self.name, self.col, self.row + 1d);
	
	if (tableContainer.direction == UI!ui::Axis#HORIZONTAL) {
		if (tableContainer.crossAxisAlignment == UI!ui::CrossAxisAlignment#START) {
			wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#START;
		} else if (tableContainer.crossAxisAlignment == UI!ui::CrossAxisAlignment#END) {
			wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#END;
		} else {
			wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#CENTER;
		}
		wrapper.crossAxisAlignment = UI!ui::CrossAxisAlignment#CENTER;
	} else {
		if (tableContainer.mainAxisAlignment == UI!ui::MainAxisAlignment#START) {
			wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#START;
		} else if (tableContainer.mainAxisAlignment == UI!ui::MainAxisAlignment#END) {
			wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#END;
		} else {
			wrapper.mainAxisAlignment = UI!ui::MainAxisAlignment#CENTER;
		}
		wrapper.crossAxisAlignment = UI!ui::CrossAxisAlignment#CENTER;
	}
	
	wrapper.stretch = self.stretch;
	self.stretch = UI!ui::Stretch#HORIZONTAL;
	
	if (not self.dataElement.isCollection or self.row < 2d) {
		self.row = 2d;
	}
	
	if (self.dataElement.isCollection) {
		self.stretch = UI!ui::Stretch#BOTH;
	}

	wrapper.children.add(self);
	tableContainer.children.add(tableIndex, wrapper);
	
	if (not self.isTablePage() and (self.label.isDefined() or self.icon.isDefined())) {
		var tableIndex : Integer = wrapper.children.indexOf(self);
		var label : UI!ui::Label = new UI!ui::Label();
		label.row = 1d;
		label.col = self.col;
		label.stretch = self.stretch;
		label.name = self.name.anchor("Label");

		if (self.label.isDefined()) {
			label.label = self.label;
		}
		
		if (self.icon.isDefined() and self.icon.trim().length() > 0) {
			var icon : UI!ui::Icon = new UI!ui::Icon();
			icon.name = self.icon;
			label.icon = icon;
		}
		
		wrapper.children.add(tableIndex, label);
	}
}
