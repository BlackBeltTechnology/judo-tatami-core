import "callOperationAction.eol";

operation UI!ui::Application resolveActionPageDefinitions() {
	for (callAction : UI!ui::CallOperationAction in UI!ui::CallOperationAction.all().select(a | a.~application == self )) {
		callAction.resolveParameterPageDefinitions();
	}
}

operation UI!ui::Application calculatePageActions(preview : Boolean) {

	for (pageDefinition : UI!ui::PageDefinition in self.pages) {
		pageDefinition.calculateActions(self, preview);
	}

	for (table : UI!ui::Table in UI!ui::Table.all().select(t | t.getPageDefinition().eContainer() == self)) {
		table.wrapAndLabelTable();
		table.calculateActions(self, preview);
	}
}

operation UI!ui::Application clonePagesOfInheritedRelations() {

	var classTypes = self.dataElements.select(d | d.isKindOf(UI!ui::data::ClassType));
	
	for (classType : UI!ui::data::ClassType in classTypes) {
		for (relation : UI!ui::data::RelationType in classType.relations) {
			if (relation.~originalRelation.isDefined() and relation.~originalRelation.eContainer() <> classType.~originalClass) {
	
				var viewPage = self.pages.selectOne(p | p.~originalRelation == relation.~originalRelation and p.pageType == UI!ui::PageType#VIEW);
				if (viewPage.isDefined()) {
					self.pages.add(viewPage.clonePage(classType, relation, "View"));
				}
				var createPage = self.pages.selectOne(p | p.~originalRelation == relation.~originalRelation and p.pageType == UI!ui::PageType#CREATE);
				if (createPage.isDefined()) {
					self.pages.add(createPage.clonePage(classType, relation, "Create"));
				}
				var updatePage = self.pages.selectOne(p | p.~originalRelation == relation.~originalRelation and p.pageType == UI!ui::PageType#UPDATE);
				if (updatePage.isDefined()) {
					self.pages.add(updatePage.clonePage(classType, relation, "Edit"));
				}
				var tablePage = self.pages.selectOne(p | p.~originalRelation == relation.~originalRelation and p.pageType == UI!ui::PageType#TABLE);
				if (tablePage.isDefined()) {
					self.pages.add(tablePage.clonePage(classType, relation, "Table"));
				}
			}
		}
	}
}

operation UI!ui::Application collectUnreferencedClassTypes() : Set {
	var referenceTargets = self.dataElements.select(d | d.isKindOf(UI!ui::data::ClassType)).collect(c | c.relations).flatten().collect(r | r.target).asSet();
	var inputTargets = self.dataElements.select(d | d.isKindOf(UI!ui::data::ClassType)).collect(c | c.operations).flatten()
							.select(o | o.input.isDefined()).collect(r | r.input.target).asSet();
	var outputTargets = self.dataElements.select(d | d.isKindOf(UI!ui::data::ClassType)).collect(c | c.operations).flatten()
							.select(o | o.output.isDefined()).collect(r | r.output.target).asSet();
	var actorsAndPrincipals = self.dataElements.select(d | d.isKindOf(UI!ui::data::ClassType) and (d.isPrincipal or d.isActor)).asSet();
							
	var allReferenced = new Set();
	allReferenced.addAll(referenceTargets);
	allReferenced.addAll(inputTargets);
	allReferenced.addAll(outputTargets);
	allReferenced.addAll(actorsAndPrincipals);
	
	var allClassTypes = self.dataElements.select(d | d.isKindOf(UI!ui::data::ClassType)).asSet();
	
	return allClassTypes.excludingAll(allReferenced);
}

operation UI!ui::Application removeUnexposedElements() {
	var unexposedClassTypes = self.collectUnreferencedClassTypes();
	var unexposedRelations = unexposedClassTypes.collect(c | c.relations).flatten().asSet();
	var unexposedInputs = unexposedClassTypes.collect(c | c.operations).flatten().select(o | o.input.isDefined()).collect(r | r.input).asSet();
	var unexposedOutputs = unexposedClassTypes.collect(c | c.operations).flatten().select(o | o.output.isDefined()).collect(r | r.output).asSet();
	
	var pagesToRemove = self.pages.select(p | unexposedRelations.contains(p.dataElement)
											or unexposedInputs.contains(p.dataElement)
											or unexposedOutputs.contains(p.dataElement)).asSet();
	self.pages.removeAll(pagesToRemove);
	var iterator = pagesToRemove.iterator();
	while (iterator.hasNext()) {
		var p = iterator.next();
		iterator.remove();
		delete p;
	}
	iterator = unexposedClassTypes.iterator();
	while (iterator.hasNext()) {
		var c = iterator.next();
		iterator.remove();
		delete c;
	}
	
}
