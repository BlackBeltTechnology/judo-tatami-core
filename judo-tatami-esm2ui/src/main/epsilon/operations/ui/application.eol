import "callOperationAction.eol";
import "data/classType.eol";

operation UI!ui::Application resolveActionPageDefinitions() {
    for (callAction : UI!ui::CallOperationAction in UI!ui::CallOperationAction.all().select(a | a.~application == self )) {
        callAction.resolveParameterPageDefinitions();
    }
}

operation UI!ui::Application calculatePageActions(preview : Boolean) {

    for (table : UI!ui::Table in UI!ui::Table.all().select(t | t.getPageDefinition().eContainer() == self)) {
        table.calculateActions(self, preview);
    }
    for (link : UI!ui::Link in UI!ui::Link.all().select(t | t.getPageDefinition().eContainer() == self)) {
        link.calculateActions(self, preview);
    }
    for (pageDefinition : UI!ui::PageDefinition in self.pages) {
        pageDefinition.calculateActions(self, preview);
    }
}

operation UI!ui::Application clonePagesOfInheritedRelations() {

    var classTypes = self.dataElements.select(d | d.isKindOf(UI!ui::data::ClassType));
    
    for (classType : UI!ui::data::ClassType in classTypes) {
        for (relation : UI!ui::data::RelationType in classType.relations) {
            if (relation.~originalRelation.isDefined() and relation.~originalRelation.eContainer() <> classType.~originalClass) {
    
                var viewPage = self.pages.selectOne(p | p.~originalRelation == relation.~originalRelation and p.pageType == UI!ui::PageType#VIEW);
                if (viewPage.isDefined()) {
                    self.pages.add(viewPage.clonePage(classType, relation, "View"));
                }
                var createPage = self.pages.selectOne(p | p.~originalRelation == relation.~originalRelation and p.pageType == UI!ui::PageType#CREATE);
                if (createPage.isDefined()) {
                    self.pages.add(createPage.clonePage(classType, relation, "Create"));
                }
                var updatePage = self.pages.selectOne(p | p.~originalRelation == relation.~originalRelation and p.pageType == UI!ui::PageType#UPDATE);
                if (updatePage.isDefined()) {
                    self.pages.add(updatePage.clonePage(classType, relation, "Edit"));
                }
                var tablePage = self.pages.selectOne(p | p.~originalRelation == relation.~originalRelation and p.pageType == UI!ui::PageType#TABLE);
                if (tablePage.isDefined()) {
                    self.pages.add(tablePage.clonePage(classType, relation, "Table"));
                }
            }
        }
    }
}

@cached
operation UI!ui::Application getExposedTransferObjects() : Set {
    var actor = self.dataElements.selectOne(d | d.isKindOf(UI!ui::data::ClassType) and d.isActor);
    var principal = self.dataElements.selectOne(d | d.isKindOf(UI!ui::data::ClassType) and d.isPrincipal);
    
    var collected = new Set();
    
    if (actor.isDefined()) {
        collected.add(actor);
        actor.collectExposedTransferObjects(collected);
    }
    if (principal.isDefined()) {
        collected.add(principal);
        principal.collectExposedTransferObjects(collected);
    }
    return collected;
}

operation UI!ui::Application removeUnexposedElements() {
    
    var allReferenced = self.getExposedTransferObjects();
    var allClassTypes = self.dataElements.select(d | d.isKindOf(UI!ui::data::ClassType)).asSet();
    var unexposedClassTypes = allClassTypes.excludingAll(allReferenced);

    var unexposedRelations = unexposedClassTypes.collect(c | c.relations).flatten().asSet();
    var unexposedInputs = unexposedClassTypes.collect(c | c.operations).flatten().select(o | o.input.isDefined()).collect(r | r.input).asSet();
    var unexposedOutputs = unexposedClassTypes.collect(c | c.operations).flatten().select(o | o.output.isDefined()).collect(r | r.output).asSet();
    
    var pagesToRemove = self.pages.select(p | unexposedRelations.contains(p.dataElement)
                                            or unexposedInputs.contains(p.dataElement)
                                            or unexposedOutputs.contains(p.dataElement)).asSet();
    self.pages.removeAll(pagesToRemove);
    var iterator = pagesToRemove.iterator();
    while (iterator.hasNext()) {
        var p = iterator.next();
        iterator.remove();
        delete p;
    }
    iterator = unexposedClassTypes.iterator();
    while (iterator.hasNext()) {
        var c = iterator.next();
        iterator.remove();
        delete c;
    }
}

operation UI!ui::Application setIsForCreateOrUpdateTypeFlag() {
    var classes = self.dataElements.select(e | e.isKindOf(UI!ui::data::ClassType) and e.isForCreateOrUpdateType);
    for (c in classes) {
        c.setIsForCreateOrUpdateTypeFlag();
    }   
}

operation UI!ui::Application setIsOptionalFlag() {
    var classes = self.dataElements.select(e | e.isKindOf(UI!ui::data::ClassType) and e.isOptional);
    for (c in classes) {
        c.setIsOptionalFlag();
    }
}

