import "callOperationAction.eol";
import "data/classType.eol";
import "data/relationBehaviour.eol";

// Iterate over all CallOperationAction to fix in/out parameters
// It is done here to avoid endless loop.
operation UI!ui::Application calculateAccessPointRelationsForRelations() {
	for (cl : UI!ui::data::ClassType in UI!ui::data::ClassType.all().select(c | not c.isRoot() and c.~application == self)) {
		cl.calculateAccessPointRelationsForRelation();
	}
}


operation UI!ui::Application resolveActionPageDefinitions() {
	for (callAction : UI!ui::CallOperationAction in UI!ui::CallOperationAction.all().select(a | a.~application = self )) {
		callAction.resolveParameterPageDefinitions();
	}
}

operation UI!ui::Application calculateRelationBehaviour() {
	// Iterate over all relation and mathing with all relations of the current
	// relations target. Its important to be able to determinate the current 
	// behaviours.
	for (r : UI!ui::data::RelationType in self.relationTypes) {
		r.behaviour = new UI!ui::data::RelationBehaviour();
		r.behaviour.targetRelationType = r;
	}
	
	for (relationType1 : UI!ui::data::RelationType in self.relationTypes
			.select(r | r.~original.memberType <> ESM!esm::structure::MemberType#TRANSIENT
	)) {

		// Self
	    // GET		
		relationType1.mapRelationBehaviour(UI!ui::data::RelationBehaviourType#GET);

		// CREATE			
		if (relationType1.~original.isCreateAllowed()) {
			relationType1.mapRelationBehaviour(UI!ui::data::RelationBehaviourType#CREATE);
		}

		// UPDATE			
		if (relationType1.~original.isUpdateAllowed()) {
			relationType1.mapRelationBehaviour(UI!ui::data::RelationBehaviourType#UPDATE);
		}
		
		// DELETE			
		if (relationType1.~original.isDeleteAllowed()) {
			relationType1.mapRelationBehaviour(UI!ui::data::RelationBehaviourType#DELETE);
		}
	
		// Source and Target
		for (relationType2 : UI!ui::data::RelationType in UI!ui::data::RelationType.all()
				.select(r | r.~application == self
     				and r.~original.memberType <> ESM!esm::structure::MemberType#TRANSIENT
					and r.eContainer == relationType1.target
		)) {
		    // GET
			relationType2.mapSourceRelationBehaviour(UI!ui::data::RelationBehaviourType#GET, relationType1);
			relationType1.mapTargetRelationBehaviour(UI!ui::data::RelationBehaviourType#GET, relationType2);
	
			// CREATE
			if (relationType1.~original.isCreateAllowed()) {
				relationType2.mapSourceRelationBehaviour(UI!ui::data::RelationBehaviourType#CREATE, relationType1);
				relationType1.mapTargetRelationBehaviour(UI!ui::data::RelationBehaviourType#CREATE, relationType2);
			}
			// UPDATE
			if (relationType1.~original.isUpdateAllowed()) {
				relationType2.mapSourceRelationBehaviour(UI!ui::data::RelationBehaviourType#UPDATE, relationType1);
				relationType1.mapTargetRelationBehaviour(UI!ui::data::RelationBehaviourType#UPDATE, relationType2);
			}

			// DELETE
			if (relationType1.~original.isDeleteAllowed()) {
				relationType2.mapSourceRelationBehaviour(UI!ui::data::RelationBehaviourType#DELETE, relationType1);
				relationType1.mapTargetRelationBehaviour(UI!ui::data::RelationBehaviourType#DELETE, relationType2);
			}


			if (not relationType2.~original.isReadOnly() and
					relationType1.~original.isUpdateAllowed()
			) {

				// RANGE GET
	            if (
	            	esmUtils.isRangeAllowedOnRelation(relationType2.~original) 
	            	and relationType2.~original.rangeExpression.isDefined() 
	            	and relationType2.~original.rangeExpression.trim().length() > 0
				) {
						relationType2.mapSourceRelationBehaviour(UI!ui::data::RelationBehaviourType#RANGE, relationType1);
						relationType1.mapTargetRelationBehaviour(UI!ui::data::RelationBehaviourType#RANGE, relationType2);
			    }
	
				// SET 		
				if (esmUtils.isSetOnRelation(relationType2.~original) ) {
					relationType2.mapSourceRelationBehaviour(UI!ui::data::RelationBehaviourType#SET, relationType1);
					relationType1.mapTargetRelationBehaviour(UI!ui::data::RelationBehaviourType#SET, relationType2);
				}
	
				// UNSET		
				if (esmUtils.isUnsetOnRelation(relationType1.~original, relationType2.~original) ) {
					relationType2.mapSourceRelationBehaviour(UI!ui::data::RelationBehaviourType#UNSET, relationType1);
					relationType1.mapTargetRelationBehaviour(UI!ui::data::RelationBehaviourType#UNSET, relationType2);
				}
	
				// ADD		
				if (esmUtils.isAddOnRelation(relationType2.~original) ) {
					relationType2.mapSourceRelationBehaviour(UI!ui::data::RelationBehaviourType#ADD, relationType1);
					relationType1.mapTargetRelationBehaviour(UI!ui::data::RelationBehaviourType#ADD, relationType2);
				}
	
				// REMOVE		
				if (esmUtils.isRemoveOnRelation(relationType1.~original, relationType2.~original) ) {
					relationType2.mapSourceRelationBehaviour(UI!ui::data::RelationBehaviourType#REMOVE, relationType1);
					relationType1.mapTargetRelationBehaviour(UI!ui::data::RelationBehaviourType#REMOVE, relationType2);
				}	
			}
		}
	}
}


operation UI!ui::Application calculatePageActions() {

	for (pageDefinition : UI!ui::PageDefinition in self.pages) {
		pageDefinition.calculateActions(self);
	}
}
	
