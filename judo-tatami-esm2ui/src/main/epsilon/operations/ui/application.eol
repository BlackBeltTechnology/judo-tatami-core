import "callOperationAction.eol";

operation UI!ui::Application resolveActionPageDefinitions() {
	for (callAction : UI!ui::CallOperationAction in UI!ui::CallOperationAction.all().select(a | a.~application = self )) {
		callAction.resolveParameterPageDefinitions();
	}
}

operation UI!ui::Application calculatePageActions(preview : Boolean) {

	for (pageDefinition : UI!ui::PageDefinition in self.pages) {
		uiUtils.addInstanceActionsToPage(pageDefinition,self,preview);
	}

	for (table : UI!ui::Table in UI!ui::Table.all().select(t | t.getPageDefinition().eContainer() == self)) {
		uiUtils.wrapAndLabelTable(table);
		uiUtils.addActionsToTable(table,self,preview);
	}
}

operation UI!ui::Application clonePagesOfInheritedRelations() {

	var classTypes = self.dataElements.select(d | d.isKindOf(UI!ui::data::ClassType));
	
	for (classType : UI!ui::data::ClassType in classTypes) {
		for (relation : UI!ui::data::RelationType in classType.relations) {
			if (relation.~originalRelation.isDefined() and relation.~originalRelation.eContainer() <> classType.~originalClass) {
	
				var viewPage = self.pages.selectOne(p | p.~originalRelation == relation.~originalRelation and p.pageType == UI!ui::PageType#VIEW);
				if (viewPage.isDefined()) {
					self.pages.add(viewPage.clonePage(classType, relation, "View"));
				}
				var createPage = self.pages.selectOne(p | p.~originalRelation == relation.~originalRelation and p.pageType == UI!ui::PageType#CREATE);
				if (createPage.isDefined()) {
					self.pages.add(createPage.clonePage(classType, relation, "Create"));
				}
				var updatePage = self.pages.selectOne(p | p.~originalRelation == relation.~originalRelation and p.pageType == UI!ui::PageType#UPDATE);
				if (updatePage.isDefined()) {
					self.pages.add(updatePage.clonePage(classType, relation, "Edit"));
				}
				var tablePage = self.pages.selectOne(p | p.~originalRelation == relation.~originalRelation and p.pageType == UI!ui::PageType#TABLE);
				if (tablePage.isDefined()) {
					self.pages.add(tablePage.clonePage(classType, relation, "Table"));
				}
			}
		}
	}
}
