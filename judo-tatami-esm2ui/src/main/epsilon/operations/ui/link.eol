operation UI!ui::Link calculateActions(application : UI!ui::Application, preview : Boolean) {
    var relationType = self.getRelationType();
    var pageDefinition = self.getPageDefinition();
    var pageType = pageDefinition.pageType;

    if (relationType.isDefined()) {
    
        // **** VIEW: view, create, update, delete (add, set, remove - optional) ****
        if (pageType == UI!ui::PageType#VIEW or
            (pageType == UI!ui::PageType#DASHBOARD and not relationType.isCollection)) {
            
            self.createViewCreateUpdateDeleteActions(relationType, application, preview);
            
            if (allRowActions) {
                self.createSetUnsetActions(relationType);
            }
        }
        
        if (pageType == UI!ui::PageType#CREATE) {
            if (not self.disabled) {
                self.createSetAction(relationType);
                self.createUnsetAction();
            }
        }
        
        if (pageType == UI!ui::PageType#UPDATE) {
            if (not self.disabled) {
                self.createSetUnsetActions(relationType);
            }
        }
        
        if (pageType == UI!ui::PageType#OPERATION_INPUT) {
            if (not self.disabled and relationType.memberType <> UI!ui::data::MemberType#TRANSIENT) {
                self.createSetAction(relationType);
                self.createUnsetAction();
            }
            //TODO: review behaviour of transient relations on input pages
            /*if (relationType.memberType == UI!ui::data::MemberType#TRANSIENT) {
                self.createCreateAction(relationType, application, preview);
                self.createViewActionForTransientInput(relationType, application);
                self.createDeleteAction(relationType);
            }*/
        }
        
        if (pageType == UI!ui::PageType#OPERATION_OUTPUT) {
            self.createViewAction(relationType, application, preview);
        }

        if (pageType == UI!ui::PageType#TABLE or (pageType == UI!ui::PageType#DASHBOARD and relationType.isCollection)) {
            //TABLE pages don't contain Link elements
        }
    
        if (pageType == UI!ui::PageType#CUSTOM) {
        
        }
    }
}

//creating view, create, update, delete actions 
operation UI!ui::Link createViewCreateUpdateDeleteActions(relationType : UI!ui::data::RelationType, application : UI!ui::Application, preview : Boolean) {

    self.createViewAction(relationType, application, preview);
    if (relationType.getIsRelationBehaviourTypeCreatable()) {
        self.createCreateAction(relationType, application, preview);
    }
    if (relationType.getIsRelationBehaviourTypeUpdatable()) {
        self.createUpdateAction(relationType, application, preview);
    }
    if (relationType.getIsRelationBehaviourTypeDeletable()) {
        self.createDeleteAction(relationType);
    }
}

//create view action
operation UI!ui::Link createViewAction(relationType : UI!ui::data::RelationType, application : UI!ui::Application, preview : Boolean) {
    if (preview) {
        var action = createViewAction(application.pages.selectOne(p | p.pageType = UI!ui::PageType#DASHBOARD),
                relationType, relationType.memberType == UI!ui::data::MemberType#TRANSIENT);
        self.actions.add(action);
    } else {
        var page = application.pages.selectOne(p | p.pageType = UI!ui::PageType#VIEW and p.getRelationType() == relationType);
        if (page.isDefined()) {
            log.debug(" ========= Found view page for LINK " + relationType.name + " - " + page.name);
            var action = createViewAction(page, relationType, relationType.memberType == UI!ui::data::MemberType#TRANSIENT);
            self.actions.add(action);
        } else {
            log.warn("No view page defined for: " + self.name + " - " + relationType.eContainer.name + "." + relationType.name);
        }
    }
}

operation UI!ui::Link createViewActionForTransientInput(relationType : UI!ui::data::RelationType, application : UI!ui::Application) {
    var page = application.pages.selectOne(p | p.pageType = UI!ui::PageType#UPDATE and p.getRelationType() == relationType);
    if (page.isDefined()) {
        log.debug(" ========= Found edit page for transient LINK " + relationType.name + " - " + page.name);
        var action = createViewAction(page, relationType, relationType.memberType == UI!ui::data::MemberType#TRANSIENT);
        self.actions.add(action);
    } else {
        log.warn("No edit page defined for transient input: " + self.name + " - " + relationType.eContainer.name + "." + relationType.name);
    }
}

//create create action
operation UI!ui::Link createCreateAction(relationType : UI!ui::data::RelationType, application : UI!ui::Application, preview : Boolean) {
    if (preview) {
        var action = createCreateAction(application.pages.selectOne(p | p.pageType = UI!ui::PageType#DASHBOARD),
                relationType, relationType.memberType == UI!ui::data::MemberType#TRANSIENT);
        self.actions.add(action);
    } else {
        var page = application.pages.selectOne(p | p.pageType = UI!ui::PageType#CREATE and p.getRelationType() == relationType);
        if (page.isDefined()) {
            log.debug(" ========= Found create page for LINK" + relationType.eContainer.name + "." + relationType.name + " - " + page.name);
            var action = createCreateAction(page, relationType, relationType.memberType == UI!ui::data::MemberType#TRANSIENT);
            self.actions.add(action);
        } else {
            log.warn("No create page defined for: " + self.name + " - " + relationType.eContainer.name + "." + relationType.name);
        }
    }
}

//create delete action
operation UI!ui::Link createDeleteAction(relationType : UI!ui::data::RelationType) {
    var deleteAction = new UI!ui::DeleteAction();
    deleteAction.isTransient = relationType.memberType == UI!ui::data::MemberType#TRANSIENT;
    self.actions.add(deleteAction);
}

//create update action
operation UI!ui::Link createUpdateAction(relationType : UI!ui::data::RelationType, application : UI!ui::Application, preview : Boolean) {
    if (preview) {
        var action = createEditAction(application.pages.selectOne(p | p.pageType = UI!ui::PageType#DASHBOARD),
                relationType, relationType.memberType == UI!ui::data::MemberType#TRANSIENT);
        self.actions.add(action);
    } else {
        var page = application.pages.selectOne(p | p.pageType = UI!ui::PageType#UPDATE and p.getRelationType() == relationType);
        if (page.isDefined()) {
            log.debug(" ========= Found update page for LINK: " + relationType.name + " - " + page.name);
            var action = createEditAction(page, relationType, relationType.memberType == UI!ui::data::MemberType#TRANSIENT);
            self.actions.add(action);
        } else {
            log.warn("No update page defined for: " + self.name  + " - " + relationType.eContainer.name + "." + relationType.name);
        }
    }
}

//create set and unset actions (add and remove is not applicable to single relations)
operation UI!ui::Link createSetUnsetActions(relationType : UI!ui::data::RelationType) {

    if (relationType.getIsRelationBehaviourTypeUnsetable()) {
        self.createUnsetAction();
    }
    if (relationType.getIsRelationBehaviourTypeSetable()) {
        self.createSetAction(relationType);
    }
}

//create unset action
operation UI!ui::Link createUnsetAction() {
    self.actions.add(new UI!ui::UnsetAction());
}

//create set action
operation UI!ui::Link createSetAction(relationType : UI!ui::data::RelationType) {
    var action = new UI!ui::SetAction();
    action.dataElement = relationType;
    self.actions.add(action);
}
