import "../type/_importType.eol";

operation ESM!esm::structure::DataFeature createAttributeTypeForClass(application : UI!ui::Application, clazz : UI!ui::data::ClassType) : UI!ui::data::AttributeType {
    var attribute = new UI!ui::data::AttributeType();    
    attribute.name = self.name;

    if (self.memberType == ESM!esm::structure::MemberType#STORED) {
        attribute.memberType = UI!ui::data::MemberType#STORED;
    } else if (self.memberType == ESM!esm::structure::MemberType#DERIVED) {
        attribute.memberType = UI!ui::data::MemberType#DERIVED;
    } else if (self.memberType == ESM!esm::structure::MemberType#MAPPED) {
        attribute.memberType = UI!ui::data::MemberType#MAPPED;
    } else if (self.memberType == ESM!esm::structure::MemberType#TRANSIENT) {
        attribute.memberType = UI!ui::data::MemberType#TRANSIENT;
    } else {
        attribute.memberType = UI!ui::data::MemberType#STORED;
    }
    attribute.isReadOnly = self.isReadOnly();
    attribute.isRequired = self.required;
                    
    attribute.isFilterable = self.eContainer.mapping.isDefined() and
                    self.memberType <> ESM!MemberType#TRANSIENT and
                    (self.memberType == ESM!MemberType#MAPPED implies self.binding?.memberType <> ESM!MemberType#TRANSIENT) and
                    (self.memberType == ESM!MemberType#DERIVED implies self.eContainer.mapping.isDefined()) and
                    (self.dataType.isKindOf(ESM!StringType) or
                        self.dataType.isKindOf(ESM!NumericType) or
                        self.dataType.isKindOf(ESM!BooleanType) or
                        self.dataType.isKindOf(ESM!DateType) or
                        self.dataType.isKindOf(ESM!EnumerationType) or
                        self.dataType.isKindOf(ESM!TimestampType));

    attribute.dataType = self.dataType.mapDataType(application);

    clazz.attributes.add(attribute);
    log.debug("Create attribute " + attribute.name + " in class type: " + clazz.name);
    return attribute;
}

operation ESM!esm::structure::DataFeature mapAttributeType(application : UI!ui::Application, clazz : UI!ui::data::ClassType) : UI!ui::data::AttributeType {
    var attribute = clazz.attributes.selectOne(r | r.name = self.name);
    if (attribute.isUndefined()) {
        attribute = self.createAttributeTypeForClass(application, clazz);
    }
    return attribute;
}
