operation ESM!esm::structure::Class fqName() : String {
	return esmUtils.getNamespaceElementFQName(self);
}

operation ESM!esm::structure::Class createClassType(application : UI!ui::Application) : UI!ui::data::ClassType {
	var clazz = new UI!ui::data::ClassType();	

    clazz.~srcClass = self;
    clazz.~application = application;
    
	clazz.name = self.fqName();
	clazz.isMapped = self.isMapped();
					
	application.dataElements.add(clazz);
	
    if (self.isAccesspoint()) {
    	clazz.accessPoint = clazz;
    	application.~apClass = clazz;
    } else {
    	clazz.accessPoint = application.~apClass;
    }


	for (attribute in self.getAllAttributes()) {
		attribute.mapAttributeType(application, clazz);
	}
	
	for (relation in self.getAllRelations()) {
		relation.createRelationTypeForClass(application, clazz);
	}
	for (attribute in self.getAllAttributes()) {
		attribute.createAttributeTypeForClass(application, clazz);
	}
	
	for (op in esmUtils.getAllOperations(self)) {
		if (op.operationType <> ESM!OperationType#ABSTRACT) {
			op.createOperationTypeForClass(application, clazz);
		}
	}

	log.debug("Create class type: " + clazz.name);
	return clazz;
}

operation ESM!esm::structure::Class mapClassType(application : UI!ui::Application) : UI!ui::data::ClassType {
	var clazz = application.dataElements.selectOne(r | r.name = self.fqName());
	if (clazz.isUndefined()) {
		clazz = self.createClassType(application);
	}
	return clazz;
}
