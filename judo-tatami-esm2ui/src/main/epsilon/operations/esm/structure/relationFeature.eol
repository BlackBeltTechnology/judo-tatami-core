@cached
operation ESM!esm::structure::RelationFeature fqName() {
	return esmUtils.getNamespaceElementFQName(self.eContainer) + "." + self.name;
}

operation ESM!esm::structure::RelationFeature createPageForRelationForView(application : UI!ui::Application, target : ESM!esm::structure::TransferObjectType) : UI!ui::PageDefinition {
	var page : UI!ui::PageDefinition = new UI!ui::PageDefinition();
	page.dataElement = self.mapRelationType(application, self.eContainer.mapClassType(application));
	page.name = self.fqName().anchor("RelationPageView", target.fqName());
	page.children.add(target.view.map(application));    
    return page;
}

operation ESM!esm::structure::RelationFeature createPageForRelationForForm(application : UI!ui::Application, target : ESM!esm::structure::TransferObjectType) : UI!ui::PageDefinition {
	var page : UI!ui::PageDefinition = new UI!ui::PageDefinition();
	page.dataElement = self.mapRelationType(application, self.eContainer.mapClassType(application));
	page.name = self.fqName().anchor("RelationPageForm", target.fqName());
    page.children.add(target.form.map(application));
    
    return page;
}

operation ESM!esm::structure::RelationFeature createPageForRelationForTable(application : UI!ui::Application, target : ESM!esm::structure::TransferObjectType) : UI!ui::PageDefinition {
	var page : UI!ui::PageDefinition = new UI!ui::PageDefinition();
	page.dataElement = self.mapRelationType(application, self.eContainer.mapClassType(application));
	page.name = self.fqName().anchor("RelationPageTable", target.fqName());
    
	var table = target.table.createTableFromTransferObjectTable();
    page.children.add(table);
    
    if (target.table.masterDetail and target.view.isDefined()) {
		var detail : UI!ui::PageDefinition = new UI!ui::PageDefinition();
		detail.dataElement = self.mapRelationType(application, self.eContainer.mapClassType(application));
		application.pages.add(detail);
	  	detail.children.add(target.view.map(application));
	  	table.detail = detail;
    }
    
    return page;
}

operation ESM!esm::structure::RelationFeature createRelationTypeForClass(application : UI!ui::Application, clazz : UI!ui::data::ClassType) : UI!ui::data::RelationType {
	var relation = new UI!ui::data::RelationType();	
	relation.name = self.name;
	relation.isCollection = (self.upper == -1);
	clazz.relations.add(relation);
	relation.target = self.target.mapClassType(application);
	log.debug("Create relation " + relation.name + " in class type: " + clazz.name);
	return relation;
}

operation ESM!esm::structure::RelationFeature mapRelationType(application : UI!ui::Application, clazz : UI!ui::data::ClassType) : UI!ui::data::RelationType {
	var relation = clazz.relations.selectOne(r | r.name = self.name);
	if (relation.isUndefined()) {
		relation = self.createRelationTypeForClass(application, clazz);
	}
	return relation;
}
