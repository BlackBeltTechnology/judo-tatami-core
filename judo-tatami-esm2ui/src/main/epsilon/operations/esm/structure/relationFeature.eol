@cached
operation ESM!esm::structure::RelationFeature fqName() {
	return esmUtils.getNamespaceElementFQName(self.eContainer) + "." + self.name;
}

operation ESM!esm::structure::RelationFeature createPageForRelationForView(application : UI!ui::Application, target : ESM!esm::structure::TransferObjectType) : UI!ui::PageDefinition {
	log.debug("Create page for relation for view: " + target.name + " (relation: " + self.name + ")");
	
	var page : UI!ui::PageDefinition = new UI!ui::PageDefinition();
	page.dataElement = self.mapRelationType(application, self.eContainer.mapClassType(application));
	page.name = self.fqName().anchor("RelationPageView", target.fqName());
	page.col = applicationColumns;
	page.children.add(target.view.map(application));
	
	uiUtils.organizeElements(page);
	
    return page;
}

operation ESM!esm::structure::RelationFeature createPageForRelationForForm(application : UI!ui::Application, target : ESM!esm::structure::TransferObjectType) : UI!ui::PageDefinition {
	log.debug("Create page for relation for form: " + target.name + " (relation: " + self.name + ")");
	
	var page : UI!ui::PageDefinition = new UI!ui::PageDefinition();
	page.dataElement = self.mapRelationType(application, self.eContainer.mapClassType(application));
	page.name = self.fqName().anchor("RelationPageForm", target.fqName());
	page.col = applicationColumns;
    page.children.add(target.form.map(application));
    
	uiUtils.organizeElements(page);
    
    return page;
}

operation ESM!esm::structure::RelationFeature createPageForRelationForTable(application : UI!ui::Application, target : ESM!esm::structure::TransferObjectType) : UI!ui::PageDefinition {
	log.debug("Create page for relation for table: " + target.name + " (relation: " + self.name + ")");
	
	var page : UI!ui::PageDefinition = new UI!ui::PageDefinition();
	page.dataElement = self.mapRelationType(application, self.eContainer.mapClassType(application));
	page.name = self.fqName().anchor("RelationPageTable", target.fqName());
	page.col = applicationColumns;
    
    var flex = new UI!ui::Flex();
	flex.name = self.name;
	flex.direction = UI!Axis#VERTICAL;
	flex.col = applicationColumns;
	page.children.add(flex);
    
	var table = target.table.createTableFromTransferObjectTable(application);
    flex.children.add(table);
    
    if (target.table.masterDetail and target.view.isDefined()) {
		var detail : UI!ui::PageDefinition = new UI!ui::PageDefinition();
		detail.name = self.fqName().anchor("RelationPageTableMasterDetail", target.fqName());
		detail.dataElement = self.mapRelationType(application, self.eContainer.mapClassType(application));
		detail.col = applicationColumns;
		application.pages.add(detail);
	  	detail.children.add(target.view.map(application));
	  	table.detail = detail;
    }
    
	uiUtils.organizeElements(page);
    
    return page;
}

operation ESM!esm::structure::RelationFeature createRelationTypeForClass(application : UI!ui::Application, clazz : UI!ui::data::ClassType) : UI!ui::data::RelationType {
	var relation = new UI!ui::data::RelationType();	
	relation.name = self.name;
	relation.isCollection = (self.upper == -1);
	relation.isCreateable = self.createable;
	relation.isUpdateable = self.updateable;
	relation.isDeleteable = self.deleteable;
	relation.isReadOnly = self.isReadOnly();
	
	if (self.memberType == ESM!esm::structure::MemberType#STORED) {
		relation.memberType = UI!ui::data::MemberType#STORED;
	} else if (self.memberType == ESM!esm::structure::MemberType#DERIVED) {
		relation.memberType = UI!ui::data::MemberType#DERIVED;
	} else if (self.memberType == ESM!esm::structure::MemberType#MAPPED) {
		relation.memberType = UI!ui::data::MemberType#MAPPED;
	} else if (self.memberType == ESM!esm::structure::MemberType#TRANSIENT) {
		relation.memberType = UI!ui::data::MemberType#TRANSIENT;
	} else {
		relation.memberType = UI!ui::data::MemberType#STORED;
	}

	if (self.relationKind == ESM!esm::structure::RelationKind#ASSOCIATION) {
		relation.relationKind = UI!ui::data::RelationKind#ASSOCIATION;
	} else if (self.relationKind == ESM!esm::structure::RelationKind#COMPOSITION) {
		relation.relationKind = UI!ui::data::RelationKind#COMPOSITION;
	} else if (self.relationKind == ESM!esm::structure::RelationKind#AGGREGATION) {
		relation.relationKind = UI!ui::data::RelationKind#AGGREGATION;
	} else {
		relation.relationKind = UI!ui::data::RelationKind#ASSOCIATION;
	}
		
	clazz.relations.add(relation);
	relation.target = self.target.mapClassType(application);
	log.debug("Create relation " + relation.name + " in class type: " + clazz.name);
	return relation;
}

operation ESM!esm::structure::RelationFeature mapRelationType(application : UI!ui::Application, clazz : UI!ui::data::ClassType) : UI!ui::data::RelationType {
	var relation = clazz.relations.selectOne(r | r.name = self.name);
	if (relation.isUndefined()) {
		relation = self.createRelationTypeForClass(application, clazz);
	}
	return relation;
}
