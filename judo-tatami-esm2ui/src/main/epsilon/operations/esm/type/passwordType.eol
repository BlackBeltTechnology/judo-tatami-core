operation ESM!esm::type::PasswordType input(dataField : ESM!esm::ui::DataField, application : UI!ui::Application): UI!ui::Input {
    return self.fillInput(new UI!ui::PasswordInput(), dataField.row.asReal(), dataField.col.asReal(), dataField.iconName);
}

operation ESM!esm::type::PasswordType formatted(): UI!ui::Formatted {
    return self.fillFormatted(new UI!ui::Formatted(), "%s", 1d, 2d);
}

@cached
operation ESM!esm::type::PasswordType fqName() {
    if (self.eContainer.isKindOf(ESM!esm::namespace::NamespaceElement)) {
        return esmUtils.getNamespaceElementFQName(self.eContainer) + "." + self.name;
    } else {
        return self.eContainer.name + "." + self.name;
    }
}

operation ESM!esm::type::PasswordType createPasswordType(application : UI!ui::Application) : UI!ui::data::PasswordType {
    var type = new UI!ui::data::PasswordType();
    type.name = self.fqName();
    application.dataTypes.add(type);
    return type;
}

operation ESM!esm::type::PasswordType mapDataType(application : UI!ui::Application) : UI!ui::data::PasswordType {
    var type = application.dataTypes.selectOne(t | t.name = self.fqName());
    if (type.isUndefined()) {
        type = self.createPasswordType(application);
    }
    return type;
}
