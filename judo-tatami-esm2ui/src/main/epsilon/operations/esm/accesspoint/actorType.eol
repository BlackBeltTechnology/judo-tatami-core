@cached
operation ESM!esm::accesspoint::ActorType fqName() {
    return esmUtils.getNamespaceElementFQName(self);
}

@cached
operation ESM!esm::accesspoint::ActorType getExposedRelations() : Set {
    return self.collectExposedRelations(new Set()).includingAll(self.accesses);
}

operation ESM!esm::accesspoint::ActorType collectExposedRelations(collected : Set) : Set {
    if (self.principal.isDefined()) {
        self.principal.collectExposedRelations(collected);
    }
    for (access in self.accesses) {
        access.target.collectExposedRelations(collected);
    }
    return collected;
}

@cached
operation ESM!esm::accesspoint::ActorType getExposedTransferObjects() : Set {
    return self.getExposedRelations().collect(r | r.target).asSet();
}

@cached
operation ESM!esm::accesspoint::ActorType getExposedOperations() : Set {
    var ret = new Set();
    for (cl in self.getExposedTransferObjects()) {
        ret.addAll(cl.operations);
    }
    return ret;
}


operation ESM!esm::accesspoint::ActorType createClassType(application : UI!ui::Application) : UI!ui::data::ClassType {
    var clazz = new UI!ui::data::ClassType();    

    clazz.~application = application;
    clazz.~originalActorType = self;
    
    clazz.name = self.fqName();
    clazz.simpleName = self.name;
    clazz.setPackageNameTokens(self);
                    
    application.dataElements.add(clazz);
    clazz.isActor = true;
    
    for (access in self.accesses) {
        access.createRelationTypeForClass(application, clazz);
    }

    if (self.principal.isDefined()) {
        self.principal.mapClassType(application);
    }
    
    log.debug("Create class type: " + clazz.name);
    return clazz;
}

operation ESM!esm::accesspoint::ActorType mapClassType(application : UI!ui::Application) : UI!ui::data::ClassType {
    var clazz = application.dataElements.selectOne(r | r.name = self.fqName());
    if (clazz.isUndefined()) {
        clazz = self.createClassType(application);
    }
    return clazz;
}

operation UI!ui::data::ClassType setPackageNameTokens(source : ESM!esm::accesspoint::ActorType) {
    var container = source.eContainer();
    while (container.isTypeOf(ESM!esm::namespace::Package)) {
        self.packageNameTokens.add(0, container.name);
        container = container.eContainer();
    } 
}