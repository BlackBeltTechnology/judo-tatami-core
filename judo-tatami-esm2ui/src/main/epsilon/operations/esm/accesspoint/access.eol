@cached
operation ESM!esm::accesspoint::Access fqName() {
	return esmUtils.getNamespaceElementFQName(self.eContainer) + "." + self.name;
}

operation ESM!esm::accesspoint::Access createRelationTypeForClass(application : UI!ui::Application, clazz : UI!ui::data::ClassType) : UI!ui::data::RelationType {
	var relation = new UI!ui::data::RelationType();	
    relation.~application = application;
    relation.~originalAccess = self;

	relation.name = self.name;
	relation.isCollection = (self.upper == -1);
	relation.isAccess = true;
	relation.memberType = UI!ui::data::MemberType#ACCESS;
	relation.relationKind = UI!ui::data::RelationKind#STATIC;
	relation.target = self.target.mapClassType(application);
	
	if (esmUtils.isListSupported(self)) {
		relation.behaviours.add(UI!ui::data::RelationBehaviourType#LIST);
	}
	if (esmUtils.isCreateSupported(self)) {
		relation.behaviours.add(UI!ui::data::RelationBehaviourType#CREATE);
		relation.target.isForCreateOrUpdateType = true;
	}
	if (esmUtils.isValidateCreateSupported(self)) {
		relation.behaviours.add(UI!ui::data::RelationBehaviourType#VALIDATE_CREATE);
		relation.target.isForCreateOrUpdateType = true;
	}
	
    relation.isOrderable =
        self.target.mapping.isDefined() and
                self.target.getAllAttributes().exists(a |
                    a.memberType <> ESM!MemberType#TRANSIENT and
                    (a.memberType == ESM!MemberType#MAPPED implies (a.binding.isDefined() and a.binding.memberType <> ESM!MemberType#TRANSIENT)) and
                    (a.memberType == ESM!MemberType#DERIVED implies a.eContainer.mapping.isDefined()) and
                    (a.dataType.isKindOf(ESM!StringType) or
                        a.dataType.isKindOf(ESM!NumericType) or
                        a.dataType.isKindOf(ESM!DateType) or
                        a.dataType.isKindOf(ESM!TimestampType)));

	relation.isFilterable = self.target.mapping.isDefined();

	clazz.relations.add(relation);
	relation.target = self.target.mapClassType(application);
	log.debug("Create relation " + relation.name + " in class type: " + clazz.name);
	return relation;
}

operation ESM!esm::accesspoint::Access mapRelationType(application : UI!ui::Application, clazz : UI!ui::data::ClassType) : UI!ui::data::RelationType {
	var relation = clazz.relations.selectOne(r | r.name = self.name);
	if (relation.isUndefined()) {
		relation = self.createRelationTypeForClass(application, clazz);
	}
	return relation;
}