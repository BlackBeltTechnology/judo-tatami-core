operation ESM!esm::ui::TabularReferenceField createTableFromTabularReferenceField(application : UI!ui::Application, page : UI!ui::PageDefinition) : UI!ui::VisualElement {

    var relation : ESM!esm::structure::ReferenceTypedElement = self.relationFeature.getMember();
    var table : UI!ui::VisualElement = null;
    
    var parameterPage : Boolean = page.pageType == UI!ui::PageType#OPERATION_INPUT or page.pageType == UI!ui::PageType#OPERATION_OUTPUT;
    var dataElement : UI!ui::data::RelationType = relation.mapRelationType(application, self.getTransferObjectType().mapClassType(application));
    
    if (self.targetDefinedTabular) {

        log.debug("Create table based on reference target: " + relation.target.table.name);
        if (relation.upper == 1) {
            table = relation.target.table.createLinkFromTransferObjectTable(application, dataElement, page);
        } else {
            table = relation.target.table.createTableFromTransferObjectTable(application, dataElement, page);
        }
        
    } else {

        log.debug("Create table based on tabular reference field: " + self.name);

        self.~originalRelation = relation;

        if (relation.upper == 1) {
            table = new UI!ui::Link();
            for (column in self.columns.select(c | (c.dataFeature.getMember().memberType == ESM!esm::structure::MemberType#TRANSIENT implies parameterPage))) {
                var part : UI!ui::Formatted = column.dataFeature.getMember().getDataType().formatted();
                part.name = column.name;
                part.label = column.getUiLabel();
                part.attributeType = column.dataFeature.getMember().mapAttributeType(application, relation.target.mapClassType(application));
                table.parts.add(part);
                if (part.attributeType.isFilterable) {
                    table.filters.add(part.createFilter(application));
                }
            }
        } else {
            table = new UI!ui::Table();
            for (column in self.columns.select(c | (c.dataFeature.getMember().memberType == ESM!esm::structure::MemberType#TRANSIENT implies parameterPage))) {
                var col : UI!ui::Formatted = column.dataFeature.getMember().getDataType().formatted();
                col.name = column.name;
                col.label = column.getUiLabel();
                col.attributeType = column.dataFeature.getMember().mapAttributeType(application, relation.target.mapClassType(application));
                table.columns.add(col);
                if (col.attributeType.isFilterable) {
                    table.filters.add(col.createFilter(application));
                }
            }
        }
        
        table.dataElement = dataElement;
    }
    
    table.setVisualProperties(self, application);
    
    if (relation.upper == 1) {
        table.row = 1.0d;
    } else {
        table.row = self.row.asReal();
    }
    
    table.icon = self.iconName;
    table.sourceId = self.getID();
    table.disabled = (page.pageType == UI!ui::PageType#CREATE or page.pageType == UI!ui::PageType#UPDATE or page.pageType == UI!ui::PageType#OPERATION_INPUT) and
                        not (table.dataElement.memberType == UI!ui::data::MemberType#STORED and table.dataElement.relationKind == UI!ui::data::RelationKind#AGGREGATION);
    
    return table;
}

operation ESM!esm::ui::TabularReferenceField createButtonFromTabularReferenceField(application : UI!ui::Application, page : UI!ui::PageDefinition) : UI!ui::Button {
    
    var relation : ESM!esm::structure::ReferenceTypedElement = self.relationFeature.getMember();
    log.debug("Create button for association: " + relation.name);
    
    var button : UI!ui::Button = new UI!ui::Button();
    button.disabled = (page.pageType == UI!ui::PageType#CREATE or page.pageType == UI!ui::PageType#UPDATE or page.pageType == UI!ui::PageType#OPERATION_INPUT);
    
    button.setVisualProperties(self, application);
    button.name = self.name.anchor("TabularReferenceButton");
    
    button.sourceId = self.getID();
    
    var dataElement = relation.mapRelationType(application, self.getTransferObjectType().mapClassType(application));
    
    button.action = new UI!ui::NavigationToPageAction();
    button.dataElement = dataElement;
    
    button.action.target = relation.mapTablePage(application, relation.target);
    log.debug("Create button action target: " + button.action.target.name);
    return button;
}

operation ESM!esm::ui::TabularReferenceField map(application : UI!ui::Application, page : UI!ui::PageDefinition) : UI!ui::VisualElement {
    var relation : ESM!esm::structure::ReferenceTypedElement = self.relationFeature.getMember();
    
    var parameterPage : Boolean = page.pageType == UI!ui::PageType#OPERATION_INPUT or page.pageType == UI!ui::PageType#OPERATION_OUTPUT;
    var toBeGenerated : Boolean = relation.memberType == ESM!esm::structure::MemberType#TRANSIENT implies parameterPage;
    
    if (self.isNavigation() and relation.target.isTableDefined()) {
    
        return self.createButtonFromTabularReferenceField(application, page);
    
    } else if (not self.isNavigation() and toBeGenerated and
               ((self.targetDefinedTabular and
                       relation.target.isTableDefined() and
                       relation.target.table.columns.exists(c | c.dataFeature.getMember().memberType == ESM!esm::structure::MemberType#TRANSIENT implies parameterPage)) or
               (not self.targetDefinedTabular and
                       self.columns.size() > 0 and
                       self.columns.exists(c | c.dataFeature.getMember().memberType == ESM!esm::structure::MemberType#TRANSIENT implies parameterPage)))) {
    
        return self.createTableFromTabularReferenceField(application, page);
    
    } else {
        var spacer : UI!ui::Spacer = new UI!ui::Spacer();
        spacer.setVisualProperties(self, application);
        spacer.name = self.name.anchor("PlaceHolderForReferenceField");
        spacer.sourceId = self.getID();
        return spacer;
    }
}
