operation ESM!esm::ui::TabularReferenceField createTableFromTabularReferenceField(application : UI!ui::Application) : UI!ui::VisualElement {

	var relation : ESM!esm::structure::ReferenceTypedElement = self.relationFeature.getMember();
	var table : UI!ui::VisualElement = null;

	if (self.targetDefinedTabular) {

		log.debug("Create table based on reference target: " + relation.target.table.name);

		if (relation.upper == 1) {
    		table = relation.target.table.createLinkFromTransferObjectTable(application);
    		table.row = 1.0d;
		} else {
    		table = relation.target.table.createTableFromTransferObjectTable(application);
    		table.row = self.row.asReal();
		}
		
	} else {

		log.debug("Create table based on tabular reference field: " + self.name);

        self.~originalRelation = relation;

        if (relation.upper == 1) {
            table = new UI!ui::Link();
            table.row = 1.0d;
            for (column in self.columns) {
                var part : UI!ui::Formatted = column.dataFeature.getMember().getDataType().formatted();
                part.name = column.name;
                part.label = column.getUiLabel();
                part.attributeType = column.dataFeature.getMember().mapAttributeType(application, relation.target.mapClassType(application));
                table.parts.add(part);
            }
        } else {
            table = new UI!ui::Table();
            table.row = self.row.asReal();
            for (column in self.columns) {
                var col : UI!ui::Formatted = column.dataFeature.getMember().getDataType().formatted();
                col.name = column.name;
                col.label = column.getUiLabel();
                col.attributeType = column.dataFeature.getMember().mapAttributeType(application, relation.target.mapClassType(application));
                table.columns.add(col);
            }
        }
	}
	
	table.name = self.name;
    table.label = self.getUiLabel();
    table.icon = self.iconName;
    table.sourceId = self.getID();
    table.col = self.col.asReal();
    table.dataElement = relation.mapRelationType(application, self.getTransferObjectType().mapClassType(application));
    
    if (self.stretch == ESM!esm::ui::Stretch#NONE) {
        table.stretch = UI!ui::Stretch#NONE;
    } else if (self.stretch == ESM!esm::ui::Stretch#HORIZONTAL) {
        table.stretch = UI!ui::Stretch#HORIZONTAL;
    } else if (self.stretch == ESM!esm::ui::Stretch#VERTICAL) {
        table.stretch = UI!ui::Stretch#VERTICAL;
    } else {
        table.stretch = UI!ui::Stretch#BOTH;
    }

    if (self.fit == ESM!esm::ui::Fit#LOOSE) {
        table.fit = UI!ui::Fit#LOOSE;
    } else if (self.fit == ESM!esm::ui::Fit#TIGHT) {
        table.fit = UI!ui::Fit#TIGHT;
    }
    
    return table;
}

operation ESM!esm::ui::TabularReferenceField createButtonFromTabularReferenceField(application : UI!ui::Application) : UI!ui::Button {

	var relation : ESM!esm::structure::ReferenceTypedElement = self.relationFeature.getMember();
	log.debug("Create button for association: " + relation.name);

	var button : UI!ui::Button = new UI!ui::Button();
	button.name = self.name.anchor("TabularReferenceButton");
    button.label = self.getUiLabel();
    button.col = self.col.asReal();
    button.sourceId = self.getID();

    if (self.stretch == ESM!esm::ui::Stretch#NONE) {
    	button.stretch = UI!ui::Stretch#NONE;
    } else if (self.stretch == ESM!esm::ui::Stretch#HORIZONTAL) {
        button.stretch = UI!ui::Stretch#HORIZONTAL;
    } else if (self.stretch == ESM!esm::ui::Stretch#VERTICAL) {
        button.stretch = UI!ui::Stretch#VERTICAL;
    } else {
        button.stretch = UI!ui::Stretch#BOTH;
    }

    if (self.fit == ESM!esm::ui::Fit#LOOSE) {
		button.fit = UI!ui::Fit#LOOSE;
	} else if (self.fit == ESM!esm::ui::Fit#TIGHT) {
		button.fit = UI!ui::Fit#TIGHT;
	}

	var dataElement = relation.mapRelationType(application, self.getTransferObjectType().mapClassType(application));

	button.action = new UI!ui::NavigationToPageAction();
	button.dataElement = dataElement;

	button.action.target = relation.mapTablePage(application, relation.target);
	log.debug("Create button action target: " + button.action.target.name);
	return button;
}

operation ESM!esm::ui::TabularReferenceField map(application : UI!ui::Application) : UI!ui::VisualElement {
	var relation : ESM!esm::structure::ReferenceTypedElement = self.relationFeature.getMember();

	if (self.isNavigation() and relation.target.isTableDefined()) {

		return self.createButtonFromTabularReferenceField(application);

	} else if (not self.isNavigation() and
	       ((self.targetDefinedTabular and relation.target.isTableDefined()) or
		   (not self.targetDefinedTabular and self.columns.size() > 0))) {

		return self.createTableFromTabularReferenceField(application);

	} else {
		log.debug("Create spacer for button");
		var spacer : UI!ui::Spacer = new UI!ui::Spacer();
		spacer.name = self.name.anchor("PlaceHolderForTargetDefinedTable");
		spacer.sourceId = self.getID();
		return spacer;
	}
}

