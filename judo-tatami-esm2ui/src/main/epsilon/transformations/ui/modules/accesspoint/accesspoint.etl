import "../namespace/namespace.etl";
import "../../../../operations/_importAll.eol";

rule CreateApplication
    transform s: ESM!esm::structure::TransferObjectType
    to t: UI!ui::Application
    extends CreateNamedElementFromNamespaceElement {
        guard: s.isAccesspoint()

        t.~original = s;

        log.debug("CreateApplication: " + s.name);

		var defaultLayout = new UI!ui::LayoutType();
        defaultLayout.cols = applicationColumns;
        defaultLayout.name = "default";
        defaultLayout.original = true;
        t.layoutTypes.add(defaultLayout);

        t.name = s.fqName().anchor(applicationType);
        t.navigationController = s.equivalent("CreateNavigationController");
        t.dataElement = s.mapClassType(t);
		
        var exposedRelations : Set = esmUtils.getAllExposedRelationsFromAccessPoint(s);
        
        for (relation in exposedRelations) {
            if (relation.target.mapping.isDefined() and relation.target.view.isDefined()) {
                t.pages.add(relation.createPageForRelationForView(t, relation.target));
            }

            if (relation.target.mapping.isDefined() and relation.target.form.isDefined()) {
                t.pages.add(relation.createPageForRelationForCreate(t, relation.target));
                t.pages.add(relation.createPageForRelationForUpdate(t, relation.target));
            }

            if (relation.target.mapping.isDefined() and relation.target.table.isDefined() and relation.upper = -1) {
                t.pages.add(relation.createPageForRelationForTable(t, relation.target));
            }
        }
        
        var exposedOperations : Set = esmUtils.getAllExposedOperationsFromAccessPoint(s);
        
        for (op in exposedOperations) {
        	if (op.input.isDefined()) {
        		//if (op.input.target.table.isDefined() and op.input.upper = -1) {
        		//	t.pages.add(op.createPageForOperationInputForTable(t));
        		//}
        		if (op.input.target.form.isDefined()) {
        			t.pages.add(op.mapPageForOperationInputForForm(t));
        		}
        	}
        	if (op.output.isDefined()) {
        		if (op.output.target.view.isDefined()) {
        			t.pages.add(op.mapPageForOperationOutputForView(t));
        		}
        		//if (op.output.target.table.isDefined() and op.output.upper = -1) {
        		//	t.pages.add(op.createPageForOperationOutputForTable(t));
        		//}
        	}
        }
}

rule CreateNavigationController
    transform s: ESM!esm::structure::TransferObjectType
    to t: UI!ui::NavigationController
    extends CreateNamedElementFromNamespaceElement {
        guard: s.isAccesspoint()

        log.debug("CreateNavigationController: " + s.name);

        t.name = s.fqName().anchor("NavigationController");
}

rule CreateApplicationDashboard
    transform s: ESM!esm::structure::TransferObjectType
    to t : UI!ui::PageDefinition
    extends CreateNamedElementFromNamespaceElement {
        guard: s.isAccesspoint() and s.view.isDefined()

        log.debug("CreateDashboard: " + s.name);

        var application = s.equivalent("CreateApplication");
        log.debug("CreateApplicationDashboard: " + s.name);
        t.name = s.fqName().anchor("Dashboard");
        t.dataElement = s.mapClassType(application);
		t.pageType = UI!ui::PageType#DASHBOARD;
 
	 	var pageContainer = new UI!ui::PageContainer();
	    pageContainer.layoutType = application.layoutTypes.first;
		pageContainer.name = "default";
		pageContainer.direction = UI!Axis#VERTICAL;
		t.containers.add(pageContainer);
	 
        pageContainer.children.add(s.view.map(application));
        application.pages.add(t);
}

@greedy
rule CreateNavigationItemForAccessPointRelation
    transform s : ESM!esm::structure::RelationFeature
    to t : UI!ui::NavigationItem
    extends CreateNamedElementFromNamedElement {
        guard: s.eContainer.isAccesspoint() and s.target.mapping.isDefined()
            and s.getterExpression.isDefined() and s.getterExpression.trim() <> ''
            and ((s.target.table.isDefined() and s.upper = -1) 
                or (s.target.view.isDefined() and s.upper = 1) 
                or (s.target.form.isDefined() and s.upper = 1))

        log.debug("CreateNavigationItemForAccessPointRelation: " + s.name);

        t.name = s.fqName().anchor("NavigationItem");
        t.label = s.name;
        t.target = s.equivalent("CreateNavigationItemPageForAccessPointRelationForTable");
        if (t.target.isUndefined()) {
            t.target = s.equivalent("CreateNavigationItemPageForAccessPointRelationForView");
        }
        if (t.target.isUndefined()) {
            t.target = s.equivalent("CreateNavigationItemPageForAccessPointRelationForForm");
        }
        s.eContainer.equivalent("CreateNavigationController").items.add(t);

}

@greedy
rule CreateNavigationItemPageForAccessPointRelationForView
    transform s : ESM!esm::structure::RelationFeature
    to t : UI!ui::PageDefinition
    extends CreateNamedElementFromNamedElement {
        guard: s.eContainer.isAccesspoint()
            and s.target.mapping.isDefined()
            and s.target.view.isDefined()
        log.debug("CreateNavigationItemPageForAccessPointRelationForView: " + s.name);

        var application = s.eContainer.equivalent("CreateApplication");

        t.name = s.fqName().anchor("View");
        t.dataElement = s.mapRelationType(application, s.eContainer.mapClassType(application));
		t.pageType = UI!ui::PageType#VIEW;

	 	var pageContainer = new UI!ui::PageContainer();
	    pageContainer.layoutType = application.layoutTypes.first;
		pageContainer.name = "default";
		pageContainer.direction = UI!Axis#VERTICAL;
		t.containers.add(pageContainer);

        pageContainer.children.add(s.target.view.map(application));
        application.pages.add(t);        
}

@greedy
rule CreateNavigationItemPageForAccessPointRelationForUpdate
    transform s : ESM!esm::structure::RelationFeature
    to t : UI!ui::PageDefinition
    extends CreateNamedElementFromNamedElement {
        guard: s.eContainer.isAccesspoint() and s.target.mapping.isDefined() and s.target.form.isDefined()

        log.debug("CreateNavigationItemPageForAccessPointRelationUpdateForm: " + s.name);

        var application = s.eContainer.equivalent("CreateApplication");

        t.name = s.fqName().anchor("Update");
        t.dataElement = s.mapRelationType(application, s.eContainer.mapClassType(application));
		t.pageType = UI!ui::PageType#UPDATE;

	 	var pageContainer = new UI!ui::PageContainer();
	    pageContainer.layoutType = application.layoutTypes.first;
		pageContainer.name = "default";
		pageContainer.direction = UI!Axis#VERTICAL;
		t.containers.add(pageContainer);

        pageContainer.children.add(s.target.form.map(application));
        application.pages.add(t);
}

@greedy
rule CreateNavigationItemPageForAccessPointRelationForCreate
    transform s : ESM!esm::structure::RelationFeature
    to t : UI!ui::PageDefinition
    extends CreateNamedElementFromNamedElement {
        guard: s.eContainer.isAccesspoint() and s.target.mapping.isDefined() and s.target.form.isDefined()

        log.debug("CreateNavigationItemPageForAccessPointRelationUpdateForm: " + s.name);

        var application = s.eContainer.equivalent("CreateApplication");

        t.name = s.fqName().anchor("Create");
        t.dataElement = s.mapRelationType(application, s.eContainer.mapClassType(application));
		t.pageType = UI!ui::PageType#CREATE;

	 	var pageContainer = new UI!ui::PageContainer();
	    pageContainer.layoutType = application.layoutTypes.first;
		pageContainer.name = "default";
		pageContainer.direction = UI!Axis#VERTICAL;
		t.containers.add(pageContainer);

        pageContainer.children.add(s.target.form.map(application));
        application.pages.add(t);
}

/*
@greedy
rule CreateNavigationItemPageForAccessPointRelationForTable
    transform s : ESM!esm::structure::RelationFeature
    to t : UI!ui::PageDefinition
    extends CreateNamedElementFromNamedElement {
        guard: s.eContainer.isAccesspoint() and s.target.mapping.isDefined() and s.target.table.isDefined() and s.upper = -1

        log.debug("CreateNavigationItemPageForAccessPointRelationForTable: " + s.name);
        
        var application = s.eContainer.equivalent("CreateApplication");

        t.name = s.fqName().anchor("RelationPageTable");
        t.dataElement = s.mapRelationType(application, s.eContainer.mapClassType(application));
		t.pageType = UI!ui::PageType#TABLE;
        
        var pageContainer = new UI!ui::PageContainer();
        pageContainer.layoutType = application.layoutTypes.first;
		pageContainer.name = "default";
		pageContainer.direction = UI!Axis#VERTICAL;
		t.containers.add(pageContainer);
        
        var table = s.target.table.createTableFromTransferObjectTable(application);
        pageContainer.children.add(table);

		/*
        if (s.target.table.masterDetail and s.target.view.isDefined()) {
            var detail : UI!ui::PageDefinition = new UI!ui::PageDefinition();
	        detail.dataElement = s.target.mapClassType(application);
            detail.name = t.name + "/detail";

			var detailPageContainer = new UI!ui::PageContainer();
		    detailPageContainer.layoutType = application.layoutTypes.first;
			detailPageContainer.name = "default";
			detailPageContainer.direction = UI!Axis#VERTICAL;
			detail.containers.add(detailPageContainer);

            application.pages.add(detail);
            detailPageContainer.children.add(s.target.view.map(application));
            table.detail = detail;
        }
		*/
/*		
        application.pages.add(t);
}
*/
