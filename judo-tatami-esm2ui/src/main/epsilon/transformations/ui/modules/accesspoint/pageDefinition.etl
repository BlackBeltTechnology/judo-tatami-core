import "../../../../operations/_importAll.eol";

rule ApplicationDashboardPage
    transform s: ESM!esm::accesspoint::ActorType
    to t : UI!ui::PageDefinition {

        log.debug("ApplicationDashboardPage: " + s.name);

        var application = s.equivalent("Application");
        log.debug("ApplicationDashboardPage: " + s.name);
        t.name = s.fqName().anchor("Dashboard");
		t.pageType = UI!ui::PageType#DASHBOARD;
 
	 	var pageContainer = new UI!ui::PageContainer();
	    pageContainer.layoutType = application.layoutTypes.first;
		pageContainer.name = "default";
		pageContainer.direction = UI!Axis#VERTICAL;
		t.containers.add(pageContainer);
	 	
	 	var dashboard = s.accesses.selectOne(a | a.appliedAnnotations.exists(annotation | annotation.name == "dashboard"));
	 	if (dashboard.isDefined() and dashboard.upper == 1 and dashboard.target.view.isDefined()) {
	 		var clazz = s.mapClassType(application);
	 		t.dataElement = dashboard.mapRelationType(application, clazz);
	        pageContainer.children.add(dashboard.target.view.map(application));
	        t.label = dashboard.target.view.getUiLabel();
	 	} else if (dashboard.isDefined() and (dashboard.upper > 1 or dashboard.upper == -1) and dashboard.target.isTableDefined()) {
	 		var clazz = s.mapClassType(application);
	 		t.dataElement = dashboard.mapRelationType(application, clazz);
	        pageContainer.children.add(dashboard.target.table.map(application, dashboard));
	        t.label = dashboard.target.table.getUiLabel();
	 	}
	 	
        application.pages.add(t);
        application.dashboard = t;
}
