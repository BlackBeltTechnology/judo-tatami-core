import "../../operations/_importAll.eol";

import "modules/namespace/namespace.etl";
import "modules/type/type.etl";
import "modules/accesspoint/application.etl";
import "modules/accesspoint/pageDefinition.etl";
import "modules/accesspoint/navigation.etl";
import "modules/ui/ui.etl";

pre {
	var preview = false;
}

post {

	var ecoreUtil = new Native("org.eclipse.emf.ecore.util.EcoreUtil");
	
	for (application : UI!ui::Application in UI!ui::Application.all()) {
		clonePagesOfInheritedRelations(application);
	}
	
	for (button : UI!ui::Button in UI!ui::Button.all()) {
		if (button.action.isDefined() and button.action.isKindOf(UI!ui::NavigationToPageAction) and button.dataElement <> button.action.target.dataElement) {
			var application = button.action.target.~application;
			var clonedPage = application.pages.selectOne(p | p.~original.isDefined() and p.~original == button.action.target);
			if (clonedPage.isDefined()) {
				button.action.target = clonedPage;
			}			
		}
	}

	for (application : UI!ui::Application in UI!ui::Application.all()) {
			log.debug("==============================================================");
			log.debug("APP ================== : " + application.name);
			log.debug("==============================================================");
		//application.calculateRelationBehaviour();
		application.resolveActionPageDefinitions();
		application.calculatePageActions();
	}
	
	for (action : UI!ui::Action in UI!ui::Action.all()) {
		action.setIcon();
		action.setLabel();
	}

	for (input : UI!ui::Input in UI!ui::Input.all()) {
		input.setIcon();
	}

	for (classType : UI!ui::data::ClassType in UI!ui::data::ClassType.all()) {
		classType.calculateRepresentation();
	}
	
	for (application : UI!ui::Application in UI!ui::Application.all()) {
		uiUtils.organizeApplication(application, "mobile", 4);
    	uiUtils.organizeApplication(application, "tablet", 8);
    	uiUtils.organizeApplication(application, "desktop", 12);

		var mobile = application.layoutTypes.selectOne(l | l.name == "mobile");
		mobile.minimumResolution = 0;
		mobile.maximumResolution = 599;
		mobile.menuCollapsed = true;

		var tablet = application.layoutTypes.selectOne(l | l.name == "tablet");
		tablet.minimumResolution = 600;
		tablet.maximumResolution = 839;
		tablet.menuCollapsed = true;
		
		var desktop = application.layoutTypes.selectOne(l | l.name == "desktop");
		desktop.minimumResolution = 840;
		desktop.maximumResolution = 32767;
		desktop.`default` = true;

	}
}


/*


Material Design provides responsive layouts based on the following column structures. Layouts using 4-column, 8-column, and 12-column grids are available for use across different screens,...

Material Design provides responsive layouts based on the following column structures. Layouts using 4-column, 8-column, and 12-column grids are available for use across different screens, devices, and orientations.

Each breakpoint range determines the number of columns, and recommended margins and gutters, for each display size.

Breakpoint Range (dp)	Portrait			Landscape		Window			Columns	Margins / Gutters*
0 – 359					small handset						xsmall			4					16
360 – 399				medium handset						xsmall			4					16
400 – 479				large handset						xsmall			4					16
480 – 599				large handset		small handset	xsmall			4					16
600 – 719				small tablet		medium handset	small			8					16
720 – 839				large tablet		large handset	small			8					24
840 – 959				large tablet		large handset	small			12					24
960 – 1023									small tablet	small			12					24
1024 – 1279									large tablet	medium			12					24
1280 – 1439									large tablet	medium			12					24
1440 – 1599													large			12					24
1600 – 1919													large			12					24
1920 +														xlarge			12					24

*/
