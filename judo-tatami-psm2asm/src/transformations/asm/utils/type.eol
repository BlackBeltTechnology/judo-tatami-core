operation JUDOPSM!Type createASMAnnotations() : Sequence {
	var annotations = Sequence{};

	if (self.isKindOf(JUDOPSM!StringType)) {
		if (self.maxLength.isDefined()) {
			var aMaxLength = new ASM!EStringToStringMapEntry;
			aMaxLength.key = "maxLength";
			aMaxLength.value = self.maxLength.asString();
			annotations.add(aMaxLength);
		}
	} else if (self.isKindOf(JUDOPSM!CustomType)) {
		switch (self.name) {
			case "Date":
			case "Timestamp":
			case "Binary":
			default:
				var aCustomType = new ASM!EStringToStringMapEntry;
				aCustomType.key = "customType";
				aCustomType.value = self.name;
				annotations.add(aCustomType);
		}
	}

	return annotations;
}

@cached
operation JUDOPSM!Primitive getEcoreType() : TYPES!EDataType {
	if (self.isKindOf(JUDOPSM!StringType)) {
		return "JString".getJudoDataType();
	} else if (self.isKindOf(JUDOPSM!NumericType)) {
		if (self.precision == 0 and self.scale <= 9) {
			return "JInteger".getJudoDataType();
		} else if (self.precision == 0 and self.scale > 9 and self.scale <= 18) {
			return "JLong".getJudoDataType();
		} else if (self.precision == 0 and self.scale > 18) {
			return "JBigInteger".getJudoDataType();
		} else if (self.precision > 0 and self.scale <= 7) {
			return "JFloat".getJudoDataType();
		} else if (self.precision > 0 and self.scale > 7 and self.scale <= 15) {
			return "JDouble".getJudoDataType();
		} else if (self.precision > 0 and self.scale > 15) {
			return "JBigDecimal".getJudoDataType();
		}
	} else if (self.isKindOf(JUDOPSM!BooleanType)) {
		return "JBoolean".getJudoDataType();
	} else if (self.isKindOf(JUDOPSM!EnumerationType)) {
		return self.equivalent();
	} else if (self.isKindOf(JUDOPSM!CustomType)) {
		switch (self.name) {
			case "Date":
				return "JDate".getJudoDataType();
			case "Timestamp":
				return "JTimestamp".getJudoDataType();
			case "Binary":
				return "JByteArray".getJudoDataType();
			default:
				return "JObject".getJudoDataType();
		}
	} else {
		return "JObject".getJudoDataType();
	}
}

operation JUDOPSM!Relation getEcoreType() : ASM!EClass {
	return self.target.equivalent();
}
