import "../../../operations/psm/data/_importData.eol";
import "../utils/_importUtils.eol";

rule CreateEntityClass
	transform s : JUDOPSM!EntityType
	to t : ASM!EClass {
		t.name = s.name;
		t.abstract = s.abstract;
		for (super in s.superEntityTypes) {
			t.eSuperTypes.add(super.equivalent());
		}
		s.getPackage().equivalent().eClassifiers.add(t);
		
		t.eSuperTypes.add(BASE!EClass.all.selectOne(c | c.name = "Identifiable"));

		var annotation = new ASM!EAnnotation;
		annotation.source = extendedMetadataURI;
		var aEntity = new ASM!EStringToStringMapEntry;
		aEntity.key = "entity";
		aEntity.value = "true";
		annotation.details.add(aEntity);
		t.eAnnotations.add(annotation);
	}

rule CreateAttribute
	transform s : JUDOPSM!Attribute
	to t : ASM!EAttribute {
		guard: s.isPrimitive()
		
		t.name = s.name;
		if (s.required) {
			t.lowerBound = 1;
		} else {
			t.lowerBound = 0;
		}

		if (s.identifier) {
			t.iD = true;
		}

		t.eType = s.dataType.getEcoreType();

		var annotations = s.dataType.createASMAnnotations();
		if (not annotations.isEmpty()) {
			var annotation = new ASM!EAnnotation;
			annotation.source = extendedMetadataURI;
			annotation.details.addAll(annotations);
			t.eAnnotations.add(annotation);
		}

		s.getEntityType().equivalent().eStructuralFeatures.add(t);
	}

rule CreateRelation
	transform s : JUDOPSM!Relation
	to t : ASM!EReference {
		t.name = s.name;

		t.lowerBound = s.cardinality.lower;
		t.upperBound = s.cardinality.upper;

		var annotations = s.target.createASMAnnotations();
		if (not annotations.isEmpty()) {
			var annotation = new ASM!EAnnotation;
			annotation.source = extendedMetadataURI;
			annotation.details.addAll(annotations);
			t.eAnnotations.add(annotation);
		}

		s.getEntityType().equivalent().eStructuralFeatures.add(t);
		t.eType = s.target.equivalent();
	}

rule CreateEndpointRelation
	transform s : JUDOPSM!Endpoint
	to t : ASM!EReference
	extends CreateRelation {
		t.eOpposite = s.partner.equivalent();
}

rule CreateContainmentRelation
	transform s : JUDOPSM!Containment
	to t : ASM!EReference
	extends CreateRelation {
		t.containment = true;
}
