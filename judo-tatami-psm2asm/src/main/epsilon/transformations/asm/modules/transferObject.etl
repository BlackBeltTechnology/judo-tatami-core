import "../../../operations/psm/service/_importService.eol";
import "../../../operations/asm/_importAll.eol";
import "../utils/_importUtils.eol";

@abstract
rule CreateTransferObject
	transform s : JUDOPSM!TransferObjectType
	to t : ASM!EClass {
		t.name = s.name;
		s.getNamespace().transformToAsm().eClassifiers.add(t);
		
		var annotation = new ASM!EAnnotation;
		annotation.source = extendedMetadataURI;
		t.eAnnotations.add(annotation);
	}

rule CreateMappedTransferObject
    transform s : JUDOPSM!MappedTransferObjectType
    to t : ASM!EClass
    extends CreateTransferObject {
        var annotation = t.eAnnotations.selectOne(a | a.source = extendedMetadataURI);
        var aMappedEntityType = new ASM!EStringToStringMapEntry;
		aMappedEntityType.key = "mappedEntityType";
		aMappedEntityType.value = asmUtils.getClassifierFQName(s.entityType.transformToAsm());
		annotation.details.add(aMappedEntityType);
		
		var aEntityIdPresence = new ASM!EStringToStringMapEntry;
		aEntityIdPresence.key = "entityIdPresence";
		aEntityIdPresence.value = s.entityReferencePresence.name;
		annotation.details.add(aEntityIdPresence);
    }

rule CreateUnmappedTransferObject
    transform s : JUDOPSM!UnmappedTransferObjectType
    to t : ASM!EClass
    extends CreateTransferObject {
    }

rule CreateTransferObjectAttribute
	transform s : JUDOPSM!TransferAttribute
	to t : ASM!EAttribute {
		guard: s.isPrimitive()
		
		t.name = s.name;
		if (s.required) {
			t.lowerBound = 1;
		} else {
			t.lowerBound = 0;
		}
		
		t.derived = s.binding.isDefined() and not s.binding.isKindOf(JUDOPSM!Attribute);

		t.eType = s.dataType.getEcoreType();

		var annotations = s.dataType.createASMAnnotations();
		var annotation = new ASM!EAnnotation;
		annotation.source = extendedMetadataURI;
		t.eAnnotations.add(annotation);

        if (s.binding.isDefined()) {
			var aMappedAttribute = new ASM!EStringToStringMapEntry;
			aMappedAttribute.key = "mappedAttribute";
			aMappedAttribute.value = s.binding.name;
			annotation.details.add(aMappedAttribute);
			
			t.derived = not s.binding.isKindOf(JUDOPSM!Attribute);
        }
		
		if (not annotations.isEmpty()) {
			annotation.details.addAll(annotations);
		}

		s.getTransferObjectType().transformToAsm().eStructuralFeatures.add(t);
	}

rule CreateTransferObjectRelation
	transform s : JUDOPSM!TransferObjectRelation
	to t : ASM!EReference {
		t.name = s.name;
		t.containment = s.embedded;

		t.lowerBound = s.cardinality.lower;
		t.upperBound = s.cardinality.upper;
		
		t.derived = s.binding.isDefined() and not s.binding.isKindOf(JUDOPSM!Relation);

		var annotations = s.target.createASMAnnotations();
		var annotation = new ASM!EAnnotation;
		annotation.source = extendedMetadataURI;
		t.eAnnotations.add(annotation);

        if (s.binding.isDefined()) {
			var aMappedReference = new ASM!EStringToStringMapEntry;
			aMappedReference.key = "mappedReference";
			aMappedReference.value = s.binding.name;
			annotation.details.add(aMappedReference);
			
			t.derived = not s.binding.isKindOf(JUDOPSM!Relation);
        }
		
		if (not annotations.isEmpty()) {
		    annotation.details.addAll(annotations);
		}

		s.getTransferObjectType().transformToAsm().eStructuralFeatures.add(t);
		t.eType = s.target.transformToAsm();
	}
