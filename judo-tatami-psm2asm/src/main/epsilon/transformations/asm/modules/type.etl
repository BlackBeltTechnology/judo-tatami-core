import "../utils/_importUtils.eol";

@greedy
rule CreateEnumeration
	transform s : JUDOPSM!EnumerationType
	to t : ASM!EEnum {
		t.name = s.name;
		s.getNamespace().asmEquivalent().eClassifiers.add(t);
		for (m in s.members) {
			var l = new ASM!EEnumLiteral;
			l.value = m.ordinal;
			l.literal = m.name;
			l.name = m.name;
			t.eLiterals.add(l);
		}
	}

@greedy
rule CreateStringType
    transform s : JUDOPSM!StringType
    to t : ASM!EDataType {
        t.name = s.name;
        t.instanceClassName = "java.lang.String";
        
        s.getNamespace().asmEquivalent().eClassifiers.add(t);
    }

@greedy
rule CreateIntegerType
    transform s : JUDOPSM!NumericType
    to t : ASM!EDataType {
        guard: s.isInteger()
        
        t.name = s.name;
        
        if (s.precision <= 9 and s.precision > 0) {
            t.instanceClassName = "java.lang.Integer";
        } else if (s.precision <= 19 and s.precision > 9) {
            t.instanceClassName = "java.lang.Long";
        } else {
            t.instanceClassName = "java.math.BigDecimal";
        }
        
        s.getNamespace().asmEquivalent().eClassifiers.add(t);
    }

@greedy
rule CreateDecimalType
    transform s : JUDOPSM!NumericType
    to t : ASM!EDataType {
        guard: s.isDecimal()
        
        t.name = s.name;
        if (s.precision <= 7 and s.precision > 0 and s.scale <= 4) {
            t.instanceClassName = "java.lang.Float";
        } else if (s.precision <= 15 and s.precision > 7 and s.scale <= 4) {
            t.instanceClassName = "java.lang.Double";
        } else {
            t.instanceClassName = "java.math.BigDecimal";
        }
        
        s.getNamespace().asmEquivalent().eClassifiers.add(t);
    }

@greedy
rule CreateBooleanType
    transform s : JUDOPSM!BooleanType
    to t : ASM!EDataType {
        t.name = s.name;
        t.instanceClassName = "java.lang.Boolean";
        
        s.getNamespace().asmEquivalent().eClassifiers.add(t);
    }

@greedy
rule CreatePasswordType
    transform s : JUDOPSM!PasswordType
    to t : ASM!EDataType {
        throw "Password type is not supported yet.";
    }

@greedy
rule CreateXMLType
    transform s : JUDOPSM!XMLType
    to t : ASM!EDataType {
        throw "XML type is not supported yet.";
    }

@greedy
rule CreateDateType
    transform s : JUDOPSM!DateType
    to t : ASM!EDataType {
        t.name = s.name;
        t.instanceClassName = "java.time.LocalDate";
        
        s.getNamespace().asmEquivalent().eClassifiers.add(t);
    }

@greedy
rule CreateTimestampType
    transform s : JUDOPSM!TimestampType
    to t : ASM!EDataType {
        t.name = s.name;
        t.instanceClassName = "java.time.ZonedDateTime";
        
        s.getNamespace().asmEquivalent().eClassifiers.add(t);
    }

@greedy
rule CreateCustomType
    transform s : JUDOPSM!CustomType
    to t : ASM!EDataType {
        guard: not s.isNumeric() and not s.isBoolean() and not s.isEnumeration() and not s.isString() and not s.isDate() and not s.isTimestamp() and not s.isKindOf(JUDOPSM!PasswordType) and not s.isKindOf(JUDOPSM!XMLType)
        
        t.name = s.name;
        t.instanceClassName = "java.lang.Object";
        
        s.getNamespace().asmEquivalent().eClassifiers.add(t);
    }
