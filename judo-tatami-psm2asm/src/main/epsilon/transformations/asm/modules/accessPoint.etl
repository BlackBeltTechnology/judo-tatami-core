import "../utils/_importUtils.eol";
import "operation.etl";

@greedy
rule CreateActorTypeAnnotation
    transform s : JUDOPSM!AbstractActorType
    to t : ASM!EAnnotation {
        t.source = asmUtils.getAnnotationUri("actor");

        var actorName = new ASM!EStringToStringMapEntry;
        actorName.key = "name";
        actorName.value = psmUtils.namespaceElementToString(s);
        t.details.add(actorName);

        if (s.realm.isDefined()) {
            var realm = new ASM!EStringToStringMapEntry;
            realm.key = "realm";
            realm.value = s.realm;
            t.details.add(realm);
        }

        s.transferObjectType.asmEquivalent().eAnnotations.add(t);
}

@greedy
rule CreateAccessPointAnnotation
    transform s : JUDOPSM!TransferObjectType
    to t : ASM!EAnnotation {
        guard: s.isAccessPoint()

        t.source = asmUtils.getAnnotationUri("accessPoint");
        
        var accessPoint = new ASM!EStringToStringMapEntry;
        accessPoint.key = "value";
        accessPoint.value = "true";
        t.details.add(accessPoint);
        
        s.asmEquivalent().eAnnotations.add(t);
}

rule CreateExposedServiceReferenceAnnotation
    transform s : JUDOPSM!TransferObjectRelation
    to t : ASM!EAnnotation {
        guard: s.eContainer.isAccessPoint() and not s.isExposedGraph()

        t.source = asmUtils.getAnnotationUri("exposedService");

        var exposedServiceEntry = new ASM!EStringToStringMapEntry;
        exposedServiceEntry.key = "value";
        exposedServiceEntry.value = "true";
        t.details.add(exposedServiceEntry);

        s.asmEquivalent().eAnnotations.add(t);
}

rule CreateExposedGraphReferenceAnnotation
    transform s : JUDOPSM!TransferObjectRelation
    to t : ASM!EAnnotation {
        guard: s.isExposedGraph()

        t.source = asmUtils.getAnnotationUri("exposedGraph");

        var exposedGraphEntry = new ASM!EStringToStringMapEntry;
        exposedGraphEntry.key = "value";
        exposedGraphEntry.value = "true";
        t.details.add(exposedGraphEntry);

        s.asmEquivalent().eAnnotations.add(t);
}
