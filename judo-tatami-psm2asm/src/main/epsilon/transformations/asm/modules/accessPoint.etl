import "../utils/_importUtils.eol";

@cached
operation JUDOPSM!ExposedGraph getMappedTransferObjects() : Set {
    return Set{self.mappedTransferObjectType}.includingAll(self.mappedTransferObjectType.getMappedTargets());
}

@cached
operation JUDOPSM!TransferObjectType getMappedTargets() : Set {
    return self.getNewMappedTargets(new Set);
}

operation JUDOPSM!TransferObjectType getNewMappedTargets(currentTargets : Set) : Set {
    var newTargets = self.relations.select(r | r.target.isKindOf(JUDOPSM!MappedTransferObjectType)).collect(r | r.target).excludingAll(currentTargets);
    currentTargets.addAll(newTargets);
    for (t in newTargets) {
        currentTargets.addAll(t.getNewMappedTargets(currentTargets));
    }
    return currentTargets;
}

rule CreateAccessPoint
    transform s : JUDOPSM!AccessPoint
    to t : ASM!EClass {
        t.name = s.name;
        t.abstract = true;
        t.interface = true;
        
        // TODO - add platform specific attributes (protocol, message format, etc.)
        
        s.getNamespace().transformToAsm().eClassifiers.add(t);
        
	    var annotation = new ASM!EAnnotation;
	    annotation.source = extendedMetadataURI;
	    t.eAnnotations.add(annotation);
	
	    var aAccessPoint = new ASM!EStringToStringMapEntry;
	    aAccessPoint.key = "accessPoint";
	    aAccessPoint.value = "true";
	    annotation.details.add(aAccessPoint);
}

@cached
operation JUDOPSM!ExposedService getAccessPoint() : JUDOPSM!AccessPoint {
    return JUDOPSM!AccessPoint.all.selectOne(ap | ap.exposedServices.contains(self));
}

@cached
operation JUDOPSM!ExposedGraph getAccessPoint() : JUDOPSM!AccessPoint {
    return JUDOPSM!AccessPoint.all.selectOne(ap | ap.exposedGraphs.contains(self));
}

rule CreateExposedByAnnotationForUnboundOperation
    transform s : JUDOPSM!ExposedService
    to t : ASM!EStringToStringMapEntry {
        var op = s.`operation`.equivalent("CreateUnboundOperation");
        
        var annotation = op.eAnnotations.selectOne(a | a.source = extendedMetadataURI);
        if (not annotation.isDefined()) {
            annotation = new ASM!EAnnotation;
		    annotation.source = extendedMetadataURI;
		    op.eAnnotations.add(annotation);
        }
        
		t.key = "exposedBy";
		t.value = s.getAccessPoint().equivalent("CreateAccessPoint").getFQName();
		annotation.details.add(t);
}

rule CreateExposedGraph
    transform s : JUDOPSM!ExposedGraph
    to t : ASM!EClass {
        t.name = s.getAccessPoint().name + "Ê˜" + s.name;
        t.abstract = true;
        t.interface = true;
            
        s.getAccessPoint().getNamespace().transformToAsm().eClassifiers.add(t);
        
        var annotation = new ASM!EAnnotation;
		annotation.source = extendedMetadataURI;
		t.eAnnotations.add(annotation);
		
		var aExposedBy = new ASM!EStringToStringMapEntry;
		aExposedBy.key = "exposedBy";
		aExposedBy.value = s.getAccessPoint().equivalent("CreateAccessPoint").getFQName();
		annotation.details.add(aExposedBy);

		for (mto in s.getMappedTransferObjects()) {
		    var annotation = mto.transformToAsm().eAnnotations.selectOne(a | a.source = extendedMetadataURI);
            if (not annotation.isDefined()) {
                annotation = new ASM!EAnnotation;
		        annotation.source = extendedMetadataURI;
		        mto.transformToAsm().eAnnotations.add(annotation);
            }

            var index = annotation.details.select(d | d.key.startsWith("graphs.")).size();
		    var aGraph = new ASM!EStringToStringMapEntry;
		    aGraph.key = "graphs." + index;
		    aGraph.value = s.equivalent("CreateExposedGraph").getFQName();
		    annotation.details.add(aGraph);
		}
}

// TODO - remove selector reference, it is added for debugging only
rule CreateExposedGraphSelector
    transform s : JUDOPSM!ExposedGraph
    to t : ASM!EStringToStringMapEntry {
        var annotation = s.equivalent("CreateExposedGraph").eAnnotations.selectOne(a | a.source = extendedMetadataURI);
        
		t.key = "selector";
		t.value = s.selector.name;
		annotation.details.add(t);
}

rule CreateExposedGraphRoot
    transform s : JUDOPSM!ExposedGraph
    to t : ASM!EStringToStringMapEntry {
        var annotation = s.equivalent("CreateExposedGraph").eAnnotations.selectOne(a | a.source = extendedMetadataURI);
        
		t.key = "root";
		t.value = s.mappedTransferObjectType.transformToAsm().getFQName();
		annotation.details.add(t);
}

rule CreateExposedGraphRootCollectionFlag
    transform s : JUDOPSM!ExposedGraph
    to t : ASM!EStringToStringMapEntry {
        var annotation = s.equivalent("CreateExposedGraph").eAnnotations.selectOne(a | a.source = extendedMetadataURI);
        
		t.key = "root.collection";
		t.value = (s.selector.cardinality.upper > 1 or s.selector.cardinality.upper == -1).toString();
		annotation.details.add(t);
}
