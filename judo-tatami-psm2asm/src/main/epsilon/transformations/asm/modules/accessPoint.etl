import "../utils/_importUtils.eol";
import "operation.etl";

rule CreateAccessPointAnnotation
    transform s : JUDOPSM!AccessPoint
    to t : ASM!EAnnotation {
        t.source = asmUtils.getAnnotationUri("accessPoint");
        
        var accessPoint = new ASM!EStringToStringMapEntry;
        accessPoint.key = "value";
        accessPoint.value = "true";
        t.details.add(accessPoint);
        
        s.equivalent("CreateAccessPoint").eAnnotations.add(t);
}

rule CreateAccessPoint
    transform s : JUDOPSM!AccessPoint
    to t : ASM!EClass {
        t.name = s.name;
        t.abstract = true;
        t.interface = true;
        
        // TODO - add platform specific attributes (protocol, message format, etc.)
        
        s.eContainer.asmEquivalent().eClassifiers.add(t);
}

rule CreateExposedByAnnotationForUnboundOperation
    transform s : JUDOPSM!ExposedService
    to t : ASM!EAnnotation {
        t.source = asmUtils.getAnnotationUri("exposedBy");
        
        var exposedBy = new ASM!EStringToStringMapEntry;
        exposedBy.key = "value";
        exposedBy.value = asmUtils.getClassifierFQName(s.eContainer.equivalent("CreateAccessPoint"));
        t.details.add(exposedBy);
        
        s.`operationGroup`.asmEquivalent().eAnnotations.add(t);
}

rule CreateExposedGraphReference
    transform s : JUDOPSM!ExposedGraph
    to t : ASM!EReference {
        t.name = s.name;

        t.lowerBound = s.cardinality.lower;
        t.upperBound = s.cardinality.upper;
        t.eType = s.mappedTransferObjectType.equivalent("CreateMappedTransferObject");
        t.derived = true;

        s.eContainer.equivalent("CreateAccessPoint").eStructuralFeatures.add(t);
}

rule CreateExposedGraphReferenceBinding
    transform s : JUDOPSM!ExposedGraph
    to t : ASM!EAnnotation {
        t.source = extendedMetadataURI + "/expression";

        var getter = new ASM!EStringToStringMapEntry;
        getter.key = "getter";
        getter.value = s.selector.getterExpression.expression;

        var getterDialect = new ASM!EStringToStringMapEntry;
        getterDialect.key = "getter.dialect";
        getterDialect.value = s.selector.getterExpression.dialect.asString();

        t.details.add(getter);
        t.details.add(getterDialect);

        if (s.selector.setterExpression.isDefined()) {
            var setter = new ASM!EStringToStringMapEntry;
            setter.key = "setter";
            setter.value = s.selector.setterExpression.expression;

            var setterDialect = new ASM!EStringToStringMapEntry;
            setterDialect.key = "setter.dialect";
            setterDialect.value = s.selector.setterExpression.dialect.asString();

            t.details.add(setter);
            t.details.add(setterDialect);
        }

        s.equivalent("CreateExposedGraphReference").eAnnotations.add(t);
}
