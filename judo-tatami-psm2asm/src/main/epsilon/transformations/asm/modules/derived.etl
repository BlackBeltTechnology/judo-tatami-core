import "../utils/_importUtils.eol";

@abstract
rule AddPrimitiveAccessorConstraints
	transform s : JUDOPSM!PrimitiveAccessor
    to t : ASM!EAnnotation {
        t.source = asmUtils.getAnnotationUri("constraints");
        
        s.asmEquivalent().eAnnotations.add(t);
    }

@greedy
rule AddStringPrimitiveAccessorConstraints
	transform s : JUDOPSM!PrimitiveAccessor
    to t : ASM!EAnnotation
    extends AddPrimitiveAccessorConstraints {
        guard: s.dataType.isKindOf(JUDOPSM!StringType)
        
        var maxLength = new ASM!EStringToStringMapEntry;
        maxLength.key = "maxLength";
        maxLength.value = s.dataType.maxLength.asString();
        t.details.add(maxLength);
    }

@greedy
rule AddCustomPrimitiveAccessorConstraints
	transform s : JUDOPSM!PrimitiveAccessor
    to t : ASM!EAnnotation
    extends AddPrimitiveAccessorConstraints {
        guard: s.dataType.isKindOf(JUDOPSM!CustomType)
        
        var customType = new ASM!EStringToStringMapEntry;
        customType.key = "customType";
        customType.value = psmUtils.namespaceElementToString(s.dataType).replace("::", ".");
        t.details.add(customType);
    }

@abstract
rule AddAbstractNumericPrimitiveAccessorConstraints
	transform s : JUDOPSM!PrimitiveAccessor
    to t : ASM!EAnnotation
    extends AddPrimitiveAccessorConstraints {
        var precision = new ASM!EStringToStringMapEntry;
        precision.key = "precision";
        precision.value = s.dataType.precision.asString();
        t.details.add(precision);
        
        var scale = new ASM!EStringToStringMapEntry;
        scale.key = "scale";
        scale.value = s.dataType.scale.asString();
        t.details.add(scale);
    }

@greedy
rule AddNumericPrimitiveAccessorConstraints
	transform s : JUDOPSM!PrimitiveAccessor
    to t : ASM!EAnnotation
    extends AddAbstractNumericPrimitiveAccessorConstraints {
        guard: s.dataType.isKindOf(JUDOPSM!NumericType) and not s.dataType.isKindOf(JUDOPSM!MeasuredType)
    }

@greedy
rule AddMeasuredPrimitiveAccessorConstraints
    transform s : JUDOPSM!Attribute
    to t : ASM!EAnnotation
    extends AddAbstractNumericPrimitiveAccessorConstraints {
        guard: s.dataType.isKindOf(JUDOPSM!MeasuredType)
        
        var measure = new ASM!EStringToStringMapEntry;
        measure.key = "measure";
        measure.value = psmUtils.namespaceElementToString(s.dataType.storeUnit.eContainer).replace("::", ".");
        t.details.add(measure);
        
        var measure = new ASM!EStringToStringMapEntry;
        measure.key = "unit";
        measure.value = s.dataType.storeUnit.name;
        t.details.add(measure);
    }

@greedy
rule CreatePrimitiveAccessorExpressionAnnotation
	transform s : JUDOPSM!PrimitiveAccessor
	to t : ASM!EAnnotation {
	    t.source = extendedMetadataURI + "/expression";
	    
	    var getter = new ASM!EStringToStringMapEntry;
	    getter.key = "getter";
	    getter.value = s.getterExpression.expression;
	    
	    var getterDialect = new ASM!EStringToStringMapEntry;
	    getterDialect.key = "getter.dialect";
	    getterDialect.value = s.getterExpression.dialect.asString();
	    
	    t.details.add(getter);
	    t.details.add(getterDialect);
	    
	    if (s.setterExpression.isDefined()) {
		    var setter = new ASM!EStringToStringMapEntry;
		    setter.key = "setter";
		    setter.value = s.setterExpression.expression;
		    
		    var setterDialect = new ASM!EStringToStringMapEntry;
		    setterDialect.key = "setter.dialect";
		    setterDialect.value = s.setterExpression.dialect.asString();
		    
		    t.details.add(setter);
	        t.details.add(setterDialect);
	    }
        
        s.asmEquivalent().eAnnotations.add(t);
	}

@greedy
rule CreateReferenceAccessorExpressionAnnotation
	transform s : JUDOPSM!ReferenceAccessor
	to t : ASM!EAnnotation {
	    t.source = asmUtils.getAnnotationUri("expression");
	    
	    var getter = new ASM!EStringToStringMapEntry;
	    getter.key = "getter";
	    getter.value = s.getterExpression.expression;
	    
	    var getterDialect = new ASM!EStringToStringMapEntry;
	    getterDialect.key = "getter.dialect";
	    getterDialect.value = s.getterExpression.dialect.asString();
	    
	    t.details.add(getter);
	    t.details.add(getterDialect);
	    
	    if (s.setterExpression.isDefined()) {
		    var setter = new ASM!EStringToStringMapEntry;
		    setter.key = "setter";
		    setter.value = s.setterExpression.expression;
		    
		    var setterDialect = new ASM!EStringToStringMapEntry;
		    setterDialect.key = "setter.dialect";
		    setterDialect.value = s.setterExpression.dialect.asString();
		    
		    t.details.add(setter);
	        t.details.add(setterDialect);
	    }
        
        s.asmEquivalent().eAnnotations.add(t);
	}

@abstract
rule CreatePrimitiveAccessor
	transform s : JUDOPSM!PrimitiveAccessor
	to t : ASM!EAttribute {
		t.name = s.name;
		t.derived = true;
		t.volatile = true;
		
		if (s.required) {
			t.lowerBound = 1;
		} else {
			t.lowerBound = 0;
		}

		t.eType = s.dataType.asmEquivalent();
		if (not s.setterExpression.isDefined()) {
			t.changeable = false;
		}
    }

@abstract
rule CreateReferenceAccessor
    transform s : JUDOPSM!ReferenceAccessor
    to t : ASM!EReference {
		t.name = s.name;
		t.derived = true;
		t.volatile = true;

		t.lowerBound = s.cardinality.lower;
		t.upperBound = s.cardinality.upper;

		t.eType = s.target.equivalent("CreateEntityClass");
		if (not s.setterExpression.isDefined()) {
            t.changeable = false;
        }
}

rule CreateDataProperty
	transform s : JUDOPSM!DataProperty
	to t : ASM!EAttribute
	extends CreatePrimitiveAccessor {
		guard: s.isPrimitive()

		s.getEntityType().equivalent("CreateEntityClass").eStructuralFeatures.add(t);
	}

rule CreateNavigationProperty
	transform s : JUDOPSM!NavigationProperty
	to t : ASM!EReference
	extends CreateReferenceAccessor {
		s.getEntityType().equivalent("CreateEntityClass").eStructuralFeatures.add(t);
}

@greedy
rule CreateClassForStatics
    transform s : JUDOPSM!Namespace
    to t : ASM!EClass {
        guard: s.elements.selectOne(e | e.isKindOf(JUDOPSM!StaticData) or e.isKindOf(JUDOPSM!StaticNavigation)).isDefined()

        t.name = "__Static";
        t.abstract = true;

        s.asmEquivalent().eClassifiers.add(t);
}

rule CreateStaticData
	transform s : JUDOPSM!StaticData
	to t : ASM!EAttribute
	extends CreatePrimitiveAccessor {
		s.eContainer.equivalent("CreateClassForStatics").eStructuralFeatures.add(t);
}

rule CreateStaticNavigation
	transform s : JUDOPSM!StaticNavigation
	to t : ASM!EReference
	extends CreateReferenceAccessor {
		s.eContainer.equivalent("CreateClassForStatics").eStructuralFeatures.add(t);
}
