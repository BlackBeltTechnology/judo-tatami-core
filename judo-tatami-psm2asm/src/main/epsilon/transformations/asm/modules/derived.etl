import "../../../operations/psm/derived/_importDerived.eol";
import "../utils/_importUtils.eol";

@abstract
rule CreatePrimitiveAccessor
	transform s : JUDOPSM!PrimitiveAccessor
	to t : ASM!EAttribute {
		t.name = s.name;
		t.derived = true;
		t.volatile = true;
		
		if (s.required) {
			t.lowerBound = 1;
		} else {
			t.lowerBound = 0;
		}

		t.eType = s.dataType.getEcoreType();

		var annotations = s.dataType.createASMAnnotations();
		
		var aGetterExpression = new ASM!EStringToStringMapEntry;
		aGetterExpression.key = "getterExpression";
		aGetterExpression.value = s.getterExpression.expression;
		annotations.add(aGetterExpression);
		
		if (s.setterExpression.isDefined()) {
		    var aSetterExpression = new ASM!EStringToStringMapEntry;
		    aSetterExpression.key = "setterExpression";
		    aSetterExpression.value = s.setterExpression.expression;
		    annotations.add(aSetterExpression);
		} else {
			t.unsettable = true;
		}
		
		var annotation = new ASM!EAnnotation;
		annotation.source = extendedMetadataURI;
		annotation.details.addAll(annotations);
		t.eAnnotations.add(annotation);
}

@abstract
rule CreateReferenceAccessor
    transform s : JUDOPSM!ReferenceAccessor
    to t : ASM!EReference {
		t.name = s.name;
		t.derived = true;
		t.volatile = true;

		t.lowerBound = s.cardinality.lower;
		t.upperBound = s.cardinality.upper;

		var annotations = s.target.createASMAnnotations();
		
		var aGetterExpression = new ASM!EStringToStringMapEntry;
		aGetterExpression.key = "getterExpression";
		aGetterExpression.value = s.getterExpression.expression;
		annotations.add(aGetterExpression);
		
		if (s.setterExpression.isDefined()) {
		    var aSetterExpression = new ASM!EStringToStringMapEntry;
		    aSetterExpression.key = "setterExpression";
		    aSetterExpression.value = s.setterExpression.expression;
		    annotations.add(aSetterExpression);
		} else {
			t.unsettable = true;
		}
		
		var annotation = new ASM!EAnnotation;
		annotation.source = extendedMetadataURI;
		annotation.details.addAll(annotations);
		t.eAnnotations.add(annotation);

		t.eType = s.target.transformToAsm();
}

rule CreateDataProperty
	transform s : JUDOPSM!DataProperty
	to t : ASM!EAttribute
	extends CreatePrimitiveAccessor {
		guard: s.isPrimitive()

		s.getEntityType().transformToAsm().eStructuralFeatures.add(t);
	}

rule CreateNavigationProperty
	transform s : JUDOPSM!NavigationProperty
	to t : ASM!EReference
	extends CreateReferenceAccessor {
		s.getEntityType().transformToAsm().eStructuralFeatures.add(t);
}

@greedy
rule CreateClassForStatics
    transform s : JUDOPSM!Namespace
    to t : ASM!EClass {
        guard: s.elements.selectOne(e | e.isKindOf(JUDOPSM!StaticData) or e.isKindOf(JUDOPSM!StaticNavigation)).isDefined()

        t.name = "Ê˜Static";
        t.abstract = true;

        s.transformToAsm().eClassifiers.add(t);
}

rule CreateStaticData
	transform s : JUDOPSM!StaticData
	to t : ASM!EAttribute
	extends CreatePrimitiveAccessor {
		s.getNamespace().equivalent("CreateClassForStatics").eStructuralFeatures.add(t);
}

rule CreateStaticNavigation
	transform s : JUDOPSM!StaticNavigation
	to t : ASM!EReference
	extends CreateReferenceAccessor {
		s.getNamespace().equivalent("CreateClassForStatics").eStructuralFeatures.add(t);
}
