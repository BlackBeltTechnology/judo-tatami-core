import "../utils/_importUtils.eol";
import "namespace.etl";

rule CreateEntityAnnotationClass
	transform s : JUDOPSM!EntityType
	to t : ASM!EAnnotation {
        t.source = asmUtils.getAnnotationUri("entity");
        
        var entity = new ASM!EStringToStringMapEntry;
        entity.key = "value";
        entity.value = "true";
        t.details.add(entity);
        
        s.equivalent("CreateEntityClass").eAnnotations.add(t);
	}

rule CreateDocumentationAnnotationForEntityType
    transform s : JUDOPSM!EntityType
    to t : ASM!EAnnotation
    extends CreateDocumentationAnnotation {
        s.equivalent("CreateEntityClass").eAnnotations.add(t);
    }

rule CreateEntityClass
	transform s : JUDOPSM!EntityType
	to t : ASM!EClass {
		t.name = s.name;
		t.abstract = s.abstract;
		for (super in s.superEntityTypes) {
			t.eSuperTypes.add(super.equivalent("CreateEntityClass"));
		}
		s.eContainer.asmEquivalent().eClassifiers.add(t);
	}

rule CreateEntityDefaultRepresentationAnnotation
    transform s : JUDOPSM!EntityType
    to t : ASM!EAnnotation {
        guard: s.defaultRepresentation.isDefined()

        t.source = asmUtils.getAnnotationUri("defaultRepresentation");

        var defaultRepresentation = new ASM!EStringToStringMapEntry;
        defaultRepresentation.key = "value";
        defaultRepresentation.value = psmUtils.namespaceElementToString(s.defaultRepresentation).replace("::",".");
        t.details.add(defaultRepresentation);

        s.equivalent("CreateEntityClass").eAnnotations.add(t);
    }

@abstract
rule AddAttributeConstraints
	transform s : JUDOPSM!Attribute
    to t : ASM!EAnnotation {
        t.source = asmUtils.getAnnotationUri("constraints");
        
        s.equivalent("CreateAttribute").eAnnotations.add(t);
    }

rule CreateDocumentationAnnotationForAtrributes
    transform s : JUDOPSM!Attribute
    to t : ASM!EAnnotation
        extends CreateDocumentationAnnotation {
        s.equivalent("CreateAttribute").eAnnotations.add(t);
    }

rule AddStringAttributeConstraints
	transform s : JUDOPSM!Attribute
    to t : ASM!EAnnotation
    extends AddAttributeConstraints {
        guard: s.dataType.isKindOf(JUDOPSM!StringType)
        
        var maxLength = new ASM!EStringToStringMapEntry;
        maxLength.key = "maxLength";
        maxLength.value = s.dataType.maxLength.asString();
        t.details.add(maxLength);
    }

rule AddCustomAttributeConstraints
	transform s : JUDOPSM!Attribute
    to t : ASM!EAnnotation
    extends AddAttributeConstraints {
        guard: s.dataType.isKindOf(JUDOPSM!CustomType)
        
        var customType = new ASM!EStringToStringMapEntry;
        customType.key = "customType";
        customType.value = psmUtils.namespaceElementToString(s.dataType).replace("::", ".");
        t.details.add(customType);
    }

@abstract
rule AddAbstractNumericAttributeConstraints
	transform s : JUDOPSM!Attribute
    to t : ASM!EAnnotation
    extends AddAttributeConstraints {
        var precision = new ASM!EStringToStringMapEntry;
        precision.key = "precision";
        precision.value = s.dataType.precision.asString();
        t.details.add(precision);
        
        var scale = new ASM!EStringToStringMapEntry;
        scale.key = "scale";
        scale.value = s.dataType.scale.asString();
        t.details.add(scale);
    }

rule AddNumericAttributeConstraints
	transform s : JUDOPSM!Attribute
    to t : ASM!EAnnotation
    extends AddAbstractNumericAttributeConstraints {
        guard: s.dataType.isKindOf(JUDOPSM!NumericType) and not s.dataType.isKindOf(JUDOPSM!MeasuredType)
    }

rule AddMeasuredAttributeConstraints
    transform s : JUDOPSM!Attribute
    to t : ASM!EAnnotation
    extends AddAbstractNumericAttributeConstraints {
        guard: s.dataType.isKindOf(JUDOPSM!MeasuredType)
        
        var measure = new ASM!EStringToStringMapEntry;
        measure.key = "measure";
        measure.value = psmUtils.namespaceElementToString(s.dataType.storeUnit.eContainer).replace("::", ".");
        t.details.add(measure);
        
        var measure = new ASM!EStringToStringMapEntry;
        measure.key = "unit";
        measure.value = s.dataType.storeUnit.name;
        t.details.add(measure);
    }

rule CreateAttribute
	transform s : JUDOPSM!Attribute
	to t : ASM!EAttribute {
		guard: s.isPrimitive()
		
		t.name = s.name;
		if (s.required) {
			t.lowerBound = 1;
		} else {
			t.lowerBound = 0;
		}

		t.eType = s.dataType.asmEquivalent();
		s.getEntityType().equivalent("CreateEntityClass").eStructuralFeatures.add(t);
	}

rule CreateIdentifierAnnotationForAttribute
    transform s : JUDOPSM!Attribute
    to t : ASM!EAnnotation {
        guard: s.identifier
        t.source = asmUtils.getAnnotationUri("identifier");
        var identifier = new ASM!EStringToStringMapEntry;
        identifier.key = "value";
        identifier.value = "true";
        t.details.add(identifier);
        s.equivalent("CreateAttribute").eAnnotations.add(t);
    }

@abstract
rule CreateRelation
	transform s : JUDOPSM!Relation
	to t : ASM!EReference {
		t.name = s.name;

		t.lowerBound = s.cardinality.lower;
		t.upperBound = s.cardinality.upper;
		t.eType = s.target.equivalent("CreateEntityClass");

		s.getEntityType().equivalent("CreateEntityClass").eStructuralFeatures.add(t);
	}

rule CreateAssociationEndRelation
	transform s : JUDOPSM!AssociationEnd
	to t : ASM!EReference
	extends CreateRelation {
		if (s.partner.isDefined()) {
			t.eOpposite = s.partner.equivalent("CreateAssociationEndRelation");
		}
}

rule CreateContainmentRelation
	transform s : JUDOPSM!Containment
	to t : ASM!EReference
	extends CreateRelation {
		t.containment = true;
}

rule AddUnmappedDefaultOnlyAttributeAnnotation
	transform s : JUDOPSM!Attribute
    to t : ASM!EAnnotation {
        guard: s.eContainer.isDefined() and s.eContainer.defaultRepresentation.isDefined() and s.eContainer.defaultRepresentation.attributes.exists(a | a.binding == s and a.defaultValue.isDefined())

        t.source = asmUtils.getAnnotationUri("unmappedDefaultOnly");

        var unmappedDefaultOnly = new ASM!EStringToStringMapEntry;
        unmappedDefaultOnly.key = "value";
        unmappedDefaultOnly.value = s.unmappedDefaultOnly.asString();
        t.details.add(unmappedDefaultOnly);

        s.equivalent("CreateAttribute").eAnnotations.add(t);
    }

rule AddUnmappedDefaultOnlyReferenceAnnotation
	transform s : JUDOPSM!AssociationEnd
    to t : ASM!EAnnotation {
        guard: s.eContainer.isDefined() and s.eContainer.defaultRepresentation.isDefined() and s.eContainer.defaultRepresentation.relations.exists(r | r.binding == s and r.defaultValue.isDefined())

        t.source = asmUtils.getAnnotationUri("unmappedDefaultOnly");

        var unmappedDefaultOnly = new ASM!EStringToStringMapEntry;
        unmappedDefaultOnly.key = "value";
        unmappedDefaultOnly.value = s.unmappedDefaultOnly.asString();
        t.details.add(unmappedDefaultOnly);

        s.equivalent("CreateAssociationEndRelation").eAnnotations.add(t);
    }

rule CreateDocumentationAnnotationForAssociationEndRelation
    transform s : JUDOPSM!AssociationEnd
    to t : ASM!EAnnotation
        extends CreateDocumentationAnnotation {
        s.equivalent("CreateAssociationEndRelation").eAnnotations.add(t);
    }

rule CreateDocumentationAnnotationForContainmentRelation
    transform s : JUDOPSM!Containment
    to t : ASM!EAnnotation
        extends CreateDocumentationAnnotation {
        s.equivalent("CreateContainmentRelation").eAnnotations.add(t);
    }
