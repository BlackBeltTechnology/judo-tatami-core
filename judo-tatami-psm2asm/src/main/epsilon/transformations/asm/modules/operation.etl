import "../utils/_importUtils.eol";

@cached
operation JUDOPSM!Parameter isInput() : Boolean {
    return JUDOPSM!OperationDeclaration.all.selectOne(o | o.input == self).isDefined();
}

@cached
operation JUDOPSM!Parameter isOutput() : Boolean {
    return JUDOPSM!OperationDeclaration.all.selectOne(o | o.output == self).isDefined();
}

@cached
operation JUDOPSM!Parameter isFault() : Boolean {
    return JUDOPSM!OperationDeclaration.all.selectOne(o | o.faults.contains(self)).isDefined();
}

@abstract
rule CreateParameter
    transform s : JUDOPSM!Parameter
    to t : ASM!ETypedElement {
        t.lowerBound = s.cardinality.lower;
        t.upperBound = s.cardinality.upper;
        t.eType = s.type.asmEquivalent();
}

@greedy
rule CreateInputParameter
    transform s : JUDOPSM!Parameter
    to t : ASM!EParameter
    extends CreateParameter {
        guard: s.isInput()
        
        t.name = s.name;
        
        s.eContainer.asmEquivalent().eParameters.add(t);
}

@greedy
rule CreateFaultParameter
    transform s : JUDOPSM!Parameter
    to t : ASM!EClass {
        guard: s.isFault()
        
        throw "Not implemented yet";
        
        //s.eContainer.asmEquivalent().eExceptions.add(t);
}

@greedy
rule CreateStatefulAnnotationOnOperation
    transform s : JUDOPSM!OperationDeclaration
    to t : ASM!EAnnotation {
        guard: s.implementation.isDefined()

        t.source = asmUtils.getAnnotationUri("stateful");
		
		var stateful = new ASM!EStringToStringMapEntry;
        stateful.key = "value";
        stateful.value = s.implementation.stateful.asString();
        t.details.add(stateful);
        
        s.asmEquivalent().eAnnotations.add(t);
}

@abstract
rule CreateOperation
    transform s : JUDOPSM!OperationDeclaration
    to t : ASM!EOperation {
        if (s.output.isDefined()) {
        	t.lowerBound = s.output.cardinality.lower;
	        t.upperBound = s.output.cardinality.upper;
            t.eType = s.output.type.asmEquivalent();
        }
}

rule CreateBoundOperation
    transform s : JUDOPSM!BoundOperation
    to t : ASM!EOperation
    extends CreateOperation {
        t.name = s.name;
        
        s.eContainer.asmEquivalent().eOperations.add(t);
}

@greedy
rule CreateUnboundInterface
    transform s : JUDOPSM!Namespace
    to t : ASM!EClass {
    	guard: s.elements.selectOne(e | e.isKindOf(JUDOPSM!UnboundOperation)).isDefined()
    	
        t.name = "ʘUnboundServices";
        t.abstract = true;
        t.interface = true;
        
        s.asmEquivalent().eClassifiers.add(t);
}

rule CreateUnboundOperation
    transform s : JUDOPSM!UnboundOperation
    to t : ASM!EOperation
    extends CreateOperation {
        t.name = s.name;
        
        s.getNamespace().equivalent("CreateUnboundInterface").eOperations.add(t);
}

rule CreateGraphOperation
    transform s : JUDOPSM!TransferObjectRelation
    to t : ASM!EClass {
    	guard: s.isNavigable()
    	
        t.name = s.eContainer.name + "ʘ" + s.name;
        t.abstract = true;
        t.interface = true;
        
        s.eContainer.eContainer.asmEquivalent().eClassifiers.add(t);
}

rule CreateStatefulAnnotationForGetterOperationForRelation
    transform s : JUDOPSM!TransferObjectRelation
    to t : ASM!EAnnotation {
        guard: s.isNavigable()
        
        t.source = asmUtils.getAnnotationUri("stateful");
		
		var stateful = new ASM!EStringToStringMapEntry;
        stateful.key = "value";
        stateful.value = "false";
        t.details.add(stateful);
        
        s.equivalent("CreateGetterOperationForRelation").eAnnotations.add(t);
}

rule CreateGetterOperationForRelation
    transform s : JUDOPSM!TransferObjectRelation
    to t : ASM!EOperation {
        guard: s.isNavigable()
        
        t.name = "get";
        t.eType = s.target.asmEquivalent();
        t.lowerBound = s.cardinality.lower;
        t.upperBound = s.cardinality.upper;

        s.equivalent("CreateGraphOperation").eOperations.add(t);
}

rule CreateMappedEntityTypeAnnotationOnReferenceClassForRelation
    transform s : JUDOPSM!TransferObjectRelation
    to t : ASM!EAnnotation {
        guard: s.isNavigable() and s.isMutable()
        
        t.source = asmUtils.getAnnotationUri("mappedEntityType");
		
		var mappedEntityType = new ASM!EStringToStringMapEntry;
        mappedEntityType.key = "value";
        mappedEntityType.value = asmUtils.getClassifierFQName(s.target.entityType.equivalent("CreateEntityClass"));
        t.details.add(mappedEntityType);
        
        var entityIdPresence = new ASM!EStringToStringMapEntry;
        entityIdPresence.key = "entityIdPresence";
        entityIdPresence.value = JUDOPSM!EntityReferenceType#REQUIRED.name;
        t.details.add(entityIdPresence);
        
        s.equivalent("CreateReferenceClassForRelation").eAnnotations.add(t);
}

rule CreateReferenceClassForRelation
    transform s : JUDOPSM!TransferObjectRelation
    to t : ASM!EClass {
        guard: s.isNavigable() and s.isMutable()
        
        t.name = s.eContainer.name + "ʘ" + s.name + "ʘReference";
        s.eContainer.eContainer.asmEquivalent().eClassifiers.add(t);
}

rule CreateStatefulAnnotationForSetterOperationForRelation
    transform s : JUDOPSM!TransferObjectRelation
    to t : ASM!EAnnotation {
        guard: s.isNavigable() and s.isMutable()
        
        t.source = asmUtils.getAnnotationUri("stateful");
		
		var stateful = new ASM!EStringToStringMapEntry;
        stateful.key = "value";
        stateful.value = "true";
        t.details.add(stateful);
        
        s.equivalent("CreateSetterOperationForRelation").eAnnotations.add(t);
}

rule CreateSetterOperationForRelation
    transform s : JUDOPSM!TransferObjectRelation
    to t : ASM!EOperation {
        guard: s.isNavigable() and s.isMutable()
        
        t.name = "set";
        
        var inputParameter = new ASM!EParameter();
        inputParameter.name = "input";
        inputParameter.lowerBound = s.cardinality.lower;
        inputParameter.upperBound = s.cardinality.upper;
        inputParameter.eType = s.equivalent("CreateReferenceClassForRelation");
        
        t.eParameters.add(inputParameter);
        
        s.equivalent("CreateGraphOperation").eOperations.add(t);
}

rule CreateStatefulAnnotationForUnsetterOperationForRelation
    transform s : JUDOPSM!TransferObjectRelation
    to t : ASM!EAnnotation {
        guard: s.isNavigable() and s.isMutable() and not s.isCollection()
        
        t.source = asmUtils.getAnnotationUri("stateful");
		
		var stateful = new ASM!EStringToStringMapEntry;
        stateful.key = "value";
        stateful.value = "true";
        t.details.add(stateful);
        
        s.equivalent("CreateUnsetterOperationForRelation").eAnnotations.add(t);
}

rule CreateUnsetterOperationForRelation
    transform s : JUDOPSM!TransferObjectRelation
    to t : ASM!EOperation {
        guard: s.isNavigable() and s.isMutable() and not s.isCollection()
        
        t.name = "unset";
        
        s.equivalent("CreateGraphOperation").eOperations.add(t);
}

rule CreateStatefulAnnotationForAddAllOperationForRelation
    transform s : JUDOPSM!TransferObjectRelation
    to t : ASM!EAnnotation {
        guard: s.isNavigable() and s.isMutable() and s.isCollection()
        
        t.source = asmUtils.getAnnotationUri("stateful");
		
		var stateful = new ASM!EStringToStringMapEntry;
        stateful.key = "value";
        stateful.value = "true";
        t.details.add(stateful);
        
        s.equivalent("CreateAddAllOperationForRelation").eAnnotations.add(t);
}

rule CreateAddAllOperationForRelation
    transform s : JUDOPSM!TransferObjectRelation
    to t : ASM!EOperation {
        guard: s.isNavigable() and s.isMutable() and s.isCollection()
        
        t.name = "addAll";
        
        var inputParameter = new ASM!EParameter();
        inputParameter.name = "input";
        inputParameter.lowerBound = 1;
        inputParameter.upperBound = s.cardinality.upper;
        inputParameter.eType = s.equivalent("CreateReferenceClassForRelation");
        
        t.eParameters.add(inputParameter);
        
        s.equivalent("CreateGraphOperation").eOperations.add(t);
}

rule CreateStatefulAnnotationForRemoveAllOperationForRelation
    transform s : JUDOPSM!TransferObjectRelation
    to t : ASM!EAnnotation {
        guard: s.isNavigable() and s.isMutable() and s.isCollection()
        
        t.source = asmUtils.getAnnotationUri("stateful");
		
		var stateful = new ASM!EStringToStringMapEntry;
        stateful.key = "value";
        stateful.value = "true";
        t.details.add(stateful);
        
        s.equivalent("CreateRemoveAllOperationForRelation").eAnnotations.add(t);
}

rule CreateRemoveAllOperationForRelation
    transform s : JUDOPSM!TransferObjectRelation
    to t : ASM!EOperation {
        guard: s.isNavigable() and s.isMutable() and s.isCollection()
        
        t.name = "removeAll";
        
        var inputParameter = new ASM!EParameter();
        inputParameter.name = "input";
        inputParameter.lowerBound = 1;
        inputParameter.upperBound = -1;
        inputParameter.eType = s.equivalent("CreateReferenceClassForRelation");
        
        t.eParameters.add(inputParameter);
        
        s.equivalent("CreateGraphOperation").eOperations.add(t);
}

rule CreateStatefulAnnotationForRangeOperationForRelation
    transform s : JUDOPSM!TransferObjectRelation
    to t : ASM!EAnnotation {
        guard: s.isNavigable() and s.range.isDefined()
        
        t.source = asmUtils.getAnnotationUri("stateful");
		
		var stateful = new ASM!EStringToStringMapEntry;
        stateful.key = "value";
        stateful.value = "false";
        t.details.add(stateful);
        
        s.equivalent("CreateRangeOperationForRelation").eAnnotations.add(t);
}

rule CreateRangeOperationForRelation
    transform s : JUDOPSM!TransferObjectRelation
    to t : ASM!EOperation {
        guard: s.isNavigable() and s.range.isDefined()
        
        t.name = "getRange";
        
        t.lowerBound = 0;
        t.upperBound = -1;
        t.eType = s.target.asmEquivalent();
        
        s.equivalent("CreateGraphOperation").eOperations.add(t);
}
