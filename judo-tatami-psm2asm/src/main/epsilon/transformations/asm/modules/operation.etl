import "../utils/_importUtils.eol";

@abstract
rule CreateParameter
    transform s : JUDOPSM!Parameter
    to t : ASM!ETypedElement {
        t.lowerBound = s.cardinality.lower;
        t.upperBound = s.cardinality.upper;
        t.eType = s.type.asmEquivalent();
}

@abstract
rule CreateScriptBodyAnnotation
    transform s : JUDOPSM!OperationDeclaration
    to t : ASM!EAnnotation {
        t.source = asmUtils.getAnnotationUri("script");

		var script = new ASM!EStringToStringMapEntry;
        script.key = "body";
        script.value = s.implementation.body;
        t.details.add(script);
}

@greedy
rule CreateInputParameter
    transform s : JUDOPSM!Parameter
    to t : ASM!EParameter
    extends CreateParameter {
        guard: s.isInput()
        
        t.name = s.name;
        s.eContainer.asmEquivalent().eParameters.add(t);
}

@greedy
rule CreateOutputParameterName
    transform s : JUDOPSM!OperationDeclaration
    to t : ASM!EAnnotation {
        guard: s.output.isDefined()

        t.source = asmUtils.getAnnotationUri("outputParameterName");

        var script = new ASM!EStringToStringMapEntry;
        script.key = "value";
        script.value = s.output.name;
        t.details.add(script);

        s.asmEquivalent().eAnnotations.add(t);
    }

@greedy
rule CreateFaultParameter
    transform s : JUDOPSM!Parameter
    to t : ASM!EClass {
        guard: s.isFault()
        
        throw "Not implemented yet";
        
        //s.eContainer.asmEquivalent().eExceptions.add(t);
}

@greedy
rule CreateStatefulAnnotationOnOperation
    transform s : JUDOPSM!TransferOperation
    to t : ASM!EAnnotation {
        guard: s.implementation.isDefined()

        t.source = asmUtils.getAnnotationUri("stateful");
		
		var stateful = new ASM!EStringToStringMapEntry;
        stateful.key = "value";
        stateful.value = s.implementation.stateful.asString();
        t.details.add(stateful);
        
        s.asmEquivalent().eAnnotations.add(t);
}

@greedy
rule CreateStatefulAnnotationOnOperationWithoutImplementationAndBehaviour
    transform s : JUDOPSM!TransferOperation
    to t : ASM!EAnnotation {
        guard: not s.implementation.isDefined() and not s.behaviour.isDefined()

        t.source = asmUtils.getAnnotationUri("stateful");
		
		var stateful = new ASM!EStringToStringMapEntry;
        stateful.key = "value";
        stateful.value = "true";
        t.details.add(stateful);
        
        s.asmEquivalent().eAnnotations.add(t);
}

@greedy
rule CreateStatefulAnnotationOnOperationWithBehaviour
    transform s : JUDOPSM!TransferOperation
    to t : ASM!EAnnotation {
        guard: not s.implementation.isDefined() and s.behaviour.isDefined()

        t.source = asmUtils.getAnnotationUri("stateful");

		var stateful = new ASM!EStringToStringMapEntry;
        stateful.key = "value";
        switch (s.behaviour.behaviourType) {
            case JUDOPSM!TransferOperationBehaviourType#GET:
                stateful.value = "false";
            case JUDOPSM!TransferOperationBehaviourType#GET_RELATION:
                stateful.value = "false";
            case JUDOPSM!TransferOperationBehaviourType#GET_RANGE_OF_RELATION:
                stateful.value = "false";
            case JUDOPSM!TransferOperationBehaviourType#GET_TEMPLATE:
                stateful.value = "false";
            case JUDOPSM!TransferOperationBehaviourType#GET_PRINCIPAL:
                stateful.value = "false";
            case JUDOPSM!TransferOperationBehaviourType#MAP_PRINCIPAL:
                stateful.value = "false";
            default:
                stateful.value = "true";
        }
        t.details.add(stateful);

        s.asmEquivalent().eAnnotations.add(t);
}

@abstract
rule CreateOperation
    transform s : JUDOPSM!OperationDeclaration
    to t : ASM!EOperation {
        if (s.output.isDefined()) {
        	t.lowerBound = s.output.cardinality.lower;
	        t.upperBound = s.output.cardinality.upper;
            t.eType = s.output.type.asmEquivalent();
        }
}

@greedy
rule CreateBoundOperation
    transform s : JUDOPSM!BoundOperation
    to t : ASM!EOperation
    extends CreateOperation {
        t.name = s.name;

        s.eContainer.equivalent("CreateEntityClass").eOperations.add(t);
}

@greedy
rule CreateInstanceRepresentationOfBoundOperation
    transform s : JUDOPSM!BoundOperation
    to t : ASM!EAnnotation {
        t.source = asmUtils.getAnnotationUri("instanceRepresentation");

        var instanceRepresentation = new ASM!EStringToStringMapEntry;
        instanceRepresentation.key = "value";
        instanceRepresentation.value = asmUtils.getClassifierFQName(s.instanceRepresentation.asmEquivalent());
        t.details.add(instanceRepresentation);

        s.equivalent("CreateBoundOperation").eAnnotations.add(t);
}

@greedy
rule CreateBoundOperationAnnotation
    transform s : JUDOPSM!OperationDeclaration
    to t : ASM!EAnnotation {
        t.source = asmUtils.getAnnotationUri("bound");

        var boundEntry = new ASM!EStringToStringMapEntry;
        boundEntry.key = "value";
        boundEntry.value = (s.isKindOf(JUDOPSM!BoundOperation) or s.isKindOf(JUDOPSM!BoundTransferOperation)).asString();
        t.details.add(boundEntry);

        s.asmEquivalent().eAnnotations.add(t);
}

@greedy
rule CreateBoundTransferOperation
    transform s : JUDOPSM!BoundTransferOperation
    to t : ASM!EOperation {
        t.name = s.name;

        if (s.binding.output.isDefined()) {
            t.lowerBound = s.binding.output.cardinality.lower;
            t.upperBound = s.binding.output.cardinality.upper;
            t.eType = s.binding.output.type.asmEquivalent();
        }

        var bindingAnnotation = new ASM!EAnnotation;
        bindingAnnotation.source = asmUtils.getAnnotationUri("binding");
        var bindingEntry = new ASM!EStringToStringMapEntry;
        bindingEntry.key = "value";
        bindingEntry.value = s.binding.asmEquivalent().name;
        bindingAnnotation.details.add(bindingEntry);
        t.eAnnotations.add(bindingAnnotation);

        s.eContainer.asmEquivalent().eOperations.add(t);
}

@greedy
rule CreateScriptBodyAnnotationForBoundOperation
    transform s : JUDOPSM!BoundOperation
    to t : ASM!EAnnotation
    extends CreateScriptBodyAnnotation {
        guard: s.implementation.isDefined() and s.implementation.body.isDefined() and s.implementation.body.trim() <> ""

        s.equivalent("CreateBoundOperation").eAnnotations.add(t);
}

@greedy
rule CreateAbstractAnnotationForBoundOperation
    transform s : JUDOPSM!BoundOperation
    to t : ASM!EAnnotation {
        guard: s.`abstract`

        t.source = asmUtils.getAnnotationUri("abstract");

        var abstractEntry = new ASM!EStringToStringMapEntry;
        abstractEntry.key = "value";
        abstractEntry.value = s.`abstract`.asString();
        t.details.add(abstractEntry);

        s.equivalent("CreateBoundOperation").eAnnotations.add(t);
}

@greedy
rule CreateUnboundOperation
    transform s : JUDOPSM!UnboundOperation
    to t : ASM!EOperation
    extends CreateOperation {
        t.name = s.name;

        s.eContainer.asmEquivalent().eOperations.add(t);
}

@greedy
rule CreateScriptBodyAnnotationForUnboundOperation
    transform s : JUDOPSM!UnboundOperation
    to t : ASM!EAnnotation
    extends CreateScriptBodyAnnotation {
        guard: s.implementation.isDefined() and s.implementation.body.isDefined() and s.implementation.body.trim() <> ""

        s.equivalent("CreateUnboundOperation").eAnnotations.add(t);
}

@greedy
rule CreateInitializerAnnotation
    transform s : JUDOPSM!UnboundOperation
    to t : ASM!EAnnotation{
        guard: s.initializer

        t.source = asmUtils.getAnnotationUri("initializer");

        var initializerEntry = new ASM!EStringToStringMapEntry;
        initializerEntry.key = "value";
        initializerEntry.value = "true";
        t.details.add(initializerEntry);

        s.equivalent("CreateUnboundOperation").eAnnotations.add(t);
}

@abstract
rule AddAnnotationToBoundOperation
    transform s : JUDOPSM!BoundTransferOperation
    to t : ASM!EAnnotation {
        t.source = asmUtils.getAnnotationUri("behaviour");

        s.equivalent("CreateBoundTransferOperation").eAnnotations.add(t);
}

@greedy
rule AddBehaviourAnnotation
    transform s : JUDOPSM!TransferOperation
    to t : ASM!EAnnotation {
        guard: s.behaviour.isDefined()    
    
        t.source = asmUtils.getAnnotationUri("behaviour");
        
        var typeEntry = new ASM!EStringToStringMapEntry;
        typeEntry.key = "type";
        switch (s.behaviour.behaviourType) {
            case JUDOPSM!TransferOperationBehaviourType#LIST: typeEntry.value = "list";
            case JUDOPSM!TransferOperationBehaviourType#CREATE_INSTANCE: typeEntry.value = "createInstance";
            case JUDOPSM!TransferOperationBehaviourType#VALIDATE_CREATE: typeEntry.value = "validateCreate";
            case JUDOPSM!TransferOperationBehaviourType#REFRESH: typeEntry.value = "refresh";
            case JUDOPSM!TransferOperationBehaviourType#UPDATE_INSTANCE: typeEntry.value = "updateInstance";
            case JUDOPSM!TransferOperationBehaviourType#VALIDATE_UPDATE: typeEntry.value = "validateUpdate";
            case JUDOPSM!TransferOperationBehaviourType#DELETE_INSTANCE: typeEntry.value = "deleteInstance";
            case JUDOPSM!TransferOperationBehaviourType#SET_REFERENCE: typeEntry.value = "setReference";
            case JUDOPSM!TransferOperationBehaviourType#UNSET_REFERENCE: typeEntry.value = "unsetReference";
            case JUDOPSM!TransferOperationBehaviourType#ADD_REFERENCE: typeEntry.value = "addReference";
            case JUDOPSM!TransferOperationBehaviourType#DELETE_REFERENCE: typeEntry.value = "removeReference";
            case JUDOPSM!TransferOperationBehaviourType#GET_RANGE: typeEntry.value = "getReferenceRange";
            case JUDOPSM!TransferOperationBehaviourType#GET: typeEntry.value = "get"; 
            case JUDOPSM!TransferOperationBehaviourType#CREATE: typeEntry.value = "create";
            case JUDOPSM!TransferOperationBehaviourType#UPDATE: typeEntry.value = "update";
            case JUDOPSM!TransferOperationBehaviourType#DELETE: typeEntry.value = "delete";
            case JUDOPSM!TransferOperationBehaviourType#SET_RELATION: typeEntry.value = "set";
            case JUDOPSM!TransferOperationBehaviourType#UNSET_RELATION: typeEntry.value = "unset";
            case JUDOPSM!TransferOperationBehaviourType#ADD_ALL_TO_RELATION: typeEntry.value = "addAll";
            case JUDOPSM!TransferOperationBehaviourType#REMOVE_ALL_FROM_RELATION: typeEntry.value = "removeAll";
            case JUDOPSM!TransferOperationBehaviourType#GET_RELATION: typeEntry.value = "get";
            case JUDOPSM!TransferOperationBehaviourType#CREATE_RELATION: typeEntry.value = "create";
            case JUDOPSM!TransferOperationBehaviourType#UPDATE_RELATION: typeEntry.value = "update";
            case JUDOPSM!TransferOperationBehaviourType#DELETE_RELATION: typeEntry.value = "delete";
            case JUDOPSM!TransferOperationBehaviourType#SET_RELATION_OF_RELATION: typeEntry.value = "set";
            case JUDOPSM!TransferOperationBehaviourType#UNSET_RELATION_OF_RELATION: typeEntry.value = "unset";
            case JUDOPSM!TransferOperationBehaviourType#ADD_ALL_TO_RELATION_OF_RELATION: typeEntry.value = "addAll";
            case JUDOPSM!TransferOperationBehaviourType#REMOVE_ALL_FROM_RELATION_OF_RELATION: typeEntry.value = "removeAll";
            case JUDOPSM!TransferOperationBehaviourType#GET_RANGE_OF_RELATION: typeEntry.value = "getRange";
            case JUDOPSM!TransferOperationBehaviourType#GET_TEMPLATE: typeEntry.value = "getTemplate";
            case JUDOPSM!TransferOperationBehaviourType#GET_PRINCIPAL: typeEntry.value = "getPrincipal";
            case JUDOPSM!TransferOperationBehaviourType#MAP_PRINCIPAL: typeEntry.value = "mapPrincipal";
        }
        t.details.add(typeEntry);
        
        var ownerEntry = new ASM!EStringToStringMapEntry;
        ownerEntry.key = "owner";
        switch (s.behaviour.behaviourType) {
            case JUDOPSM!TransferOperationBehaviourType#GET_RANGE_OF_RELATION:
                ownerEntry.value = asmUtils.getOperationFQName(s.behaviour.owner.eContainer.asmEquivalent());
            case JUDOPSM!TransferOperationBehaviourType#GET_TEMPLATE:
                ownerEntry.value = asmUtils.getClassifierFQName(s.behaviour.owner.asmEquivalent());
            case JUDOPSM!TransferOperationBehaviourType#GET_PRINCIPAL:
                ownerEntry.value = asmUtils.getClassifierFQName(s.behaviour.owner.asmEquivalent());
            case JUDOPSM!TransferOperationBehaviourType#MAP_PRINCIPAL:
                ownerEntry.value = asmUtils.getClassifierFQName(s.behaviour.owner.asmEquivalent());
            default:
                ownerEntry.value = asmUtils.getReferenceFQName(s.behaviour.owner.asmEquivalent());
        }
        t.details.add(ownerEntry);
        
        if (s.behaviour.behaviourType == JUDOPSM!TransferOperationBehaviourType#GET_RANGE_OF_RELATION) {
            var parameterNameEntry = new ASM!EStringToStringMapEntry;
	        parameterNameEntry.key = "parameterName";
	        parameterNameEntry.value = s.behaviour.owner.name;
	        t.details.add(parameterNameEntry);
        }
        
        if (s.behaviour.relation.isDefined()) {
	        var relationEntry = new ASM!EStringToStringMapEntry;
	        relationEntry.key = "relation";
	        relationEntry.value = asmUtils.getReferenceFQName(s.behaviour.relation.asmEquivalent());
	        t.details.add(relationEntry);
        }
        
        s.asmEquivalent().eAnnotations.add(t); 
}
