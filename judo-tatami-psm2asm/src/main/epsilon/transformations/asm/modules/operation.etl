import "../utils/_importUtils.eol";

@cached
operation JUDOPSM!Parameter isInput() : Boolean {
    return JUDOPSM!OperationDeclaration.all.selectOne(o | o.input == self).isDefined();
}

@cached
operation JUDOPSM!Parameter isOutput() : Boolean {
    return JUDOPSM!OperationDeclaration.all.selectOne(o | o.output == self).isDefined();
}

@cached
operation JUDOPSM!Parameter isFault() : Boolean {
    return JUDOPSM!OperationDeclaration.all.selectOne(o | o.faults.contains(self)).isDefined();
}

@abstract
rule CreateParameter
    transform s : JUDOPSM!Parameter
    to t : ASM!ETypedElement {
        t.lowerBound = s.cardinality.lower;
        t.upperBound = s.cardinality.upper;
        t.eType = s.type.asmEquivalent();
}

@abstract
rule CreateScriptBodyAnnotation
    transform s : JUDOPSM!OperationDeclaration
    to t : ASM!EAnnotation {
        guard: s.implementation.isDefined() and s.implementation.body.isDefined() and s.implementation.body.trim() <> ""

        t.source = asmUtils.getAnnotationUri("script");

		var script = new ASM!EStringToStringMapEntry;
        script.key = "body";
        script.value = s.implementation.body;
        t.details.add(script);
}


@greedy
rule CreateInputParameter
    transform s : JUDOPSM!Parameter
    to t : ASM!EParameter
    extends CreateParameter {
        guard: s.isInput()
        
        t.name = s.name;
        
        s.eContainer.asmEquivalent().eParameters.add(t);
}

@greedy
rule CreateOutputParameterName
    transform s : JUDOPSM!OperationDeclaration
    to t : ASM!EAnnotation {
        guard: s.output.isDefined()

        t.source = asmUtils.getAnnotationUri("outputParameterName");

        var script = new ASM!EStringToStringMapEntry;
        script.key = "value";
        script.value = s.output.name;
        t.details.add(script);

        s.asmEquivalent().eAnnotations.add(t);
    }

@greedy
rule CreateFaultParameter
    transform s : JUDOPSM!Parameter
    to t : ASM!EClass {
        guard: s.isFault()
        
        throw "Not implemented yet";
        
        //s.eContainer.asmEquivalent().eExceptions.add(t);
}

@greedy
rule CreateStatefulAnnotationOnOperation
    transform s : JUDOPSM!OperationDeclaration
    to t : ASM!EAnnotation {
        guard: s.implementation.isDefined()

        t.source = asmUtils.getAnnotationUri("stateful");
		
		var stateful = new ASM!EStringToStringMapEntry;
        stateful.key = "value";
        stateful.value = s.implementation.stateful.asString();
        t.details.add(stateful);
        
        s.asmEquivalent().eAnnotations.add(t);
}

rule CreateStatefulAnnotationOnBoundOperationWithBehaviour
    transform s : JUDOPSM!BoundOperation
    to t : ASM!EAnnotation {
        guard: not s.implementation.isDefined() and
            (s.getOwnerRelation.isDefined() or s.createOwnerRelation.isDefined() or s.updateOwnerRelation.isDefined() or s.deleteOwnerRelation.isDefined())

        t.source = asmUtils.getAnnotationUri("stateful");

		var stateful = new ASM!EStringToStringMapEntry;
        stateful.key = "value";
        stateful.value = (s.createOwnerRelation.isDefined() or s.updateOwnerRelation.isDefined() or s.deleteOwnerRelation.isDefined()).asString();
        t.details.add(stateful);

        s.asmEquivalent().eAnnotations.add(t);
}

rule CreateStatefulAnnotationOnBoundOperationWithRelationWithBehaviour
    transform s : JUDOPSM!BoundOperationWithRelation
    to t : ASM!EAnnotation {
        guard: not s.implementation.isDefined() and
            (s.setOwnerRelation.isDefined() or s.unsetOwnerRelation.isDefined() or s.addAllOwnerRelation.isDefined() or s.removeAllOwnerRelation.isDefined() or s.getRangeOwnerParameter.isDefined())

        t.source = asmUtils.getAnnotationUri("stateful");

		var stateful = new ASM!EStringToStringMapEntry;
        stateful.key = "value";
        stateful.value = (s.setOwnerRelation.isDefined() or s.unsetOwnerRelation.isDefined() or s.addAllOwnerRelation.isDefined() or s.removeAllOwnerRelation.isDefined()).asString();
        t.details.add(stateful);

        s.asmEquivalent().eAnnotations.add(t);
}

rule CreateStatefulAnnotationOnUnboundOperationWithBehaviour
    transform s : JUDOPSM!UnboundOperation
    to t : ASM!EAnnotation {
        guard: not s.implementation.isDefined() and
            (s.getOwnerRelation.isDefined() or s.createOwnerRelation.isDefined() or s.updateOwnerRelation.isDefined() or s.deleteOwnerRelation.isDefined() or s.getTemplateOwnerTransferObjectType.isDefined())

        t.source = asmUtils.getAnnotationUri("stateful");

		var stateful = new ASM!EStringToStringMapEntry;
        stateful.key = "value";
        stateful.value = (s.createOwnerRelation.isDefined() or s.updateOwnerRelation.isDefined() or s.deleteOwnerRelation.isDefined()).asString();
        t.details.add(stateful);

        s.asmEquivalent().eAnnotations.add(t);
}

rule CreateStatefulAnnotationOnUnboundOperationWithRelationWithBehaviour
    transform s : JUDOPSM!UnboundOperationWithRelation
    to t : ASM!EAnnotation {
        guard: not s.implementation.isDefined() and
            (s.setOwnerRelation.isDefined() or s.unsetOwnerRelation.isDefined() or s.addAllOwnerRelation.isDefined() or s.removeAllOwnerRelation.isDefined() or s.getRangeOwnerParameter.isDefined())

        t.source = asmUtils.getAnnotationUri("stateful");

		var stateful = new ASM!EStringToStringMapEntry;
        stateful.key = "value";
        stateful.value = (s.setOwnerRelation.isDefined() or s.unsetOwnerRelation.isDefined() or s.addAllOwnerRelation.isDefined() or s.removeAllOwnerRelation.isDefined()).asString();
        t.details.add(stateful);

        s.asmEquivalent().eAnnotations.add(t);
}

@abstract
rule CreateOperation
    transform s : JUDOPSM!OperationDeclaration
    to t : ASM!EOperation {
        if (s.output.isDefined()) {
        	t.lowerBound = s.output.cardinality.lower;
	        t.upperBound = s.output.cardinality.upper;
            t.eType = s.output.type.asmEquivalent();
        }
}

@greedy
rule CreateBoundOperation
    transform s : JUDOPSM!BoundOperation
    to t : ASM!EOperation
    extends CreateOperation {
        t.name = s.name;
        
        s.eContainer.asmEquivalent().eOperations.add(t);
}

@greedy
rule CreateScriptBodyAnnotationForBoundOperation
    transform s : JUDOPSM!BoundOperation
    to t : ASM!EAnnotation
    extends CreateScriptBodyAnnotation {
        s.equivalent("CreateBoundOperation").eAnnotations.add(t);
}

@greedy
rule CreateUnboundInterface
    transform s : JUDOPSM!Namespace
    to t : ASM!EClass {
    	guard: s.elements.selectOne(e | e.isKindOf(JUDOPSM!UnboundOperation)).isDefined()
    	
        t.name = "__UnboundServices";
        t.abstract = true;
        t.interface = true;
        
        s.asmEquivalent().eClassifiers.add(t);
}

@greedy
rule CreateUnboundOperation
    transform s : JUDOPSM!UnboundOperation
    to t : ASM!EOperation
    extends CreateOperation {
        t.name = s.name;
        
        s.getNamespace().equivalent("CreateUnboundInterface").eOperations.add(t);
}

@greedy
rule CreateScriptBodyAnnotationForUnboundOperation
    transform s : JUDOPSM!UnboundOperation
    to t : ASM!EAnnotation
    extends CreateScriptBodyAnnotation {
        s.equivalent("CreateUnboundOperation").eAnnotations.add(t);
}

@abstract
rule AddAnnotationToBoundOperation
    transform s : JUDOPSM!BoundOperation
    to t : ASM!EAnnotation {
        t.source = asmUtils.getAnnotationUri("behaviour");

        s.equivalent("CreateBoundOperation").eAnnotations.add(t);
}

@abstract
rule AddAnnotationToBoundOperationWithRelation
    transform s : JUDOPSM!BoundOperationWithRelation
    to t : ASM!EAnnotation
    extends AddAnnotationToBoundOperation {
        var relationEntry = new ASM!EStringToStringMapEntry;
        relationEntry.key = "relation";
        relationEntry.value = asmUtils.getReferenceFQName(s.relation.equivalent("CreateTransferObjectRelation"));
        t.details.add(relationEntry);
}

@abstract
rule AddAnnotationToUnboundOperation
    transform s : JUDOPSM!UnboundOperation
    to t : ASM!EAnnotation {
        t.source = asmUtils.getAnnotationUri("behaviour");

        s.equivalent("CreateUnboundOperation").eAnnotations.add(t);
}

@abstract
rule AddAnnotationToUnboundOperationWithRelation
    transform s : JUDOPSM!UnboundOperationWithRelation
    to t : ASM!EAnnotation
    extends AddAnnotationToUnboundOperation {
        var relationEntry = new ASM!EStringToStringMapEntry;
        relationEntry.key = "relation";
        relationEntry.value = asmUtils.getReferenceFQName(s.relation.equivalent("CreateTransferObjectRelation"));
        t.details.add(relationEntry);
}

rule AddGetAnnotationToBoundOperation
    transform s : JUDOPSM!BoundOperation
    to t : ASM!EAnnotation
    extends AddAnnotationToBoundOperation {
        guard: s.getOwnerRelation.isDefined()

        t.addBehaviourAnnotationOfOwnerRelation("get", asmUtils.getReferenceFQName(s.getOwnerRelation.equivalent("CreateTransferObjectRelation")));
}

rule AddCreateAnnotationToBoundOperation
    transform s : JUDOPSM!BoundOperation
    to t : ASM!EAnnotation
    extends AddAnnotationToBoundOperation {
        guard: s.createOwnerRelation.isDefined()

        t.addBehaviourAnnotationOfOwnerRelation("create", asmUtils.getReferenceFQName(s.createOwnerRelation.equivalent("CreateTransferObjectRelation")));
}

rule AddUpdateAnnotationToBoundOperation
    transform s : JUDOPSM!BoundOperation
    to t : ASM!EAnnotation
    extends AddAnnotationToBoundOperation {
        guard: s.updateOwnerRelation.isDefined()

        t.addBehaviourAnnotationOfOwnerRelation("update", asmUtils.getReferenceFQName(s.updateOwnerRelation.equivalent("CreateTransferObjectRelation")));
}

rule AddDeleteAnnotationToBoundOperation
    transform s : JUDOPSM!BoundOperation
    to t : ASM!EAnnotation
    extends AddAnnotationToBoundOperation {
        guard: s.deleteOwnerRelation.isDefined()

        t.addBehaviourAnnotationOfOwnerRelation("delete", asmUtils.getReferenceFQName(s.deleteOwnerRelation.equivalent("CreateTransferObjectRelation")));
}

rule AddSetAnnotationToBoundOperationWithRelation
    transform s : JUDOPSM!BoundOperationWithRelation
    to t : ASM!EAnnotation
    extends AddAnnotationToBoundOperationWithRelation {
        guard: s.setOwnerRelation.isDefined()

        t.addBehaviourAnnotationOfOwnerRelation("set", asmUtils.getReferenceFQName(s.setOwnerRelation.equivalent("CreateTransferObjectRelation")));
}

rule AddUnSetAnnotationToBoundOperationWithRelation
    transform s : JUDOPSM!BoundOperationWithRelation
    to t : ASM!EAnnotation
    extends AddAnnotationToBoundOperationWithRelation {
        guard: s.unsetOwnerRelation.isDefined()

        t.addBehaviourAnnotationOfOwnerRelation("unset", asmUtils.getReferenceFQName(s.unsetOwnerRelation.equivalent("CreateTransferObjectRelation")));
}
rule AddAddAllAnnotationToBoundOperationWithRelation
    transform s : JUDOPSM!BoundOperationWithRelation
    to t : ASM!EAnnotation
    extends AddAnnotationToBoundOperationWithRelation {
        guard: s.addAllOwnerRelation.isDefined()

        t.addBehaviourAnnotationOfOwnerRelation("addAll", asmUtils.getReferenceFQName(s.addAllOwnerRelation.equivalent("CreateTransferObjectRelation")));
}

rule AddRemoveAllAnnotationToBoundOperationWithRelation
    transform s : JUDOPSM!BoundOperationWithRelation
    to t : ASM!EAnnotation
    extends AddAnnotationToBoundOperationWithRelation {
        guard: s.removeAllOwnerRelation.isDefined()

        t.addBehaviourAnnotationOfOwnerRelation("removeAll", asmUtils.getReferenceFQName(s.removeAllOwnerRelation.equivalent("CreateTransferObjectRelation")));
}

rule AddGetRangeAnnotationToBoundOperationWithRelation
    transform s : JUDOPSM!BoundOperationWithRelation
    to t : ASM!EAnnotation
    extends AddAnnotationToBoundOperationWithRelation {
        guard: s.getRangeOwnerParameter.isDefined() and s.getRangeOwnerParameter.isInput()

        var asmParameter = s.getRangeOwnerParameter.equivalent("CreateInputParameter");
        t.addBehaviourAnnotationOfOwnerParameter("getRange", asmUtils.getOperationFQName(asmParameter.eContainer), asmParameter.name);
}

rule AddGetRangeAnnotationToUnboundOperationWithRelation
    transform s : JUDOPSM!UnboundOperationWithRelation
    to t : ASM!EAnnotation
    extends AddAnnotationToUnboundOperationWithRelation {
        guard: s.getRangeOwnerParameter.isDefined() and s.getRangeOwnerParameter.isInput()

        var asmParameter = s.getRangeOwnerParameter.equivalent("CreateInputParameter");
        t.addBehaviourAnnotationOfOwnerParameter("getRange", asmUtils.getOperationFQName(asmParameter.eContainer), asmParameter.name);
}

rule AddGetTemplateAnnotationToUnboundOperation
    transform s : JUDOPSM!UnboundOperation
    to t : ASM!EAnnotation
    extends AddAnnotationToUnboundOperation {
        guard: s.getTemplateOwnerTransferObjectType.isDefined()

        t.addBehaviourAnnotationOfOwnerTransferObjectType("getTemplate", asmUtils.getClassifierFQName(s.getTemplateOwnerTransferObjectType.asmEquivalent()));
}
